/*
 Navicat Premium Data Transfer

 Source Server         : AWS MENA
 Source Server Type    : PostgreSQL
 Source Server Version : 90303
 Source Host           : osmdb.crcholi0be4z.us-east-1.rds.amazonaws.com
 Source Database       : osmdb
 Source Schema         : public

 Target Server Type    : PostgreSQL
 Target Server Version : 90303
 File Encoding         : utf-8

 Date: 09/17/2014 14:37:53 PM
*/

-- ----------------------------
--  Sequence structure for app_seq
-- ----------------------------
DROP SEQUENCE IF EXISTS "public"."app_seq";
CREATE SEQUENCE "public"."app_seq" INCREMENT 1 START 4 MAXVALUE 9223372036854775807 MINVALUE 1 CACHE 1;
ALTER TABLE "public"."app_seq" OWNER TO "osm_admin";

-- ----------------------------
--  Sequence structure for id_seq
-- ----------------------------
DROP SEQUENCE IF EXISTS "public"."id_seq";
CREATE SEQUENCE "public"."id_seq";
ALTER TABLE "public"."id_seq" OWNER TO "nodepg";

-- ----------------------------
--  Sequence structure for radarsat2_seq
-- ----------------------------
DROP SEQUENCE IF EXISTS "public"."radarsat2_seq";
CREATE SEQUENCE "public"."radarsat2_seq" INCREMENT 1 START 3 MAXVALUE 9223372036854775807 MINVALUE 1 CACHE 1;
ALTER TABLE "public"."radarsat2_seq" OWNER TO "osm_admin";

-- ----------------------------
--  Sequence structure for user_seq
-- ----------------------------
DROP SEQUENCE IF EXISTS "public"."user_seq";
CREATE SEQUENCE "public"."user_seq" INCREMENT 1 START 4 MAXVALUE 9223372036854775807 MINVALUE 1 CACHE 1;
ALTER TABLE "public"."user_seq" OWNER TO "osm_admin";

-- ----------------------------
--  Table structure for spatial_ref_sys
-- ----------------------------
DROP TABLE IF EXISTS "public"."spatial_ref_sys";
CREATE TABLE "public"."spatial_ref_sys" (
	"srid" int4 NOT NULL,
	"auth_name" varchar(256) COLLATE "default",
	"auth_srid" int4,
	"srtext" varchar(2048) COLLATE "default",
	"proj4text" varchar(2048) COLLATE "default"
)
WITH (OIDS=FALSE);
ALTER TABLE "public"."spatial_ref_sys" OWNER TO "rdsadmin";

-- ----------------------------
--  Table structure for planet_osm_roads
-- ----------------------------
DROP TABLE IF EXISTS "public"."planet_osm_roads";
CREATE TABLE "public"."planet_osm_roads" (
	"osm_id" int8,
	"bridge" text COLLATE "default",
	"boundary" text COLLATE "default",
	"building" text COLLATE "default",
	"disused" text COLLATE "default",
	"embankment" text COLLATE "default",
	"harbour" text COLLATE "default",
	"intermittent" text COLLATE "default",
	"junction" text COLLATE "default",
	"landuse" text COLLATE "default",
	"leisure" text COLLATE "default",
	"lock" text COLLATE "default",
	"man_made" text COLLATE "default",
	"name" text COLLATE "default",
	"natural" text COLLATE "default",
	"oneway" text COLLATE "default",
	"tunnel" text COLLATE "default",
	"water" text COLLATE "default",
	"waterway" text COLLATE "default",
	"wetland" text COLLATE "default",
	"width" text COLLATE "default",
	"z_order" int4,
	"way_area" float4,
	"way" "public"."geometry"
)
WITH (OIDS=FALSE);
ALTER TABLE "public"."planet_osm_roads" OWNER TO "osm_admin";

-- ----------------------------
--  Table structure for planet_osm_line
-- ----------------------------
DROP TABLE IF EXISTS "public"."planet_osm_line";
CREATE TABLE "public"."planet_osm_line" (
	"osm_id" int8,
	"bridge" text COLLATE "default",
	"boundary" text COLLATE "default",
	"building" text COLLATE "default",
	"disused" text COLLATE "default",
	"embankment" text COLLATE "default",
	"harbour" text COLLATE "default",
	"intermittent" text COLLATE "default",
	"junction" text COLLATE "default",
	"landuse" text COLLATE "default",
	"leisure" text COLLATE "default",
	"lock" text COLLATE "default",
	"man_made" text COLLATE "default",
	"name" text COLLATE "default",
	"natural" text COLLATE "default",
	"oneway" text COLLATE "default",
	"tunnel" text COLLATE "default",
	"water" text COLLATE "default",
	"waterway" text COLLATE "default",
	"wetland" text COLLATE "default",
	"width" text COLLATE "default",
	"z_order" int4,
	"way_area" float4,
	"way" "public"."geometry"
)
WITH (OIDS=FALSE);
ALTER TABLE "public"."planet_osm_line" OWNER TO "osm_admin";

-- ----------------------------
--  Table structure for planet_osm_polygon
-- ----------------------------
DROP TABLE IF EXISTS "public"."planet_osm_polygon";
CREATE TABLE "public"."planet_osm_polygon" (
	"osm_id" int8,
	"bridge" text COLLATE "default",
	"boundary" text COLLATE "default",
	"building" text COLLATE "default",
	"disused" text COLLATE "default",
	"embankment" text COLLATE "default",
	"harbour" text COLLATE "default",
	"intermittent" text COLLATE "default",
	"junction" text COLLATE "default",
	"landuse" text COLLATE "default",
	"leisure" text COLLATE "default",
	"lock" text COLLATE "default",
	"man_made" text COLLATE "default",
	"name" text COLLATE "default",
	"natural" text COLLATE "default",
	"oneway" text COLLATE "default",
	"tunnel" text COLLATE "default",
	"water" text COLLATE "default",
	"waterway" text COLLATE "default",
	"wetland" text COLLATE "default",
	"width" text COLLATE "default",
	"z_order" int4,
	"way_area" float4,
	"way" "public"."geometry"
)
WITH (OIDS=FALSE);
ALTER TABLE "public"."planet_osm_polygon" OWNER TO "osm_admin";

-- ----------------------------
--  Table structure for applications
-- ----------------------------
DROP TABLE IF EXISTS "public"."applications";
CREATE TABLE "public"."applications" (
	"id" int4 NOT NULL DEFAULT nextval('app_seq'::regclass),
	"name" text COLLATE "default",
	"description" text COLLATE "default",
	"link" text COLLATE "default",
	"icon_url" text COLLATE "default",
	"logo_url" text COLLATE "default",
	"company" text COLLATE "default",
	"secret" text COLLATE "default",
	"created_at" timestamp(6) NULL,
	"updated_at" timestamp(6) NULL,
	"status" text COLLATE "default",
	"fbappid" text COLLATE "default"
)
WITH (OIDS=FALSE);
ALTER TABLE "public"."applications" OWNER TO "osm_admin";

-- ----------------------------
--  Table structure for users
-- ----------------------------
DROP TABLE IF EXISTS "public"."users";
CREATE TABLE "public"."users" (
	"id" int4 NOT NULL DEFAULT nextval('user_seq'::regclass),
	"name" varchar NOT NULL COLLATE "default",
	"email" varchar COLLATE "default",
	"organization" varchar COLLATE "default",
	"created_at" timestamp(6) NULL,
	"updated_at" timestamp(6) NULL,
	"is_admin" bool,
	"is_banned" bool,
	"gravatar" varchar COLLATE "default",
	"cat_src" varchar COLLATE "default",
	"latitude" float4,
	"longitude" float4,
	"lang" varchar COLLATE "default",
	"region" varchar COLLATE "default"
)
WITH (OIDS=FALSE);
ALTER TABLE "public"."users" OWNER TO "osm_admin";

-- ----------------------------
--  Table structure for eo1_ali
-- ----------------------------
DROP TABLE IF EXISTS "public"."eo1_ali";
CREATE TABLE "public"."eo1_ali" (
	"id" int8,
	"scene" text COLLATE "default",
	"date" date,
	"center_lat" float4,
	"center_lon" float4,
	"geom" "public"."geometry"
)
WITH (OIDS=FALSE);
ALTER TABLE "public"."eo1_ali" OWNER TO "osm_admin";

-- ----------------------------
--  Table structure for l8
-- ----------------------------
DROP TABLE IF EXISTS "public"."l8";
CREATE TABLE "public"."l8" (
	"id" int8,
	"scene" text COLLATE "default",
	"date" date,
	"center_lat" float4,
	"center_lon" float4,
	"geom" "public"."geometry"
)
WITH (OIDS=FALSE);
ALTER TABLE "public"."l8" OWNER TO "osm_admin";

-- ----------------------------
--  Table structure for radarsat2
-- ----------------------------
DROP TABLE IF EXISTS "public"."radarsat2";
CREATE TABLE "public"."radarsat2" (
	"id" int8 DEFAULT nextval('radarsat2_seq'::regclass),
	"scene" text NOT NULL COLLATE "default",
	"date" date,
	"center_lat" float4,
	"center_lon" float4,
	"geom" "public"."geometry"
)
WITH (OIDS=FALSE);
ALTER TABLE "public"."radarsat2" OWNER TO "osm_admin";

-- ----------------------------
--  View structure for geography_columns
-- ----------------------------
DROP VIEW IF EXISTS "public"."geography_columns";
CREATE VIEW "public"."geography_columns" AS  SELECT current_database() AS f_table_catalog,
    n.nspname AS f_table_schema,
    c.relname AS f_table_name,
    a.attname AS f_geography_column,
    postgis_typmod_dims(a.atttypmod) AS coord_dimension,
    postgis_typmod_srid(a.atttypmod) AS srid,
    postgis_typmod_type(a.atttypmod) AS type
   FROM pg_class c,
    pg_attribute a,
    pg_type t,
    pg_namespace n
  WHERE (((((((t.typname = 'geography'::name) AND (a.attisdropped = false)) AND (a.atttypid = t.oid)) AND (a.attrelid = c.oid)) AND (c.relnamespace = n.oid)) AND (NOT pg_is_other_temp_schema(c.relnamespace))) AND has_table_privilege(c.oid, 'SELECT'::text));

-- ----------------------------
--  View structure for geometry_columns
-- ----------------------------
DROP VIEW IF EXISTS "public"."geometry_columns";
CREATE VIEW "public"."geometry_columns" AS  SELECT (current_database())::character varying(256) AS f_table_catalog,
    (n.nspname)::character varying(256) AS f_table_schema,
    (c.relname)::character varying(256) AS f_table_name,
    (a.attname)::character varying(256) AS f_geometry_column,
    COALESCE(NULLIF(postgis_typmod_dims(a.atttypmod), 2), postgis_constraint_dims((n.nspname)::text, (c.relname)::text, (a.attname)::text), 2) AS coord_dimension,
    COALESCE(NULLIF(postgis_typmod_srid(a.atttypmod), 0), postgis_constraint_srid((n.nspname)::text, (c.relname)::text, (a.attname)::text), 0) AS srid,
    (replace(replace(COALESCE(NULLIF(upper(postgis_typmod_type(a.atttypmod)), 'GEOMETRY'::text), (postgis_constraint_type((n.nspname)::text, (c.relname)::text, (a.attname)::text))::text, 'GEOMETRY'::text), 'ZM'::text, ''::text), 'Z'::text, ''::text))::character varying(30) AS type
   FROM pg_class c,
    pg_attribute a,
    pg_type t,
    pg_namespace n
  WHERE (((((((((t.typname = 'geometry'::name) AND (a.attisdropped = false)) AND (a.atttypid = t.oid)) AND (a.attrelid = c.oid)) AND (c.relnamespace = n.oid)) AND ((c.relkind = 'r'::"char") OR (c.relkind = 'v'::"char"))) AND (NOT pg_is_other_temp_schema(c.relnamespace))) AND (NOT ((n.nspname = 'public'::name) AND (c.relname = 'raster_columns'::name)))) AND has_table_privilege(c.oid, 'SELECT'::text));
CREATE OR REPLACE RULE "geometry_columns_delete" AS ON DELETE TO "public"."geometry_columns" DO INSTEAD NOTHING;
CREATE OR REPLACE RULE "geometry_columns_insert" AS ON INSERT TO "public"."geometry_columns" DO INSTEAD NOTHING;
CREATE OR REPLACE RULE "geometry_columns_update" AS ON UPDATE TO "public"."geometry_columns" DO INSTEAD NOTHING;

-- ----------------------------
--  View structure for raster_columns
-- ----------------------------
DROP VIEW IF EXISTS "public"."raster_columns";
CREATE VIEW "public"."raster_columns" AS  SELECT current_database() AS r_table_catalog,
    n.nspname AS r_table_schema,
    c.relname AS r_table_name,
    a.attname AS r_raster_column,
    COALESCE(_raster_constraint_info_srid(n.nspname, c.relname, a.attname), ( SELECT st_srid('010100000000000000000000000000000000000000'::geometry) AS st_srid)) AS srid,
    _raster_constraint_info_scale(n.nspname, c.relname, a.attname, 'x'::bpchar) AS scale_x,
    _raster_constraint_info_scale(n.nspname, c.relname, a.attname, 'y'::bpchar) AS scale_y,
    _raster_constraint_info_blocksize(n.nspname, c.relname, a.attname, 'width'::text) AS blocksize_x,
    _raster_constraint_info_blocksize(n.nspname, c.relname, a.attname, 'height'::text) AS blocksize_y,
    COALESCE(_raster_constraint_info_alignment(n.nspname, c.relname, a.attname), false) AS same_alignment,
    COALESCE(_raster_constraint_info_regular_blocking(n.nspname, c.relname, a.attname), false) AS regular_blocking,
    _raster_constraint_info_num_bands(n.nspname, c.relname, a.attname) AS num_bands,
    _raster_constraint_info_pixel_types(n.nspname, c.relname, a.attname) AS pixel_types,
    _raster_constraint_info_nodata_values(n.nspname, c.relname, a.attname) AS nodata_values,
    _raster_constraint_info_out_db(n.nspname, c.relname, a.attname) AS out_db,
    _raster_constraint_info_extent(n.nspname, c.relname, a.attname) AS extent
   FROM pg_class c,
    pg_attribute a,
    pg_type t,
    pg_namespace n
  WHERE (((((((t.typname = 'raster'::name) AND (a.attisdropped = false)) AND (a.atttypid = t.oid)) AND (a.attrelid = c.oid)) AND (c.relnamespace = n.oid)) AND ((c.relkind = 'r'::"char") OR (c.relkind = 'v'::"char"))) AND (NOT pg_is_other_temp_schema(c.relnamespace)));

-- ----------------------------
--  View structure for raster_overviews
-- ----------------------------
DROP VIEW IF EXISTS "public"."raster_overviews";
CREATE VIEW "public"."raster_overviews" AS  SELECT current_database() AS o_table_catalog,
    n.nspname AS o_table_schema,
    c.relname AS o_table_name,
    a.attname AS o_raster_column,
    current_database() AS r_table_catalog,
    (split_part(split_part(s.consrc, '''::name'::text, 1), ''''::text, 2))::name AS r_table_schema,
    (split_part(split_part(s.consrc, '''::name'::text, 2), ''''::text, 2))::name AS r_table_name,
    (split_part(split_part(s.consrc, '''::name'::text, 3), ''''::text, 2))::name AS r_raster_column,
    (btrim(split_part(s.consrc, ','::text, 2)))::integer AS overview_factor
   FROM pg_class c,
    pg_attribute a,
    pg_type t,
    pg_namespace n,
    pg_constraint s
  WHERE ((((((((((t.typname = 'raster'::name) AND (a.attisdropped = false)) AND (a.atttypid = t.oid)) AND (a.attrelid = c.oid)) AND (c.relnamespace = n.oid)) AND ((c.relkind = 'r'::"char") OR (c.relkind = 'v'::"char"))) AND (s.connamespace = n.oid)) AND (s.conrelid = c.oid)) AND (s.consrc ~~ '%_overview_constraint(%'::text)) AND (NOT pg_is_other_temp_schema(c.relnamespace)));

-- ----------------------------
--  Function structure for public._postgis_deprecate(text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_postgis_deprecate"(text, text, text);
CREATE FUNCTION "public"."_postgis_deprecate"(IN oldname text, IN newname text, IN "version" text) RETURNS "void" 
	AS $BODY$
BEGIN
    RAISE WARNING '% signature was deprecated in %. Please use %', oldname, version, newname;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_postgis_deprecate"(IN oldname text, IN newname text, IN "version" text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.spheroid_in(cstring)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."spheroid_in"(cstring);
CREATE FUNCTION "public"."spheroid_in"(IN cstring) RETURNS "public"."spheroid" 
	AS '$libdir/postgis-2.1','ellipsoid_in'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."spheroid_in"(IN cstring) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.spheroid_out("public"."spheroid")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."spheroid_out"("public"."spheroid");
CREATE FUNCTION "public"."spheroid_out"(IN "public"."spheroid") RETURNS "cstring" 
	AS '$libdir/postgis-2.1','ellipsoid_out'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."spheroid_out"(IN "public"."spheroid") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry_in(cstring)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_in"(cstring);
CREATE FUNCTION "public"."geometry_in"(IN cstring) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_in'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_in"(IN cstring) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry_out("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_out"("public"."geometry");
CREATE FUNCTION "public"."geometry_out"(IN "public"."geometry") RETURNS "cstring" 
	AS '$libdir/postgis-2.1','LWGEOM_out'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_out"(IN "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry_typmod_in(_cstring)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_typmod_in"(_cstring);
CREATE FUNCTION "public"."geometry_typmod_in"(IN _cstring) RETURNS "int4" 
	AS '$libdir/postgis-2.1','geometry_typmod_in'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_typmod_in"(IN _cstring) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry_typmod_out(int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_typmod_out"(int4);
CREATE FUNCTION "public"."geometry_typmod_out"(IN int4) RETURNS "cstring" 
	AS '$libdir/postgis-2.1','postgis_typmod_out'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_typmod_out"(IN int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry_analyze(internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_analyze"(internal);
CREATE FUNCTION "public"."geometry_analyze"(IN internal) RETURNS "bool" 
	AS '$libdir/postgis-2.1','gserialized_analyze_nd'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geometry_analyze"(IN internal) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry_recv(internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_recv"(internal);
CREATE FUNCTION "public"."geometry_recv"(IN internal) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_recv'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_recv"(IN internal) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry_send("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_send"("public"."geometry");
CREATE FUNCTION "public"."geometry_send"(IN "public"."geometry") RETURNS "bytea" 
	AS '$libdir/postgis-2.1','LWGEOM_send'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_send"(IN "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry("public"."geometry", int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry"("public"."geometry", int4, bool);
CREATE FUNCTION "public"."geometry"(IN "public"."geometry", IN int4, IN bool) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','geometry_enforce_typmod'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry"(IN "public"."geometry", IN int4, IN bool) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry(point)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry"(point);
CREATE FUNCTION "public"."geometry"(IN point) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','point_to_geometry'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry"(IN point) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.point("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."point"("public"."geometry");
CREATE FUNCTION "public"."point"(IN "public"."geometry") RETURNS "point" 
	AS '$libdir/postgis-2.1','geometry_to_point'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."point"(IN "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry(path)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry"(path);
CREATE FUNCTION "public"."geometry"(IN path) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','path_to_geometry'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry"(IN path) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.path("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."path"("public"."geometry");
CREATE FUNCTION "public"."path"(IN "public"."geometry") RETURNS "path" 
	AS '$libdir/postgis-2.1','geometry_to_path'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."path"(IN "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry(polygon)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry"(polygon);
CREATE FUNCTION "public"."geometry"(IN polygon) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','polygon_to_geometry'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry"(IN polygon) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.polygon("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."polygon"("public"."geometry");
CREATE FUNCTION "public"."polygon"(IN "public"."geometry") RETURNS "polygon" 
	AS '$libdir/postgis-2.1','geometry_to_polygon'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."polygon"(IN "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_x("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_x"("public"."geometry");
CREATE FUNCTION "public"."st_x"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-2.1','LWGEOM_x_point'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_x"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_x"(IN "public"."geometry") IS 'args: a_point - Return the X coordinate of the point, or NULL if not available. Input must be a point.';

-- ----------------------------
--  Function structure for public.st_y("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_y"("public"."geometry");
CREATE FUNCTION "public"."st_y"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-2.1','LWGEOM_y_point'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_y"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_y"(IN "public"."geometry") IS 'args: a_point - Return the Y coordinate of the point, or NULL if not available. Input must be a point.';

-- ----------------------------
--  Function structure for public.st_z("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_z"("public"."geometry");
CREATE FUNCTION "public"."st_z"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-2.1','LWGEOM_z_point'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_z"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_z"(IN "public"."geometry") IS 'args: a_point - Return the Z coordinate of the point, or NULL if not available. Input must be a point.';

-- ----------------------------
--  Function structure for public.st_m("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_m"("public"."geometry");
CREATE FUNCTION "public"."st_m"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-2.1','LWGEOM_m_point'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_m"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_m"(IN "public"."geometry") IS 'args: a_point - Return the M coordinate of the point, or NULL if not available. Input must be a point.';

-- ----------------------------
--  Function structure for public.box3d_in(cstring)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."box3d_in"(cstring);
CREATE FUNCTION "public"."box3d_in"(IN cstring) RETURNS "public"."box3d" 
	AS '$libdir/postgis-2.1','BOX3D_in'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."box3d_in"(IN cstring) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.box3d_out("public"."box3d")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."box3d_out"("public"."box3d");
CREATE FUNCTION "public"."box3d_out"(IN "public"."box3d") RETURNS "cstring" 
	AS '$libdir/postgis-2.1','BOX3D_out'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."box3d_out"(IN "public"."box3d") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.box2d_in(cstring)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."box2d_in"(cstring);
CREATE FUNCTION "public"."box2d_in"(IN cstring) RETURNS "public"."box2d" 
	AS '$libdir/postgis-2.1','BOX2D_in'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."box2d_in"(IN cstring) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.box2d_out("public"."box2d")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."box2d_out"("public"."box2d");
CREATE FUNCTION "public"."box2d_out"(IN "public"."box2d") RETURNS "cstring" 
	AS '$libdir/postgis-2.1','BOX2D_out'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."box2d_out"(IN "public"."box2d") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.box2df_in(cstring)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."box2df_in"(cstring);
CREATE FUNCTION "public"."box2df_in"(IN cstring) RETURNS "public"."box2df" 
	AS '$libdir/postgis-2.1','box2df_in'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."box2df_in"(IN cstring) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.box2df_out("public"."box2df")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."box2df_out"("public"."box2df");
CREATE FUNCTION "public"."box2df_out"(IN "public"."box2df") RETURNS "cstring" 
	AS '$libdir/postgis-2.1','box2df_out'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."box2df_out"(IN "public"."box2df") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.gidx_in(cstring)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."gidx_in"(cstring);
CREATE FUNCTION "public"."gidx_in"(IN cstring) RETURNS "public"."gidx" 
	AS '$libdir/postgis-2.1','gidx_in'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."gidx_in"(IN cstring) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.gidx_out("public"."gidx")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."gidx_out"("public"."gidx");
CREATE FUNCTION "public"."gidx_out"(IN "public"."gidx") RETURNS "cstring" 
	AS '$libdir/postgis-2.1','gidx_out'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."gidx_out"(IN "public"."gidx") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry_lt("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_lt"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."geometry_lt"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.1','lwgeom_lt'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_lt"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry_le("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_le"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."geometry_le"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.1','lwgeom_le'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_le"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry_gt("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_gt"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."geometry_gt"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.1','lwgeom_gt'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_gt"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry_ge("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_ge"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."geometry_ge"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.1','lwgeom_ge'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_ge"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry_eq("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_eq"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."geometry_eq"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.1','lwgeom_eq'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_eq"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry_cmp("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_cmp"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."geometry_cmp"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "int4" 
	AS '$libdir/postgis-2.1','lwgeom_cmp'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_cmp"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry_gist_distance_2d(internal, "public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_gist_distance_2d"(internal, "public"."geometry", int4);
CREATE FUNCTION "public"."geometry_gist_distance_2d"(IN internal, IN "public"."geometry", IN int4) RETURNS "float8" 
	AS '$libdir/postgis-2.1','gserialized_gist_distance_2d'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geometry_gist_distance_2d"(IN internal, IN "public"."geometry", IN int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry_gist_consistent_2d(internal, "public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_gist_consistent_2d"(internal, "public"."geometry", int4);
CREATE FUNCTION "public"."geometry_gist_consistent_2d"(IN internal, IN "public"."geometry", IN int4) RETURNS "bool" 
	AS '$libdir/postgis-2.1','gserialized_gist_consistent_2d'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geometry_gist_consistent_2d"(IN internal, IN "public"."geometry", IN int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry_gist_compress_2d(internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_gist_compress_2d"(internal);
CREATE FUNCTION "public"."geometry_gist_compress_2d"(IN internal) RETURNS "internal" 
	AS '$libdir/postgis-2.1','gserialized_gist_compress_2d'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geometry_gist_compress_2d"(IN internal) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry_gist_penalty_2d(internal, internal, internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_gist_penalty_2d"(internal, internal, internal);
CREATE FUNCTION "public"."geometry_gist_penalty_2d"(IN internal, IN internal, IN internal) RETURNS "internal" 
	AS '$libdir/postgis-2.1','gserialized_gist_penalty_2d'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geometry_gist_penalty_2d"(IN internal, IN internal, IN internal) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry_gist_picksplit_2d(internal, internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_gist_picksplit_2d"(internal, internal);
CREATE FUNCTION "public"."geometry_gist_picksplit_2d"(IN internal, IN internal) RETURNS "internal" 
	AS '$libdir/postgis-2.1','gserialized_gist_picksplit_2d'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geometry_gist_picksplit_2d"(IN internal, IN internal) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry_gist_union_2d(bytea, internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_gist_union_2d"(bytea, internal);
CREATE FUNCTION "public"."geometry_gist_union_2d"(IN bytea, IN internal) RETURNS "internal" 
	AS '$libdir/postgis-2.1','gserialized_gist_union_2d'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geometry_gist_union_2d"(IN bytea, IN internal) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry_gist_same_2d("public"."geometry", "public"."geometry", internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_gist_same_2d"("public"."geometry", "public"."geometry", internal);
CREATE FUNCTION "public"."geometry_gist_same_2d"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN internal) RETURNS "internal" 
	AS '$libdir/postgis-2.1','gserialized_gist_same_2d'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geometry_gist_same_2d"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN internal) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry_gist_decompress_2d(internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_gist_decompress_2d"(internal);
CREATE FUNCTION "public"."geometry_gist_decompress_2d"(IN internal) RETURNS "internal" 
	AS '$libdir/postgis-2.1','gserialized_gist_decompress_2d'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geometry_gist_decompress_2d"(IN internal) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._postgis_selectivity(regclass, text, "public"."geometry", text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_postgis_selectivity"(regclass, text, "public"."geometry", text);
CREATE FUNCTION "public"."_postgis_selectivity"(IN tbl regclass, IN att_name text, IN geom "public"."geometry", IN "mode" text DEFAULT '2'::text) RETURNS "float8" 
	AS '$libdir/postgis-2.1','_postgis_gserialized_sel'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_postgis_selectivity"(IN tbl regclass, IN att_name text, IN geom "public"."geometry", IN "mode" text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._postgis_join_selectivity(regclass, text, regclass, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_postgis_join_selectivity"(regclass, text, regclass, text, text);
CREATE FUNCTION "public"."_postgis_join_selectivity"(IN regclass, IN text, IN regclass, IN text, IN text DEFAULT '2'::text) RETURNS "float8" 
	AS '$libdir/postgis-2.1','_postgis_gserialized_joinsel'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_postgis_join_selectivity"(IN regclass, IN text, IN regclass, IN text, IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._postgis_stats(regclass, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_postgis_stats"(regclass, text, text);
CREATE FUNCTION "public"."_postgis_stats"(IN tbl regclass, IN att_name text, IN text DEFAULT '2'::text) RETURNS "text" 
	AS '$libdir/postgis-2.1','_postgis_gserialized_stats'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_postgis_stats"(IN tbl regclass, IN att_name text, IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.gserialized_gist_sel_2d(internal, oid, internal, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."gserialized_gist_sel_2d"(internal, oid, internal, int4);
CREATE FUNCTION "public"."gserialized_gist_sel_2d"(IN internal, IN oid, IN internal, IN int4) RETURNS "float8" 
	AS '$libdir/postgis-2.1','gserialized_gist_sel_2d'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."gserialized_gist_sel_2d"(IN internal, IN oid, IN internal, IN int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.gserialized_gist_sel_nd(internal, oid, internal, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."gserialized_gist_sel_nd"(internal, oid, internal, int4);
CREATE FUNCTION "public"."gserialized_gist_sel_nd"(IN internal, IN oid, IN internal, IN int4) RETURNS "float8" 
	AS '$libdir/postgis-2.1','gserialized_gist_sel_nd'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."gserialized_gist_sel_nd"(IN internal, IN oid, IN internal, IN int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.gserialized_gist_joinsel_2d(internal, oid, internal, int2)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."gserialized_gist_joinsel_2d"(internal, oid, internal, int2);
CREATE FUNCTION "public"."gserialized_gist_joinsel_2d"(IN internal, IN oid, IN internal, IN int2) RETURNS "float8" 
	AS '$libdir/postgis-2.1','gserialized_gist_joinsel_2d'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."gserialized_gist_joinsel_2d"(IN internal, IN oid, IN internal, IN int2) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.gserialized_gist_joinsel_nd(internal, oid, internal, int2)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."gserialized_gist_joinsel_nd"(internal, oid, internal, int2);
CREATE FUNCTION "public"."gserialized_gist_joinsel_nd"(IN internal, IN oid, IN internal, IN int2) RETURNS "float8" 
	AS '$libdir/postgis-2.1','gserialized_gist_joinsel_nd'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."gserialized_gist_joinsel_nd"(IN internal, IN oid, IN internal, IN int2) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry_overlaps("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_overlaps"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."geometry_overlaps"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.1','gserialized_overlaps_2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_overlaps"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry_same("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_same"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."geometry_same"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.1','gserialized_same_2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_same"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry_distance_centroid("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_distance_centroid"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."geometry_distance_centroid"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-2.1','gserialized_distance_centroid_2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_distance_centroid"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry_distance_box("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_distance_box"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."geometry_distance_box"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-2.1','gserialized_distance_box_2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_distance_box"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry_contains("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_contains"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."geometry_contains"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.1','gserialized_contains_2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_contains"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry_within("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_within"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."geometry_within"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.1','gserialized_within_2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_within"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry_left("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_left"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."geometry_left"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.1','gserialized_left_2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_left"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry_overleft("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_overleft"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."geometry_overleft"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.1','gserialized_overleft_2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_overleft"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry_below("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_below"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."geometry_below"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.1','gserialized_below_2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_below"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry_overbelow("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_overbelow"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."geometry_overbelow"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.1','gserialized_overbelow_2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_overbelow"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry_overright("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_overright"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."geometry_overright"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.1','gserialized_overright_2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_overright"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry_right("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_right"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."geometry_right"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.1','gserialized_right_2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_right"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry_overabove("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_overabove"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."geometry_overabove"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.1','gserialized_overabove_2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_overabove"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry_above("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_above"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."geometry_above"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.1','gserialized_above_2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_above"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry_gist_consistent_nd(internal, "public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_gist_consistent_nd"(internal, "public"."geometry", int4);
CREATE FUNCTION "public"."geometry_gist_consistent_nd"(IN internal, IN "public"."geometry", IN int4) RETURNS "bool" 
	AS '$libdir/postgis-2.1','gserialized_gist_consistent'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geometry_gist_consistent_nd"(IN internal, IN "public"."geometry", IN int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry_gist_compress_nd(internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_gist_compress_nd"(internal);
CREATE FUNCTION "public"."geometry_gist_compress_nd"(IN internal) RETURNS "internal" 
	AS '$libdir/postgis-2.1','gserialized_gist_compress'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geometry_gist_compress_nd"(IN internal) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry_gist_penalty_nd(internal, internal, internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_gist_penalty_nd"(internal, internal, internal);
CREATE FUNCTION "public"."geometry_gist_penalty_nd"(IN internal, IN internal, IN internal) RETURNS "internal" 
	AS '$libdir/postgis-2.1','gserialized_gist_penalty'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geometry_gist_penalty_nd"(IN internal, IN internal, IN internal) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry_gist_picksplit_nd(internal, internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_gist_picksplit_nd"(internal, internal);
CREATE FUNCTION "public"."geometry_gist_picksplit_nd"(IN internal, IN internal) RETURNS "internal" 
	AS '$libdir/postgis-2.1','gserialized_gist_picksplit'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geometry_gist_picksplit_nd"(IN internal, IN internal) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry_gist_union_nd(bytea, internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_gist_union_nd"(bytea, internal);
CREATE FUNCTION "public"."geometry_gist_union_nd"(IN bytea, IN internal) RETURNS "internal" 
	AS '$libdir/postgis-2.1','gserialized_gist_union'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geometry_gist_union_nd"(IN bytea, IN internal) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry_gist_same_nd("public"."geometry", "public"."geometry", internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_gist_same_nd"("public"."geometry", "public"."geometry", internal);
CREATE FUNCTION "public"."geometry_gist_same_nd"(IN "public"."geometry", IN "public"."geometry", IN internal) RETURNS "internal" 
	AS '$libdir/postgis-2.1','gserialized_gist_same'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geometry_gist_same_nd"(IN "public"."geometry", IN "public"."geometry", IN internal) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry_gist_decompress_nd(internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_gist_decompress_nd"(internal);
CREATE FUNCTION "public"."geometry_gist_decompress_nd"(IN internal) RETURNS "internal" 
	AS '$libdir/postgis-2.1','gserialized_gist_decompress'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geometry_gist_decompress_nd"(IN internal) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry_overlaps_nd("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_overlaps_nd"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."geometry_overlaps_nd"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.1','gserialized_overlaps'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_overlaps_nd"(IN "public"."geometry", IN "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_affine("public"."geometry", float8, float8, float8, float8, float8, float8, float8, float8, float8, float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_affine"("public"."geometry", float8, float8, float8, float8, float8, float8, float8, float8, float8, float8, float8, float8);
CREATE FUNCTION "public"."st_affine"(IN "public"."geometry", IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_affine'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_affine"(IN "public"."geometry", IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_affine"(IN "public"."geometry", IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8) IS 'args: geomA, a, b, c, d, e, f, g, h, i, xoff, yoff, zoff - Applies a 3d affine transformation to the geometry to do things like translate, rotate, scale in one step.';

-- ----------------------------
--  Function structure for public.st_affine("public"."geometry", float8, float8, float8, float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_affine"("public"."geometry", float8, float8, float8, float8, float8, float8);
CREATE FUNCTION "public"."st_affine"(IN "public"."geometry", IN float8, IN float8, IN float8, IN float8, IN float8, IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_Affine($1,  $2, $3, 0,  $4, $5, 0,  0, 0, 1,  $6, $7, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_affine"(IN "public"."geometry", IN float8, IN float8, IN float8, IN float8, IN float8, IN float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_affine"(IN "public"."geometry", IN float8, IN float8, IN float8, IN float8, IN float8, IN float8) IS 'args: geomA, a, b, d, e, xoff, yoff - Applies a 3d affine transformation to the geometry to do things like translate, rotate, scale in one step.';

-- ----------------------------
--  Function structure for public.st_rotate("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_rotate"("public"."geometry", float8);
CREATE FUNCTION "public"."st_rotate"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_Affine($1,  cos($2), -sin($2), 0,  sin($2), cos($2), 0,  0, 0, 1,  0, 0, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_rotate"(IN "public"."geometry", IN float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_rotate"(IN "public"."geometry", IN float8) IS 'args: geomA, rotRadians - Rotate a geometry rotRadians counter-clockwise about an origin.';

-- ----------------------------
--  Function structure for public.st_rotate("public"."geometry", float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_rotate"("public"."geometry", float8, float8, float8);
CREATE FUNCTION "public"."st_rotate"(IN "public"."geometry", IN float8, IN float8, IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_Affine($1,  cos($2), -sin($2), 0,  sin($2),  cos($2), 0, 0, 0, 1,	$3 - cos($2) * $3 + sin($2) * $4, $4 - sin($2) * $3 - cos($2) * $4, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_rotate"(IN "public"."geometry", IN float8, IN float8, IN float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_rotate"(IN "public"."geometry", IN float8, IN float8, IN float8) IS 'args: geomA, rotRadians, x0, y0 - Rotate a geometry rotRadians counter-clockwise about an origin.';

-- ----------------------------
--  Function structure for public.st_rotate("public"."geometry", float8, "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_rotate"("public"."geometry", float8, "public"."geometry");
CREATE FUNCTION "public"."st_rotate"(IN "public"."geometry", IN float8, IN "public"."geometry") RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_Affine($1,  cos($2), -sin($2), 0,  sin($2),  cos($2), 0, 0, 0, 1, ST_X($3) - cos($2) * ST_X($3) + sin($2) * ST_Y($3), ST_Y($3) - sin($2) * ST_X($3) - cos($2) * ST_Y($3), 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_rotate"(IN "public"."geometry", IN float8, IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_rotate"(IN "public"."geometry", IN float8, IN "public"."geometry") IS 'args: geomA, rotRadians, pointOrigin - Rotate a geometry rotRadians counter-clockwise about an origin.';

-- ----------------------------
--  Function structure for public.st_rotatez("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_rotatez"("public"."geometry", float8);
CREATE FUNCTION "public"."st_rotatez"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_Rotate($1, $2)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_rotatez"(IN "public"."geometry", IN float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_rotatez"(IN "public"."geometry", IN float8) IS 'args: geomA, rotRadians - Rotate a geometry rotRadians about the Z axis.';

-- ----------------------------
--  Function structure for public.st_rotatex("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_rotatex"("public"."geometry", float8);
CREATE FUNCTION "public"."st_rotatex"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_Affine($1, 1, 0, 0, 0, cos($2), -sin($2), 0, sin($2), cos($2), 0, 0, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_rotatex"(IN "public"."geometry", IN float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_rotatex"(IN "public"."geometry", IN float8) IS 'args: geomA, rotRadians - Rotate a geometry rotRadians about the X axis.';

-- ----------------------------
--  Function structure for public.st_rotatey("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_rotatey"("public"."geometry", float8);
CREATE FUNCTION "public"."st_rotatey"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_Affine($1,  cos($2), 0, sin($2),  0, 1, 0,  -sin($2), 0, cos($2), 0,  0, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_rotatey"(IN "public"."geometry", IN float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_rotatey"(IN "public"."geometry", IN float8) IS 'args: geomA, rotRadians - Rotate a geometry rotRadians about the Y axis.';

-- ----------------------------
--  Function structure for public.st_translate("public"."geometry", float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_translate"("public"."geometry", float8, float8, float8);
CREATE FUNCTION "public"."st_translate"(IN "public"."geometry", IN float8, IN float8, IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_Affine($1, 1, 0, 0, 0, 1, 0, 0, 0, 1, $2, $3, $4)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_translate"(IN "public"."geometry", IN float8, IN float8, IN float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_translate"(IN "public"."geometry", IN float8, IN float8, IN float8) IS 'args: g1, deltax, deltay, deltaz - Translates the geometry to a new location using the numeric parameters as offsets. Ie: ST_Translate(geom, X, Y) or ST_Translate(geom, X, Y,Z).';

-- ----------------------------
--  Function structure for public.st_translate("public"."geometry", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_translate"("public"."geometry", float8, float8);
CREATE FUNCTION "public"."st_translate"(IN "public"."geometry", IN float8, IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_Translate($1, $2, $3, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_translate"(IN "public"."geometry", IN float8, IN float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_translate"(IN "public"."geometry", IN float8, IN float8) IS 'args: g1, deltax, deltay - Translates the geometry to a new location using the numeric parameters as offsets. Ie: ST_Translate(geom, X, Y) or ST_Translate(geom, X, Y,Z).';

-- ----------------------------
--  Function structure for public.st_scale("public"."geometry", float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_scale"("public"."geometry", float8, float8, float8);
CREATE FUNCTION "public"."st_scale"(IN "public"."geometry", IN float8, IN float8, IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_Affine($1,  $2, 0, 0,  0, $3, 0,  0, 0, $4,  0, 0, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_scale"(IN "public"."geometry", IN float8, IN float8, IN float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_scale"(IN "public"."geometry", IN float8, IN float8, IN float8) IS 'args: geomA, XFactor, YFactor, ZFactor - Scales the geometry to a new size by multiplying the ordinates with the parameters. Ie: ST_Scale(geom, Xfactor, Yfactor, Zfactor).';

-- ----------------------------
--  Function structure for public.st_scale("public"."geometry", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_scale"("public"."geometry", float8, float8);
CREATE FUNCTION "public"."st_scale"(IN "public"."geometry", IN float8, IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_Scale($1, $2, $3, 1)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_scale"(IN "public"."geometry", IN float8, IN float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_scale"(IN "public"."geometry", IN float8, IN float8) IS 'args: geomA, XFactor, YFactor - Scales the geometry to a new size by multiplying the ordinates with the parameters. Ie: ST_Scale(geom, Xfactor, Yfactor, Zfactor).';

-- ----------------------------
--  Function structure for public.st_transscale("public"."geometry", float8, float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_transscale"("public"."geometry", float8, float8, float8, float8);
CREATE FUNCTION "public"."st_transscale"(IN "public"."geometry", IN float8, IN float8, IN float8, IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_Affine($1,  $4, 0, 0,  0, $5, 0,
		0, 0, 1,  $2 * $4, $3 * $5, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_transscale"(IN "public"."geometry", IN float8, IN float8, IN float8, IN float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_transscale"(IN "public"."geometry", IN float8, IN float8, IN float8, IN float8) IS 'args: geomA, deltaX, deltaY, XFactor, YFactor - Translates the geometry using the deltaX and deltaY args, then scales it using the XFactor, YFactor args, working in 2D only.';

-- ----------------------------
--  Function structure for public.st_shift_longitude("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_shift_longitude"("public"."geometry");
CREATE FUNCTION "public"."st_shift_longitude"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_longitude_shift'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_shift_longitude"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_shift_longitude"(IN "public"."geometry") IS 'args: geomA - Reads every point/vertex in every component of every feature in a geometry, and if the longitude coordinate is <0, adds 360 to it. The result would be a 0-360 version of the data to be plotted in a 180 centric map';

-- ----------------------------
--  Function structure for public.st_xmin("public"."box3d")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_xmin"("public"."box3d");
CREATE FUNCTION "public"."st_xmin"(IN "public"."box3d") RETURNS "float8" 
	AS '$libdir/postgis-2.1','BOX3D_xmin'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_xmin"(IN "public"."box3d") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_xmin"(IN "public"."box3d") IS 'args: aGeomorBox2DorBox3D - Returns X minima of a bounding box 2d or 3d or a geometry.';

-- ----------------------------
--  Function structure for public.st_ymin("public"."box3d")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_ymin"("public"."box3d");
CREATE FUNCTION "public"."st_ymin"(IN "public"."box3d") RETURNS "float8" 
	AS '$libdir/postgis-2.1','BOX3D_ymin'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_ymin"(IN "public"."box3d") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_ymin"(IN "public"."box3d") IS 'args: aGeomorBox2DorBox3D - Returns Y minima of a bounding box 2d or 3d or a geometry.';

-- ----------------------------
--  Function structure for public.st_zmin("public"."box3d")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_zmin"("public"."box3d");
CREATE FUNCTION "public"."st_zmin"(IN "public"."box3d") RETURNS "float8" 
	AS '$libdir/postgis-2.1','BOX3D_zmin'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_zmin"(IN "public"."box3d") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_zmin"(IN "public"."box3d") IS 'args: aGeomorBox2DorBox3D - Returns Z minima of a bounding box 2d or 3d or a geometry.';

-- ----------------------------
--  Function structure for public.st_xmax("public"."box3d")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_xmax"("public"."box3d");
CREATE FUNCTION "public"."st_xmax"(IN "public"."box3d") RETURNS "float8" 
	AS '$libdir/postgis-2.1','BOX3D_xmax'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_xmax"(IN "public"."box3d") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_xmax"(IN "public"."box3d") IS 'args: aGeomorBox2DorBox3D - Returns X maxima of a bounding box 2d or 3d or a geometry.';

-- ----------------------------
--  Function structure for public.st_ymax("public"."box3d")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_ymax"("public"."box3d");
CREATE FUNCTION "public"."st_ymax"(IN "public"."box3d") RETURNS "float8" 
	AS '$libdir/postgis-2.1','BOX3D_ymax'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_ymax"(IN "public"."box3d") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_ymax"(IN "public"."box3d") IS 'args: aGeomorBox2DorBox3D - Returns Y maxima of a bounding box 2d or 3d or a geometry.';

-- ----------------------------
--  Function structure for public.st_zmax("public"."box3d")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_zmax"("public"."box3d");
CREATE FUNCTION "public"."st_zmax"(IN "public"."box3d") RETURNS "float8" 
	AS '$libdir/postgis-2.1','BOX3D_zmax'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_zmax"(IN "public"."box3d") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_zmax"(IN "public"."box3d") IS 'args: aGeomorBox2DorBox3D - Returns Z minima of a bounding box 2d or 3d or a geometry.';

-- ----------------------------
--  Function structure for public.st_expand("public"."box2d", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_expand"("public"."box2d", float8);
CREATE FUNCTION "public"."st_expand"(IN "public"."box2d", IN float8) RETURNS "public"."box2d" 
	AS '$libdir/postgis-2.1','BOX2D_expand'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_expand"(IN "public"."box2d", IN float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_expand"(IN "public"."box2d", IN float8) IS 'args: g1, units_to_expand - Returns bounding box expanded in all directions from the bounding box of the input geometry. Uses double-precision';

-- ----------------------------
--  Function structure for public.postgis_getbbox("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_getbbox"("public"."geometry");
CREATE FUNCTION "public"."postgis_getbbox"(IN "public"."geometry") RETURNS "public"."box2d" 
	AS '$libdir/postgis-2.1','LWGEOM_to_BOX2D'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_getbbox"(IN "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_makebox2d("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_makebox2d"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_makebox2d"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "public"."box2d" 
	AS '$libdir/postgis-2.1','BOX2D_construct'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_makebox2d"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_makebox2d"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: pointLowLeft, pointUpRight - Creates a BOX2D defined by the given point geometries.';

-- ----------------------------
--  Function structure for public.st_combine_bbox("public"."box2d", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_combine_bbox"("public"."box2d", "public"."geometry");
CREATE FUNCTION "public"."st_combine_bbox"(IN "public"."box2d", IN "public"."geometry") RETURNS "public"."box2d" 
	AS '$libdir/postgis-2.1','BOX2D_combine'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_combine_bbox"(IN "public"."box2d", IN "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_estimatedextent(text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_estimatedextent"(text, text, text);
CREATE FUNCTION "public"."st_estimatedextent"(IN text, IN text, IN text) RETURNS "public"."box2d" 
	AS '$libdir/postgis-2.1','gserialized_estimated_extent'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY DEFINER
	IMMUTABLE;
ALTER FUNCTION "public"."st_estimatedextent"(IN text, IN text, IN text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_estimatedextent"(IN text, IN text, IN text) IS 'args: schema_name, table_name, geocolumn_name - Return the estimated extent of the given spatial table. The estimated is taken from the geometry columns statistics. The current schema will be used if not specified.';

-- ----------------------------
--  Function structure for public.st_estimated_extent(text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_estimated_extent"(text, text, text);
CREATE FUNCTION "public"."st_estimated_extent"(IN text, IN text, IN text) RETURNS "public"."box2d" 
	AS $BODY$ SELECT _postgis_deprecate('ST_Estimated_Extent', 'ST_EstimatedExtent', '2.1.0');
    -- We use security invoker instead of security definer 
    -- to prevent malicious injection of a different same named function
    SELECT ST_EstimatedExtent($1, $2, $3);
  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_estimated_extent"(IN text, IN text, IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_estimatedextent(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_estimatedextent"(text, text);
CREATE FUNCTION "public"."st_estimatedextent"(IN text, IN text) RETURNS "public"."box2d" 
	AS '$libdir/postgis-2.1','gserialized_estimated_extent'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY DEFINER
	IMMUTABLE;
ALTER FUNCTION "public"."st_estimatedextent"(IN text, IN text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_estimatedextent"(IN text, IN text) IS 'args: table_name, geocolumn_name - Return the estimated extent of the given spatial table. The estimated is taken from the geometry columns statistics. The current schema will be used if not specified.';

-- ----------------------------
--  Function structure for public.st_estimated_extent(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_estimated_extent"(text, text);
CREATE FUNCTION "public"."st_estimated_extent"(IN text, IN text) RETURNS "public"."box2d" 
	AS $BODY$ SELECT _postgis_deprecate('ST_Estimated_Extent', 'ST_EstimatedExtent', '2.1.0');
    -- We use security invoker instead of security definer 
    -- to prevent malicious injection of a same named different function
    -- that would be run under elevated permissions
    SELECT ST_EstimatedExtent($1, $2);
  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_estimated_extent"(IN text, IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_find_extent(text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_find_extent"(text, text, text);
CREATE FUNCTION "public"."st_find_extent"(IN text, IN text, IN text) RETURNS "public"."box2d" 
	AS $BODY$
DECLARE
	schemaname alias for $1;
	tablename alias for $2;
	columnname alias for $3;
	myrec RECORD;

BEGIN
	FOR myrec IN EXECUTE 'SELECT ST_Extent("' || columnname || '") As extent FROM "' || schemaname || '"."' || tablename || '"' LOOP
		return myrec.extent;
	END LOOP;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_find_extent"(IN text, IN text, IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_find_extent(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_find_extent"(text, text);
CREATE FUNCTION "public"."st_find_extent"(IN text, IN text) RETURNS "public"."box2d" 
	AS $BODY$
DECLARE
	tablename alias for $1;
	columnname alias for $2;
	myrec RECORD;

BEGIN
	FOR myrec IN EXECUTE 'SELECT ST_Extent("' || columnname || '") As extent FROM "' || tablename || '"' LOOP
		return myrec.extent;
	END LOOP;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_find_extent"(IN text, IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.postgis_addbbox("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_addbbox"("public"."geometry");
CREATE FUNCTION "public"."postgis_addbbox"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_addBBOX'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_addbbox"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."postgis_addbbox"(IN "public"."geometry") IS 'args: geomA - Add bounding box to the geometry.';

-- ----------------------------
--  Function structure for public.postgis_dropbbox("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_dropbbox"("public"."geometry");
CREATE FUNCTION "public"."postgis_dropbbox"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_dropBBOX'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_dropbbox"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."postgis_dropbbox"(IN "public"."geometry") IS 'args: geomA - Drop the bounding box cache from the geometry.';

-- ----------------------------
--  Function structure for public.postgis_hasbbox("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_hasbbox"("public"."geometry");
CREATE FUNCTION "public"."postgis_hasbbox"(IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.1','LWGEOM_hasBBOX'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_hasbbox"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."postgis_hasbbox"(IN "public"."geometry") IS 'args: geomA - Returns TRUE if the bbox of this geometry is cached, FALSE otherwise.';

-- ----------------------------
--  Function structure for public.st_mem_size("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mem_size"("public"."geometry");
CREATE FUNCTION "public"."st_mem_size"(IN "public"."geometry") RETURNS "int4" 
	AS '$libdir/postgis-2.1','LWGEOM_mem_size'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_mem_size"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_mem_size"(IN "public"."geometry") IS 'args: geomA - Returns the amount of space (in bytes) the geometry takes.';

-- ----------------------------
--  Function structure for public.st_summary("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_summary"("public"."geometry");
CREATE FUNCTION "public"."st_summary"(IN "public"."geometry") RETURNS "text" 
	AS '$libdir/postgis-2.1','LWGEOM_summary'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_summary"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_summary"(IN "public"."geometry") IS 'args: g - Returns a text summary of the contents of the geometry.';

-- ----------------------------
--  Function structure for public.st_npoints("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_npoints"("public"."geometry");
CREATE FUNCTION "public"."st_npoints"(IN "public"."geometry") RETURNS "int4" 
	AS '$libdir/postgis-2.1','LWGEOM_npoints'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_npoints"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_npoints"(IN "public"."geometry") IS 'args: g1 - Return the number of points (vertexes) in a geometry.';

-- ----------------------------
--  Function structure for public.st_nrings("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_nrings"("public"."geometry");
CREATE FUNCTION "public"."st_nrings"(IN "public"."geometry") RETURNS "int4" 
	AS '$libdir/postgis-2.1','LWGEOM_nrings'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_nrings"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_nrings"(IN "public"."geometry") IS 'args: geomA - If the geometry is a polygon or multi-polygon returns the number of rings.';

-- ----------------------------
--  Function structure for public.st_3dlength("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_3dlength"("public"."geometry");
CREATE FUNCTION "public"."st_3dlength"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-2.1','LWGEOM_length_linestring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_3dlength"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_3dlength"(IN "public"."geometry") IS 'args: a_3dlinestring - Returns the 3-dimensional or 2-dimensional length of the geometry if it is a linestring or multi-linestring.';

-- ----------------------------
--  Function structure for public.st_length2d("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_length2d"("public"."geometry");
CREATE FUNCTION "public"."st_length2d"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-2.1','LWGEOM_length2d_linestring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_length2d"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_length2d"(IN "public"."geometry") IS 'args: a_2dlinestring - Returns the 2-dimensional length of the geometry if it is a linestring or multi-linestring. This is an alias for ST_Length';

-- ----------------------------
--  Function structure for public.st_length("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_length"("public"."geometry");
CREATE FUNCTION "public"."st_length"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-2.1','LWGEOM_length2d_linestring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_length"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_length"(IN "public"."geometry") IS 'args: a_2dlinestring - Returns the 2d length of the geometry if it is a linestring or multilinestring. geometry are in units of spatial reference and geography are in meters (default spheroid)';

-- ----------------------------
--  Function structure for public.st_3dlength_spheroid("public"."geometry", "public"."spheroid")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_3dlength_spheroid"("public"."geometry", "public"."spheroid");
CREATE FUNCTION "public"."st_3dlength_spheroid"(IN "public"."geometry", IN "public"."spheroid") RETURNS "float8" 
	AS '$libdir/postgis-2.1','LWGEOM_length_ellipsoid_linestring'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_3dlength_spheroid"(IN "public"."geometry", IN "public"."spheroid") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_3dlength_spheroid"(IN "public"."geometry", IN "public"."spheroid") IS 'args: a_linestring, a_spheroid - Calculates the length of a geometry on an ellipsoid, taking the elevation into account. This is just an alias for ST_Length_Spheroid.';

-- ----------------------------
--  Function structure for public.st_length_spheroid("public"."geometry", "public"."spheroid")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_length_spheroid"("public"."geometry", "public"."spheroid");
CREATE FUNCTION "public"."st_length_spheroid"(IN "public"."geometry", IN "public"."spheroid") RETURNS "float8" 
	AS '$libdir/postgis-2.1','LWGEOM_length_ellipsoid_linestring'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_length_spheroid"(IN "public"."geometry", IN "public"."spheroid") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_length_spheroid"(IN "public"."geometry", IN "public"."spheroid") IS 'args: a_linestring, a_spheroid - Calculates the 2D or 3D length of a linestring/multilinestring on an ellipsoid. This is useful if the coordinates of the geometry are in longitude/latitude and a length is desired without reprojection.';

-- ----------------------------
--  Function structure for public.st_length2d_spheroid("public"."geometry", "public"."spheroid")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_length2d_spheroid"("public"."geometry", "public"."spheroid");
CREATE FUNCTION "public"."st_length2d_spheroid"(IN "public"."geometry", IN "public"."spheroid") RETURNS "float8" 
	AS '$libdir/postgis-2.1','LWGEOM_length2d_ellipsoid'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_length2d_spheroid"(IN "public"."geometry", IN "public"."spheroid") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_length2d_spheroid"(IN "public"."geometry", IN "public"."spheroid") IS 'args: a_linestring, a_spheroid - Calculates the 2D length of a linestring/multilinestring on an ellipsoid. This is useful if the coordinates of the geometry are in longitude/latitude and a length is desired without reprojection.';

-- ----------------------------
--  Function structure for public.st_3dperimeter("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_3dperimeter"("public"."geometry");
CREATE FUNCTION "public"."st_3dperimeter"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-2.1','LWGEOM_perimeter_poly'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_3dperimeter"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_3dperimeter"(IN "public"."geometry") IS 'args: geomA - Returns the 3-dimensional perimeter of the geometry, if it is a polygon or multi-polygon.';

-- ----------------------------
--  Function structure for public.st_perimeter2d("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_perimeter2d"("public"."geometry");
CREATE FUNCTION "public"."st_perimeter2d"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-2.1','LWGEOM_perimeter2d_poly'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_perimeter2d"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_perimeter2d"(IN "public"."geometry") IS 'args: geomA - Returns the 2-dimensional perimeter of the geometry, if it is a polygon or multi-polygon. This is currently an alias for ST_Perimeter.';

-- ----------------------------
--  Function structure for public.st_perimeter("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_perimeter"("public"."geometry");
CREATE FUNCTION "public"."st_perimeter"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-2.1','LWGEOM_perimeter2d_poly'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_perimeter"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_perimeter"(IN "public"."geometry") IS 'args: g1 - Return the length measurement of the boundary of an ST_Surface or ST_MultiSurface geometry or geography. (Polygon, Multipolygon). geometry measurement is in units of spatial reference and geography is in meters.';

-- ----------------------------
--  Function structure for public.st_area2d("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_area2d"("public"."geometry");
CREATE FUNCTION "public"."st_area2d"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-2.1','LWGEOM_area_polygon'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_area2d"(IN "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_area("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_area"("public"."geometry");
CREATE FUNCTION "public"."st_area"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-2.1','area'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_area"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_area"(IN "public"."geometry") IS 'args: g1 - Returns the area of the surface if it is a polygon or multi-polygon. For "geometry" type area is in SRID units. For "geography" area is in square meters.';

-- ----------------------------
--  Function structure for public.st_distance_spheroid("public"."geometry", "public"."geometry", "public"."spheroid")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_distance_spheroid"("public"."geometry", "public"."geometry", "public"."spheroid");
CREATE FUNCTION "public"."st_distance_spheroid"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN "public"."spheroid") RETURNS "float8" 
	AS '$libdir/postgis-2.1','LWGEOM_distance_ellipsoid'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_distance_spheroid"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN "public"."spheroid") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_distance_spheroid"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN "public"."spheroid") IS 'args: geomlonlatA, geomlonlatB, measurement_spheroid - Returns the minimum distance between two lon/lat geometries given a particular spheroid. PostGIS versions prior to 1.5 only support points.';

-- ----------------------------
--  Function structure for public.st_distance("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_distance"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_distance"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-2.1','distance'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_distance"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_distance"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: g1, g2 - For geometry type Returns the 2-dimensional cartesian minimum distance (based on spatial ref) between two geometries in projected units. For geography type defaults to return spheroidal minimum distance between two geographies in meters.';

-- ----------------------------
--  Function structure for public.st_point_inside_circle("public"."geometry", float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_point_inside_circle"("public"."geometry", float8, float8, float8);
CREATE FUNCTION "public"."st_point_inside_circle"(IN "public"."geometry", IN float8, IN float8, IN float8) RETURNS "bool" 
	AS '$libdir/postgis-2.1','LWGEOM_inside_circle_point'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_point_inside_circle"(IN "public"."geometry", IN float8, IN float8, IN float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_point_inside_circle"(IN "public"."geometry", IN float8, IN float8, IN float8) IS 'args: a_point, center_x, center_y, radius - Is the point geometry insert circle defined by center_x, center_y, radius';

-- ----------------------------
--  Function structure for public.st_azimuth("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_azimuth"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_azimuth"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-2.1','LWGEOM_azimuth'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_azimuth"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_azimuth"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: pointA, pointB - Returns the north-based azimuth as the angle in radians measured clockwise from the vertical on pointA to pointB.';

-- ----------------------------
--  Function structure for public.st_force2d("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_force2d"("public"."geometry");
CREATE FUNCTION "public"."st_force2d"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_force_2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_force2d"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_force2d"(IN "public"."geometry") IS 'args: geomA - Forces the geometries into a "2-dimensional mode" so that all output representations will only have the X and Y coordinates.';

-- ----------------------------
--  Function structure for public.st_force_2d("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_force_2d"("public"."geometry");
CREATE FUNCTION "public"."st_force_2d"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS $BODY$ SELECT _postgis_deprecate('ST_Force_2d', 'ST_Force2D', '2.1.0');
    SELECT ST_Force2D($1);
  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_force_2d"(IN "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_force3dz("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_force3dz"("public"."geometry");
CREATE FUNCTION "public"."st_force3dz"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_force_3dz'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_force3dz"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_force3dz"(IN "public"."geometry") IS 'args: geomA - Forces the geometries into XYZ mode. This is a synonym for ST_Force3D.';

-- ----------------------------
--  Function structure for public.st_force_3dz("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_force_3dz"("public"."geometry");
CREATE FUNCTION "public"."st_force_3dz"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS $BODY$ SELECT _postgis_deprecate('ST_Force_3dz', 'ST_Force3DZ', '2.1.0');
    SELECT ST_Force3DZ($1);
  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_force_3dz"(IN "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_force3d("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_force3d"("public"."geometry");
CREATE FUNCTION "public"."st_force3d"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_force_3dz'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_force3d"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_force3d"(IN "public"."geometry") IS 'args: geomA - Forces the geometries into XYZ mode. This is an alias for ST_Force3DZ.';

-- ----------------------------
--  Function structure for public.st_force_3d("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_force_3d"("public"."geometry");
CREATE FUNCTION "public"."st_force_3d"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS $BODY$ SELECT _postgis_deprecate('ST_Force_3d', 'ST_Force3D', '2.1.0');
    SELECT ST_Force3D($1);
  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_force_3d"(IN "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_force3dm("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_force3dm"("public"."geometry");
CREATE FUNCTION "public"."st_force3dm"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_force_3dm'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_force3dm"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_force3dm"(IN "public"."geometry") IS 'args: geomA - Forces the geometries into XYM mode.';

-- ----------------------------
--  Function structure for public.st_force_3dm("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_force_3dm"("public"."geometry");
CREATE FUNCTION "public"."st_force_3dm"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS $BODY$ SELECT _postgis_deprecate('ST_Force_3dm', 'ST_Force3DM', '2.1.0');
    SELECT ST_Force3DM($1);
  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_force_3dm"(IN "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_force4d("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_force4d"("public"."geometry");
CREATE FUNCTION "public"."st_force4d"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_force_4d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_force4d"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_force4d"(IN "public"."geometry") IS 'args: geomA - Forces the geometries into XYZM mode.';

-- ----------------------------
--  Function structure for public.st_force_4d("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_force_4d"("public"."geometry");
CREATE FUNCTION "public"."st_force_4d"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS $BODY$ SELECT _postgis_deprecate('ST_Force_4d', 'ST_Force4D', '2.1.0');
    SELECT ST_Force4D($1);
  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_force_4d"(IN "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_forcecollection("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_forcecollection"("public"."geometry");
CREATE FUNCTION "public"."st_forcecollection"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_force_collection'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_forcecollection"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_forcecollection"(IN "public"."geometry") IS 'args: geomA - Converts the geometry into a GEOMETRYCOLLECTION.';

-- ----------------------------
--  Function structure for public.st_force_collection("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_force_collection"("public"."geometry");
CREATE FUNCTION "public"."st_force_collection"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS $BODY$ SELECT _postgis_deprecate('ST_Force_Collection', 'ST_ForceCollection', '2.1.0');
    SELECT ST_ForceCollection($1);
  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_force_collection"(IN "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_collectionextract("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_collectionextract"("public"."geometry", int4);
CREATE FUNCTION "public"."st_collectionextract"(IN "public"."geometry", IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','ST_CollectionExtract'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_collectionextract"(IN "public"."geometry", IN int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_collectionextract"(IN "public"."geometry", IN int4) IS 'args: collection, type - Given a (multi)geometry, returns a (multi)geometry consisting only of elements of the specified type.';

-- ----------------------------
--  Function structure for public.st_collectionhomogenize("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_collectionhomogenize"("public"."geometry");
CREATE FUNCTION "public"."st_collectionhomogenize"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','ST_CollectionHomogenize'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_collectionhomogenize"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_collectionhomogenize"(IN "public"."geometry") IS 'args: collection - Given a geometry collection, returns the "simplest" representation of the contents.';

-- ----------------------------
--  Function structure for public.st_multi("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_multi"("public"."geometry");
CREATE FUNCTION "public"."st_multi"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_force_multi'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_multi"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_multi"(IN "public"."geometry") IS 'args: g1 - Returns the geometry as a MULTI* geometry. If the geometry is already a MULTI*, it is returned unchanged.';

-- ----------------------------
--  Function structure for public.st_forcesfs("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_forcesfs"("public"."geometry");
CREATE FUNCTION "public"."st_forcesfs"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_force_sfs'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_forcesfs"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_forcesfs"(IN "public"."geometry") IS 'args: geomA - Forces the geometries to use SFS 1.1 geometry types only.';

-- ----------------------------
--  Function structure for public.st_forcesfs("public"."geometry", text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_forcesfs"("public"."geometry", text);
CREATE FUNCTION "public"."st_forcesfs"(IN "public"."geometry", IN "version" text) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_force_sfs'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_forcesfs"(IN "public"."geometry", IN "version" text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_forcesfs"(IN "public"."geometry", IN "version" text) IS 'args: geomA, version - Forces the geometries to use SFS 1.1 geometry types only.';

-- ----------------------------
--  Function structure for public.st_expand("public"."box3d", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_expand"("public"."box3d", float8);
CREATE FUNCTION "public"."st_expand"(IN "public"."box3d", IN float8) RETURNS "public"."box3d" 
	AS '$libdir/postgis-2.1','BOX3D_expand'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_expand"(IN "public"."box3d", IN float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_expand"(IN "public"."box3d", IN float8) IS 'args: g1, units_to_expand - Returns bounding box expanded in all directions from the bounding box of the input geometry. Uses double-precision';

-- ----------------------------
--  Function structure for public.st_expand("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_expand"("public"."geometry", float8);
CREATE FUNCTION "public"."st_expand"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_expand'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_expand"(IN "public"."geometry", IN float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_expand"(IN "public"."geometry", IN float8) IS 'args: g1, units_to_expand - Returns bounding box expanded in all directions from the bounding box of the input geometry. Uses double-precision';

-- ----------------------------
--  Function structure for public.st_envelope("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_envelope"("public"."geometry");
CREATE FUNCTION "public"."st_envelope"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_envelope'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_envelope"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_envelope"(IN "public"."geometry") IS 'args: g1 - Returns a geometry representing the double precision (float8) bounding box of the supplied geometry.';

-- ----------------------------
--  Function structure for public.st_reverse("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_reverse"("public"."geometry");
CREATE FUNCTION "public"."st_reverse"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_reverse'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_reverse"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_reverse"(IN "public"."geometry") IS 'args: g1 - Returns the geometry with vertex order reversed.';

-- ----------------------------
--  Function structure for public.st_forcerhr("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_forcerhr"("public"."geometry");
CREATE FUNCTION "public"."st_forcerhr"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_force_clockwise_poly'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_forcerhr"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_forcerhr"(IN "public"."geometry") IS 'args: g - Forces the orientation of the vertices in a polygon to follow the Right-Hand-Rule.';

-- ----------------------------
--  Function structure for public.postgis_noop("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_noop"("public"."geometry");
CREATE FUNCTION "public"."postgis_noop"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_noop'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."postgis_noop"(IN "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_zmflag("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_zmflag"("public"."geometry");
CREATE FUNCTION "public"."st_zmflag"(IN "public"."geometry") RETURNS "int2" 
	AS '$libdir/postgis-2.1','LWGEOM_zmflag'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_zmflag"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_zmflag"(IN "public"."geometry") IS 'args: geomA - Returns ZM (dimension semantic) flag of the geometries as a small int. Values are: 0=2d, 1=3dm, 2=3dz, 3=4d.';

-- ----------------------------
--  Function structure for public.st_ndims("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_ndims"("public"."geometry");
CREATE FUNCTION "public"."st_ndims"(IN "public"."geometry") RETURNS "int2" 
	AS '$libdir/postgis-2.1','LWGEOM_ndims'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_ndims"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_ndims"(IN "public"."geometry") IS 'args: g1 - Returns coordinate dimension of the geometry as a small int. Values are: 2,3 or 4.';

-- ----------------------------
--  Function structure for public.st_asewkt("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asewkt"("public"."geometry");
CREATE FUNCTION "public"."st_asewkt"(IN "public"."geometry") RETURNS "text" 
	AS '$libdir/postgis-2.1','LWGEOM_asEWKT'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asewkt"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_asewkt"(IN "public"."geometry") IS 'args: g1 - Return the Well-Known Text (WKT) representation of the geometry with SRID meta data.';

-- ----------------------------
--  Function structure for public.st_asewkb("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asewkb"("public"."geometry");
CREATE FUNCTION "public"."st_asewkb"(IN "public"."geometry") RETURNS "bytea" 
	AS '$libdir/postgis-2.1','WKBFromLWGEOM'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asewkb"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_asewkb"(IN "public"."geometry") IS 'args: g1 - Return the Well-Known Binary (WKB) representation of the geometry with SRID meta data.';

-- ----------------------------
--  Function structure for public.st_ashexewkb("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_ashexewkb"("public"."geometry");
CREATE FUNCTION "public"."st_ashexewkb"(IN "public"."geometry") RETURNS "text" 
	AS '$libdir/postgis-2.1','LWGEOM_asHEXEWKB'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_ashexewkb"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_ashexewkb"(IN "public"."geometry") IS 'args: g1 - Returns a Geometry in HEXEWKB format (as text) using either little-endian (NDR) or big-endian (XDR) encoding.';

-- ----------------------------
--  Function structure for public.st_ashexewkb("public"."geometry", text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_ashexewkb"("public"."geometry", text);
CREATE FUNCTION "public"."st_ashexewkb"(IN "public"."geometry", IN text) RETURNS "text" 
	AS '$libdir/postgis-2.1','LWGEOM_asHEXEWKB'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_ashexewkb"(IN "public"."geometry", IN text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_ashexewkb"(IN "public"."geometry", IN text) IS 'args: g1, NDRorXDR - Returns a Geometry in HEXEWKB format (as text) using either little-endian (NDR) or big-endian (XDR) encoding.';

-- ----------------------------
--  Function structure for public.st_asewkb("public"."geometry", text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asewkb"("public"."geometry", text);
CREATE FUNCTION "public"."st_asewkb"(IN "public"."geometry", IN text) RETURNS "bytea" 
	AS '$libdir/postgis-2.1','WKBFromLWGEOM'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asewkb"(IN "public"."geometry", IN text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_asewkb"(IN "public"."geometry", IN text) IS 'args: g1, NDR_or_XDR - Return the Well-Known Binary (WKB) representation of the geometry with SRID meta data.';

-- ----------------------------
--  Function structure for public.st_aslatlontext("public"."geometry", text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_aslatlontext"("public"."geometry", text);
CREATE FUNCTION "public"."st_aslatlontext"(IN "public"."geometry", IN text) RETURNS "text" 
	AS '$libdir/postgis-2.1','LWGEOM_to_latlon'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_aslatlontext"(IN "public"."geometry", IN text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_aslatlontext"(IN "public"."geometry", IN text) IS 'args: pt, format - Return the Degrees, Minutes, Seconds representation of the given point.';

-- ----------------------------
--  Function structure for public.st_aslatlontext("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_aslatlontext"("public"."geometry");
CREATE FUNCTION "public"."st_aslatlontext"(IN "public"."geometry") RETURNS "text" 
	AS $BODY$ SELECT ST_AsLatLonText($1, '') $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_aslatlontext"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_aslatlontext"(IN "public"."geometry") IS 'args: pt - Return the Degrees, Minutes, Seconds representation of the given point.';

-- ----------------------------
--  Function structure for public.geomfromewkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geomfromewkb"(bytea);
CREATE FUNCTION "public"."geomfromewkb"(IN bytea) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOMFromWKB'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geomfromewkb"(IN bytea) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_geomfromewkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geomfromewkb"(bytea);
CREATE FUNCTION "public"."st_geomfromewkb"(IN bytea) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOMFromWKB'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geomfromewkb"(IN bytea) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_geomfromewkb"(IN bytea) IS 'args: EWKB - Return a specified ST_Geometry value from Extended Well-Known Binary representation (EWKB).';

-- ----------------------------
--  Function structure for public.geomfromewkt(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geomfromewkt"(text);
CREATE FUNCTION "public"."geomfromewkt"(IN text) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','parse_WKT_lwgeom'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geomfromewkt"(IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_geomfromewkt(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geomfromewkt"(text);
CREATE FUNCTION "public"."st_geomfromewkt"(IN text) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','parse_WKT_lwgeom'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geomfromewkt"(IN text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_geomfromewkt"(IN text) IS 'args: EWKT - Return a specified ST_Geometry value from Extended Well-Known Text representation (EWKT).';

-- ----------------------------
--  Function structure for public.st_makepoint(float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_makepoint"(float8, float8);
CREATE FUNCTION "public"."st_makepoint"(IN float8, IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_makepoint'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_makepoint"(IN float8, IN float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_makepoint"(IN float8, IN float8) IS 'args: x, y - Creates a 2D,3DZ or 4D point geometry.';

-- ----------------------------
--  Function structure for public.st_makepoint(float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_makepoint"(float8, float8, float8);
CREATE FUNCTION "public"."st_makepoint"(IN float8, IN float8, IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_makepoint'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_makepoint"(IN float8, IN float8, IN float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_makepoint"(IN float8, IN float8, IN float8) IS 'args: x, y, z - Creates a 2D,3DZ or 4D point geometry.';

-- ----------------------------
--  Function structure for public.st_makepoint(float8, float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_makepoint"(float8, float8, float8, float8);
CREATE FUNCTION "public"."st_makepoint"(IN float8, IN float8, IN float8, IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_makepoint'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_makepoint"(IN float8, IN float8, IN float8, IN float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_makepoint"(IN float8, IN float8, IN float8, IN float8) IS 'args: x, y, z, m - Creates a 2D,3DZ or 4D point geometry.';

-- ----------------------------
--  Function structure for public.st_makepointm(float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_makepointm"(float8, float8, float8);
CREATE FUNCTION "public"."st_makepointm"(IN float8, IN float8, IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_makepoint3dm'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_makepointm"(IN float8, IN float8, IN float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_makepointm"(IN float8, IN float8, IN float8) IS 'args: x, y, m - Creates a point geometry with an x y and m coordinate.';

-- ----------------------------
--  Function structure for public.st_3dmakebox("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_3dmakebox"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_3dmakebox"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "public"."box3d" 
	AS '$libdir/postgis-2.1','BOX3D_construct'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_3dmakebox"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_3dmakebox"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: point3DLowLeftBottom, point3DUpRightTop - Creates a BOX3D defined by the given 3d point geometries.';

-- ----------------------------
--  Function structure for public.st_makeline("public"."_geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_makeline"("public"."_geometry");
CREATE FUNCTION "public"."st_makeline"(IN "public"."_geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_makeline_garray'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_makeline"(IN "public"."_geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_makeline"(IN "public"."_geometry") IS 'args: geoms_array - Creates a Linestring from point or line geometries.';

-- ----------------------------
--  Function structure for public.st_linefrommultipoint("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_linefrommultipoint"("public"."geometry");
CREATE FUNCTION "public"."st_linefrommultipoint"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_line_from_mpoint'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_linefrommultipoint"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_linefrommultipoint"(IN "public"."geometry") IS 'args: aMultiPoint - Creates a LineString from a MultiPoint geometry.';

-- ----------------------------
--  Function structure for public.st_makeline("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_makeline"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_makeline"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_makeline'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_makeline"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_makeline"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: geom1, geom2 - Creates a Linestring from point or line geometries.';

-- ----------------------------
--  Function structure for public.st_addpoint("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_addpoint"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_addpoint"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_addpoint'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_addpoint"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_addpoint"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: linestring, point - Adds a point to a LineString before point <position> (0-based index).';

-- ----------------------------
--  Function structure for public.st_addpoint("public"."geometry", "public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_addpoint"("public"."geometry", "public"."geometry", int4);
CREATE FUNCTION "public"."st_addpoint"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_addpoint'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_addpoint"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_addpoint"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN int4) IS 'args: linestring, point, position - Adds a point to a LineString before point <position> (0-based index).';

-- ----------------------------
--  Function structure for public.st_removepoint("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_removepoint"("public"."geometry", int4);
CREATE FUNCTION "public"."st_removepoint"(IN "public"."geometry", IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_removepoint'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_removepoint"(IN "public"."geometry", IN int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_removepoint"(IN "public"."geometry", IN int4) IS 'args: linestring, offset - Removes point from a linestring. Offset is 0-based.';

-- ----------------------------
--  Function structure for public.st_setpoint("public"."geometry", int4, "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_setpoint"("public"."geometry", int4, "public"."geometry");
CREATE FUNCTION "public"."st_setpoint"(IN "public"."geometry", IN int4, IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_setpoint_linestring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_setpoint"(IN "public"."geometry", IN int4, IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_setpoint"(IN "public"."geometry", IN int4, IN "public"."geometry") IS 'args: linestring, zerobasedposition, point - Replace point N of linestring with given point. Index is 0-based.';

-- ----------------------------
--  Function structure for public.st_makeenvelope(float8, float8, float8, float8, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_makeenvelope"(float8, float8, float8, float8, int4);
CREATE FUNCTION "public"."st_makeenvelope"(IN float8, IN float8, IN float8, IN float8, IN int4 DEFAULT 0) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','ST_MakeEnvelope'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_makeenvelope"(IN float8, IN float8, IN float8, IN float8, IN int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_makeenvelope"(IN float8, IN float8, IN float8, IN float8, IN int4) IS 'args: xmin, ymin, xmax, ymax, srid=unknown - Creates a rectangular Polygon formed from the given minimums and maximums. Input values must be in SRS specified by the SRID.';

-- ----------------------------
--  Function structure for public.st_makepolygon("public"."geometry", "public"."_geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_makepolygon"("public"."geometry", "public"."_geometry");
CREATE FUNCTION "public"."st_makepolygon"(IN "public"."geometry", IN "public"."_geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_makepoly'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_makepolygon"(IN "public"."geometry", IN "public"."_geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_makepolygon"(IN "public"."geometry", IN "public"."_geometry") IS 'args: outerlinestring, interiorlinestrings - Creates a Polygon formed by the given shell. Input geometries must be closed LINESTRINGS.';

-- ----------------------------
--  Function structure for public.st_makepolygon("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_makepolygon"("public"."geometry");
CREATE FUNCTION "public"."st_makepolygon"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_makepoly'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_makepolygon"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_makepolygon"(IN "public"."geometry") IS 'args: linestring - Creates a Polygon formed by the given shell. Input geometries must be closed LINESTRINGS.';

-- ----------------------------
--  Function structure for public.st_buildarea("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_buildarea"("public"."geometry");
CREATE FUNCTION "public"."st_buildarea"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','ST_BuildArea'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_buildarea"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_buildarea"(IN "public"."geometry") IS 'args: A - Creates an areal geometry formed by the constituent linework of given geometry';

-- ----------------------------
--  Function structure for public.st_polygonize("public"."_geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_polygonize"("public"."_geometry");
CREATE FUNCTION "public"."st_polygonize"(IN "public"."_geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','polygonize_garray'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_polygonize"(IN "public"."_geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_polygonize"(IN "public"."_geometry") IS 'args: geom_array - Aggregate. Creates a GeometryCollection containing possible polygons formed from the constituent linework of a set of geometries.';

-- ----------------------------
--  Function structure for public.st_linemerge("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_linemerge"("public"."geometry");
CREATE FUNCTION "public"."st_linemerge"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','linemerge'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_linemerge"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_linemerge"(IN "public"."geometry") IS 'args: amultilinestring - Returns a (set of) LineString(s) formed by sewing together a MULTILINESTRING.';

-- ----------------------------
--  Function structure for public.st_dump("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_dump"("public"."geometry");
CREATE FUNCTION "public"."st_dump"(IN "public"."geometry") RETURNS SETOF "public"."geometry_dump" 
	AS '$libdir/postgis-2.1','LWGEOM_dump'
	LANGUAGE c
	COST 1
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_dump"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_dump"(IN "public"."geometry") IS 'args: g1 - Returns a set of geometry_dump (geom,path) rows, that make up a geometry g1.';

-- ----------------------------
--  Function structure for public.st_dumprings("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_dumprings"("public"."geometry");
CREATE FUNCTION "public"."st_dumprings"(IN "public"."geometry") RETURNS SETOF "public"."geometry_dump" 
	AS '$libdir/postgis-2.1','LWGEOM_dump_rings'
	LANGUAGE c
	COST 1
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_dumprings"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_dumprings"(IN "public"."geometry") IS 'args: a_polygon - Returns a set of geometry_dump rows, representing the exterior and interior rings of a polygon.';

-- ----------------------------
--  Function structure for public._st_dumppoints("public"."geometry", _int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_dumppoints"("public"."geometry", _int4);
CREATE FUNCTION "public"."_st_dumppoints"(IN the_geom "public"."geometry", IN cur_path _int4) RETURNS SETOF "public"."geometry_dump" 
	AS $BODY$
DECLARE
  tmp geometry_dump;
  tmp2 geometry_dump;
  nb_points integer;
  nb_geom integer;
  i integer;
  j integer;
  g geometry;
  
BEGIN
  
  -- RAISE DEBUG '%,%', cur_path, ST_GeometryType(the_geom);

  -- Special case collections : iterate and return the DumpPoints of the geometries

  IF (ST_IsCollection(the_geom)) THEN
 
    i = 1;
    FOR tmp2 IN SELECT (ST_Dump(the_geom)).* LOOP

      FOR tmp IN SELECT * FROM _ST_DumpPoints(tmp2.geom, cur_path || tmp2.path) LOOP
	    RETURN NEXT tmp;
      END LOOP;
      i = i + 1;
      
    END LOOP;

    RETURN;
  END IF;
  

  -- Special case (POLYGON) : return the points of the rings of a polygon
  IF (ST_GeometryType(the_geom) = 'ST_Polygon') THEN

    FOR tmp IN SELECT * FROM _ST_DumpPoints(ST_ExteriorRing(the_geom), cur_path || ARRAY[1]) LOOP
      RETURN NEXT tmp;
    END LOOP;
    
    j := ST_NumInteriorRings(the_geom);
    FOR i IN 1..j LOOP
        FOR tmp IN SELECT * FROM _ST_DumpPoints(ST_InteriorRingN(the_geom, i), cur_path || ARRAY[i+1]) LOOP
          RETURN NEXT tmp;
        END LOOP;
    END LOOP;
    
    RETURN;
  END IF;

  -- Special case (TRIANGLE) : return the points of the external rings of a TRIANGLE
  IF (ST_GeometryType(the_geom) = 'ST_Triangle') THEN

    FOR tmp IN SELECT * FROM _ST_DumpPoints(ST_ExteriorRing(the_geom), cur_path || ARRAY[1]) LOOP
      RETURN NEXT tmp;
    END LOOP;
    
    RETURN;
  END IF;

    
  -- Special case (POINT) : return the point
  IF (ST_GeometryType(the_geom) = 'ST_Point') THEN

    tmp.path = cur_path || ARRAY[1];
    tmp.geom = the_geom;

    RETURN NEXT tmp;
    RETURN;

  END IF;


  -- Use ST_NumPoints rather than ST_NPoints to have a NULL value if the_geom isn't
  -- a LINESTRING, CIRCULARSTRING.
  SELECT ST_NumPoints(the_geom) INTO nb_points;

  -- This should never happen
  IF (nb_points IS NULL) THEN
    RAISE EXCEPTION 'Unexpected error while dumping geometry %', ST_AsText(the_geom);
  END IF;

  FOR i IN 1..nb_points LOOP
    tmp.path = cur_path || ARRAY[i];
    tmp.geom := ST_PointN(the_geom, i);
    RETURN NEXT tmp;
  END LOOP;
   
END
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_st_dumppoints"(IN the_geom "public"."geometry", IN cur_path _int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_dumppoints("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_dumppoints"("public"."geometry");
CREATE FUNCTION "public"."st_dumppoints"(IN "public"."geometry") RETURNS SETOF "public"."geometry_dump" 
	AS '$libdir/postgis-2.1','LWGEOM_dumppoints'
	LANGUAGE c
	COST 1
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_dumppoints"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_dumppoints"(IN "public"."geometry") IS 'args: geom - Returns a set of geometry_dump (geom,path) rows of all points that make up a geometry.';

-- ----------------------------
--  Function structure for public.box2d("public"."box3d")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."box2d"("public"."box3d");
CREATE FUNCTION "public"."box2d"(IN "public"."box3d") RETURNS "public"."box2d" 
	AS '$libdir/postgis-2.1','BOX3D_to_BOX2D'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."box2d"(IN "public"."box3d") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.box3d("public"."box2d")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."box3d"("public"."box2d");
CREATE FUNCTION "public"."box3d"(IN "public"."box2d") RETURNS "public"."box3d" 
	AS '$libdir/postgis-2.1','BOX2D_to_BOX3D'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."box3d"(IN "public"."box2d") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.box("public"."box3d")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."box"("public"."box3d");
CREATE FUNCTION "public"."box"(IN "public"."box3d") RETURNS "box" 
	AS '$libdir/postgis-2.1','BOX3D_to_BOX'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."box"(IN "public"."box3d") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.populate_geometry_columns(bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."populate_geometry_columns"(bool);
CREATE FUNCTION "public"."populate_geometry_columns"(IN use_typmod bool DEFAULT true) RETURNS "text" 
	AS $BODY$
DECLARE
	inserted    integer;
	oldcount    integer;
	probed      integer;
	stale       integer;
	gcs         RECORD;
	gc          RECORD;
	gsrid       integer;
	gndims      integer;
	gtype       text;
	query       text;
	gc_is_valid boolean;

BEGIN
	SELECT count(*) INTO oldcount FROM geometry_columns;
	inserted := 0;

	-- Count the number of geometry columns in all tables and views
	SELECT count(DISTINCT c.oid) INTO probed
	FROM pg_class c,
		 pg_attribute a,
		 pg_type t,
		 pg_namespace n
	WHERE (c.relkind = 'r' OR c.relkind = 'v')
		AND t.typname = 'geometry'
		AND a.attisdropped = false
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND n.nspname NOT ILIKE 'pg_temp%' AND c.relname != 'raster_columns' ;

	-- Iterate through all non-dropped geometry columns
	RAISE DEBUG 'Processing Tables.....';

	FOR gcs IN
	SELECT DISTINCT ON (c.oid) c.oid, n.nspname, c.relname
		FROM pg_class c,
			 pg_attribute a,
			 pg_type t,
			 pg_namespace n
		WHERE c.relkind = 'r'
		AND t.typname = 'geometry'
		AND a.attisdropped = false
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND n.nspname NOT ILIKE 'pg_temp%' AND c.relname != 'raster_columns' 
	LOOP

		inserted := inserted + populate_geometry_columns(gcs.oid, use_typmod);
	END LOOP;

	IF oldcount > inserted THEN
	    stale = oldcount-inserted;
	ELSE
	    stale = 0;
	END IF;

	RETURN 'probed:' ||probed|| ' inserted:'||inserted;
END

$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."populate_geometry_columns"(IN use_typmod bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."populate_geometry_columns"(IN use_typmod bool) IS 'args: use_typmod=true - Ensures geometry columns are defined with type modifiers or have appropriate spatial constraints This ensures they will be registered correctly in geometry_columns view. By default will convert all geometry columns with no type modifier to ones with type modifiers. To get old behavior set use_typmod=false';

-- ----------------------------
--  Function structure for public.populate_geometry_columns(oid, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."populate_geometry_columns"(oid, bool);
CREATE FUNCTION "public"."populate_geometry_columns"(IN tbl_oid oid, IN use_typmod bool DEFAULT true) RETURNS "int4" 
	AS $BODY$
DECLARE
	gcs         RECORD;
	gc          RECORD;
	gc_old      RECORD;
	gsrid       integer;
	gndims      integer;
	gtype       text;
	query       text;
	gc_is_valid boolean;
	inserted    integer;
	constraint_successful boolean := false;

BEGIN
	inserted := 0;

	-- Iterate through all geometry columns in this table
	FOR gcs IN
	SELECT n.nspname, c.relname, a.attname
		FROM pg_class c,
			 pg_attribute a,
			 pg_type t,
			 pg_namespace n
		WHERE c.relkind = 'r'
		AND t.typname = 'geometry'
		AND a.attisdropped = false
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND n.nspname NOT ILIKE 'pg_temp%'
		AND c.oid = tbl_oid
	LOOP

        RAISE DEBUG 'Processing column %.%.%', gcs.nspname, gcs.relname, gcs.attname;
    
        gc_is_valid := true;
        -- Find the srid, coord_dimension, and type of current geometry
        -- in geometry_columns -- which is now a view
        
        SELECT type, srid, coord_dimension INTO gc_old 
            FROM geometry_columns 
            WHERE f_table_schema = gcs.nspname AND f_table_name = gcs.relname AND f_geometry_column = gcs.attname; 
            
        IF upper(gc_old.type) = 'GEOMETRY' THEN
        -- This is an unconstrained geometry we need to do something
        -- We need to figure out what to set the type by inspecting the data
            EXECUTE 'SELECT st_srid(' || quote_ident(gcs.attname) || ') As srid, GeometryType(' || quote_ident(gcs.attname) || ') As type, ST_NDims(' || quote_ident(gcs.attname) || ') As dims ' ||
                     ' FROM ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || 
                     ' WHERE ' || quote_ident(gcs.attname) || ' IS NOT NULL LIMIT 1;'
                INTO gc;
            IF gc IS NULL THEN -- there is no data so we can not determine geometry type
            	RAISE WARNING 'No data in table %.%, so no information to determine geometry type and srid', gcs.nspname, gcs.relname;
            	RETURN 0;
            END IF;
            gsrid := gc.srid; gtype := gc.type; gndims := gc.dims;
            	
            IF use_typmod THEN
                BEGIN
                    EXECUTE 'ALTER TABLE ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || ' ALTER COLUMN ' || quote_ident(gcs.attname) || 
                        ' TYPE geometry(' || postgis_type_name(gtype, gndims, true) || ', ' || gsrid::text  || ') ';
                    inserted := inserted + 1;
                EXCEPTION
                        WHEN invalid_parameter_value OR feature_not_supported THEN
                        RAISE WARNING 'Could not convert ''%'' in ''%.%'' to use typmod with srid %, type %: %', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname), gsrid, postgis_type_name(gtype, gndims, true), SQLERRM;
                            gc_is_valid := false;
                END;
                
            ELSE
                -- Try to apply srid check to column
            	constraint_successful = false;
                IF (gsrid > 0 AND postgis_constraint_srid(gcs.nspname, gcs.relname,gcs.attname) IS NULL ) THEN
                    BEGIN
                        EXECUTE 'ALTER TABLE ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || 
                                 ' ADD CONSTRAINT ' || quote_ident('enforce_srid_' || gcs.attname) || 
                                 ' CHECK (st_srid(' || quote_ident(gcs.attname) || ') = ' || gsrid || ')';
                        constraint_successful := true;
                    EXCEPTION
                        WHEN check_violation THEN
                            RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not apply constraint CHECK (st_srid(%) = %)', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname), quote_ident(gcs.attname), gsrid;
                            gc_is_valid := false;
                    END;
                END IF;
                
                -- Try to apply ndims check to column
                IF (gndims IS NOT NULL AND postgis_constraint_dims(gcs.nspname, gcs.relname,gcs.attname) IS NULL ) THEN
                    BEGIN
                        EXECUTE 'ALTER TABLE ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
                                 ADD CONSTRAINT ' || quote_ident('enforce_dims_' || gcs.attname) || '
                                 CHECK (st_ndims(' || quote_ident(gcs.attname) || ') = '||gndims||')';
                        constraint_successful := true;
                    EXCEPTION
                        WHEN check_violation THEN
                            RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not apply constraint CHECK (st_ndims(%) = %)', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname), quote_ident(gcs.attname), gndims;
                            gc_is_valid := false;
                    END;
                END IF;
    
                -- Try to apply geometrytype check to column
                IF (gtype IS NOT NULL AND postgis_constraint_type(gcs.nspname, gcs.relname,gcs.attname) IS NULL ) THEN
                    BEGIN
                        EXECUTE 'ALTER TABLE ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
                        ADD CONSTRAINT ' || quote_ident('enforce_geotype_' || gcs.attname) || '
                        CHECK ((geometrytype(' || quote_ident(gcs.attname) || ') = ' || quote_literal(gtype) || ') OR (' || quote_ident(gcs.attname) || ' IS NULL))';
                        constraint_successful := true;
                    EXCEPTION
                        WHEN check_violation THEN
                            -- No geometry check can be applied. This column contains a number of geometry types.
                            RAISE WARNING 'Could not add geometry type check (%) to table column: %.%.%', gtype, quote_ident(gcs.nspname),quote_ident(gcs.relname),quote_ident(gcs.attname);
                    END;
                END IF;
                 --only count if we were successful in applying at least one constraint
                IF constraint_successful THEN
                	inserted := inserted + 1;
                END IF;
            END IF;	        
	    END IF;

	END LOOP;

	RETURN inserted;
END

$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."populate_geometry_columns"(IN tbl_oid oid, IN use_typmod bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."populate_geometry_columns"(IN tbl_oid oid, IN use_typmod bool) IS 'args: relation_oid, use_typmod=true - Ensures geometry columns are defined with type modifiers or have appropriate spatial constraints This ensures they will be registered correctly in geometry_columns view. By default will convert all geometry columns with no type modifier to ones with type modifiers. To get old behavior set use_typmod=false';

-- ----------------------------
--  Function structure for public.addgeometrycolumn(varchar, varchar, varchar, varchar, int4, varchar, int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."addgeometrycolumn"(varchar, varchar, varchar, varchar, int4, varchar, int4, bool);
CREATE FUNCTION "public"."addgeometrycolumn"(IN "catalog_name" varchar, IN "schema_name" varchar, IN "table_name" varchar, IN "column_name" varchar, IN new_srid_in int4, IN new_type varchar, IN new_dim int4, IN use_typmod bool DEFAULT true) RETURNS "text" 
	AS $BODY$
DECLARE
	rec RECORD;
	sr varchar;
	real_schema name;
	sql text;
	new_srid integer;

BEGIN

	-- Verify geometry type
	IF (postgis_type_name(new_type,new_dim) IS NULL )
	THEN
		RAISE EXCEPTION 'Invalid type name "%(%)" - valid ones are:
	POINT, MULTIPOINT,
	LINESTRING, MULTILINESTRING,
	POLYGON, MULTIPOLYGON,
	CIRCULARSTRING, COMPOUNDCURVE, MULTICURVE,
	CURVEPOLYGON, MULTISURFACE,
	GEOMETRY, GEOMETRYCOLLECTION,
	POINTM, MULTIPOINTM,
	LINESTRINGM, MULTILINESTRINGM,
	POLYGONM, MULTIPOLYGONM,
	CIRCULARSTRINGM, COMPOUNDCURVEM, MULTICURVEM
	CURVEPOLYGONM, MULTISURFACEM, TRIANGLE, TRIANGLEM,
	POLYHEDRALSURFACE, POLYHEDRALSURFACEM, TIN, TINM
	or GEOMETRYCOLLECTIONM', new_type, new_dim;
		RETURN 'fail';
	END IF;


	-- Verify dimension
	IF ( (new_dim >4) OR (new_dim <2) ) THEN
		RAISE EXCEPTION 'invalid dimension';
		RETURN 'fail';
	END IF;

	IF ( (new_type LIKE '%M') AND (new_dim!=3) ) THEN
		RAISE EXCEPTION 'TypeM needs 3 dimensions';
		RETURN 'fail';
	END IF;


	-- Verify SRID
	IF ( new_srid_in > 0 ) THEN
		IF new_srid_in > 998999 THEN
			RAISE EXCEPTION 'AddGeometryColumn() - SRID must be <= %', 998999;
		END IF;
		new_srid := new_srid_in;
		SELECT SRID INTO sr FROM spatial_ref_sys WHERE SRID = new_srid;
		IF NOT FOUND THEN
			RAISE EXCEPTION 'AddGeometryColumn() - invalid SRID';
			RETURN 'fail';
		END IF;
	ELSE
		new_srid := ST_SRID('POINT EMPTY'::geometry);
		IF ( new_srid_in != new_srid ) THEN
			RAISE NOTICE 'SRID value % converted to the officially unknown SRID value %', new_srid_in, new_srid;
		END IF;
	END IF;


	-- Verify schema
	IF ( schema_name IS NOT NULL AND schema_name != '' ) THEN
		sql := 'SELECT nspname FROM pg_namespace ' ||
			'WHERE text(nspname) = ' || quote_literal(schema_name) ||
			'LIMIT 1';
		RAISE DEBUG '%', sql;
		EXECUTE sql INTO real_schema;

		IF ( real_schema IS NULL ) THEN
			RAISE EXCEPTION 'Schema % is not a valid schemaname', quote_literal(schema_name);
			RETURN 'fail';
		END IF;
	END IF;

	IF ( real_schema IS NULL ) THEN
		RAISE DEBUG 'Detecting schema';
		sql := 'SELECT n.nspname AS schemaname ' ||
			'FROM pg_catalog.pg_class c ' ||
			  'JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace ' ||
			'WHERE c.relkind = ' || quote_literal('r') ||
			' AND n.nspname NOT IN (' || quote_literal('pg_catalog') || ', ' || quote_literal('pg_toast') || ')' ||
			' AND pg_catalog.pg_table_is_visible(c.oid)' ||
			' AND c.relname = ' || quote_literal(table_name);
		RAISE DEBUG '%', sql;
		EXECUTE sql INTO real_schema;

		IF ( real_schema IS NULL ) THEN
			RAISE EXCEPTION 'Table % does not occur in the search_path', quote_literal(table_name);
			RETURN 'fail';
		END IF;
	END IF;


	-- Add geometry column to table
	IF use_typmod THEN
	     sql := 'ALTER TABLE ' ||
            quote_ident(real_schema) || '.' || quote_ident(table_name)
            || ' ADD COLUMN ' || quote_ident(column_name) ||
            ' geometry(' || postgis_type_name(new_type, new_dim) || ', ' || new_srid::text || ')';
        RAISE DEBUG '%', sql;
	ELSE
        sql := 'ALTER TABLE ' ||
            quote_ident(real_schema) || '.' || quote_ident(table_name)
            || ' ADD COLUMN ' || quote_ident(column_name) ||
            ' geometry ';
        RAISE DEBUG '%', sql;
    END IF;
	EXECUTE sql;

	IF NOT use_typmod THEN
        -- Add table CHECKs
        sql := 'ALTER TABLE ' ||
            quote_ident(real_schema) || '.' || quote_ident(table_name)
            || ' ADD CONSTRAINT '
            || quote_ident('enforce_srid_' || column_name)
            || ' CHECK (st_srid(' || quote_ident(column_name) ||
            ') = ' || new_srid::text || ')' ;
        RAISE DEBUG '%', sql;
        EXECUTE sql;
    
        sql := 'ALTER TABLE ' ||
            quote_ident(real_schema) || '.' || quote_ident(table_name)
            || ' ADD CONSTRAINT '
            || quote_ident('enforce_dims_' || column_name)
            || ' CHECK (st_ndims(' || quote_ident(column_name) ||
            ') = ' || new_dim::text || ')' ;
        RAISE DEBUG '%', sql;
        EXECUTE sql;
    
        IF ( NOT (new_type = 'GEOMETRY')) THEN
            sql := 'ALTER TABLE ' ||
                quote_ident(real_schema) || '.' || quote_ident(table_name) || ' ADD CONSTRAINT ' ||
                quote_ident('enforce_geotype_' || column_name) ||
                ' CHECK (GeometryType(' ||
                quote_ident(column_name) || ')=' ||
                quote_literal(new_type) || ' OR (' ||
                quote_ident(column_name) || ') is null)';
            RAISE DEBUG '%', sql;
            EXECUTE sql;
        END IF;
    END IF;

	RETURN
		real_schema || '.' ||
		table_name || '.' || column_name ||
		' SRID:' || new_srid::text ||
		' TYPE:' || new_type ||
		' DIMS:' || new_dim::text || ' ';
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."addgeometrycolumn"(IN "catalog_name" varchar, IN "schema_name" varchar, IN "table_name" varchar, IN "column_name" varchar, IN new_srid_in int4, IN new_type varchar, IN new_dim int4, IN use_typmod bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."addgeometrycolumn"(IN "catalog_name" varchar, IN "schema_name" varchar, IN "table_name" varchar, IN "column_name" varchar, IN new_srid_in int4, IN new_type varchar, IN new_dim int4, IN use_typmod bool) IS 'args: catalog_name, schema_name, table_name, column_name, srid, type, dimension, use_typmod=true - Adds a geometry column to an existing table of attributes. By default uses type modifier to define rather than constraints. Pass in false for use_typmod to get old check constraint based behavior';

-- ----------------------------
--  Function structure for public.addgeometrycolumn(varchar, varchar, varchar, int4, varchar, int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."addgeometrycolumn"(varchar, varchar, varchar, int4, varchar, int4, bool);
CREATE FUNCTION "public"."addgeometrycolumn"(IN "schema_name" varchar, IN "table_name" varchar, IN "column_name" varchar, IN new_srid int4, IN new_type varchar, IN new_dim int4, IN use_typmod bool DEFAULT true) RETURNS "text" 
	AS $BODY$
DECLARE
	ret  text;
BEGIN
	SELECT AddGeometryColumn('',$1,$2,$3,$4,$5,$6,$7) into ret;
	RETURN ret;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."addgeometrycolumn"(IN "schema_name" varchar, IN "table_name" varchar, IN "column_name" varchar, IN new_srid int4, IN new_type varchar, IN new_dim int4, IN use_typmod bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."addgeometrycolumn"(IN "schema_name" varchar, IN "table_name" varchar, IN "column_name" varchar, IN new_srid int4, IN new_type varchar, IN new_dim int4, IN use_typmod bool) IS 'args: schema_name, table_name, column_name, srid, type, dimension, use_typmod=true - Adds a geometry column to an existing table of attributes. By default uses type modifier to define rather than constraints. Pass in false for use_typmod to get old check constraint based behavior';

-- ----------------------------
--  Function structure for public.addgeometrycolumn(varchar, varchar, int4, varchar, int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."addgeometrycolumn"(varchar, varchar, int4, varchar, int4, bool);
CREATE FUNCTION "public"."addgeometrycolumn"(IN "table_name" varchar, IN "column_name" varchar, IN new_srid int4, IN new_type varchar, IN new_dim int4, IN use_typmod bool DEFAULT true) RETURNS "text" 
	AS $BODY$
DECLARE
	ret  text;
BEGIN
	SELECT AddGeometryColumn('','',$1,$2,$3,$4,$5, $6) into ret;
	RETURN ret;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."addgeometrycolumn"(IN "table_name" varchar, IN "column_name" varchar, IN new_srid int4, IN new_type varchar, IN new_dim int4, IN use_typmod bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."addgeometrycolumn"(IN "table_name" varchar, IN "column_name" varchar, IN new_srid int4, IN new_type varchar, IN new_dim int4, IN use_typmod bool) IS 'args: table_name, column_name, srid, type, dimension, use_typmod=true - Adds a geometry column to an existing table of attributes. By default uses type modifier to define rather than constraints. Pass in false for use_typmod to get old check constraint based behavior';

-- ----------------------------
--  Function structure for public.dropgeometrycolumn(varchar, varchar, varchar, varchar)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."dropgeometrycolumn"(varchar, varchar, varchar, varchar);
CREATE FUNCTION "public"."dropgeometrycolumn"(IN "catalog_name" varchar, IN "schema_name" varchar, IN "table_name" varchar, IN "column_name" varchar) RETURNS "text" 
	AS $BODY$
DECLARE
	myrec RECORD;
	okay boolean;
	real_schema name;

BEGIN


	-- Find, check or fix schema_name
	IF ( schema_name != '' ) THEN
		okay = false;

		FOR myrec IN SELECT nspname FROM pg_namespace WHERE text(nspname) = schema_name LOOP
			okay := true;
		END LOOP;

		IF ( okay <>  true ) THEN
			RAISE NOTICE 'Invalid schema name - using current_schema()';
			SELECT current_schema() into real_schema;
		ELSE
			real_schema = schema_name;
		END IF;
	ELSE
		SELECT current_schema() into real_schema;
	END IF;

	-- Find out if the column is in the geometry_columns table
	okay = false;
	FOR myrec IN SELECT * from geometry_columns where f_table_schema = text(real_schema) and f_table_name = table_name and f_geometry_column = column_name LOOP
		okay := true;
	END LOOP;
	IF (okay <> true) THEN
		RAISE EXCEPTION 'column not found in geometry_columns table';
		RETURN false;
	END IF;

	-- Remove table column
	EXECUTE 'ALTER TABLE ' || quote_ident(real_schema) || '.' ||
		quote_ident(table_name) || ' DROP COLUMN ' ||
		quote_ident(column_name);

	RETURN real_schema || '.' || table_name || '.' || column_name ||' effectively removed.';

END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."dropgeometrycolumn"(IN "catalog_name" varchar, IN "schema_name" varchar, IN "table_name" varchar, IN "column_name" varchar) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."dropgeometrycolumn"(IN "catalog_name" varchar, IN "schema_name" varchar, IN "table_name" varchar, IN "column_name" varchar) IS 'args: catalog_name, schema_name, table_name, column_name - Removes a geometry column from a spatial table.';

-- ----------------------------
--  Function structure for public.dropgeometrycolumn(varchar, varchar, varchar)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."dropgeometrycolumn"(varchar, varchar, varchar);
CREATE FUNCTION "public"."dropgeometrycolumn"(IN "schema_name" varchar, IN "table_name" varchar, IN "column_name" varchar) RETURNS "text" 
	AS $BODY$
DECLARE
	ret text;
BEGIN
	SELECT DropGeometryColumn('',$1,$2,$3) into ret;
	RETURN ret;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."dropgeometrycolumn"(IN "schema_name" varchar, IN "table_name" varchar, IN "column_name" varchar) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."dropgeometrycolumn"(IN "schema_name" varchar, IN "table_name" varchar, IN "column_name" varchar) IS 'args: schema_name, table_name, column_name - Removes a geometry column from a spatial table.';

-- ----------------------------
--  Function structure for public.dropgeometrycolumn(varchar, varchar)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."dropgeometrycolumn"(varchar, varchar);
CREATE FUNCTION "public"."dropgeometrycolumn"(IN "table_name" varchar, IN "column_name" varchar) RETURNS "text" 
	AS $BODY$
DECLARE
	ret text;
BEGIN
	SELECT DropGeometryColumn('','',$1,$2) into ret;
	RETURN ret;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."dropgeometrycolumn"(IN "table_name" varchar, IN "column_name" varchar) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."dropgeometrycolumn"(IN "table_name" varchar, IN "column_name" varchar) IS 'args: table_name, column_name - Removes a geometry column from a spatial table.';

-- ----------------------------
--  Function structure for public.dropgeometrytable(varchar, varchar, varchar)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."dropgeometrytable"(varchar, varchar, varchar);
CREATE FUNCTION "public"."dropgeometrytable"(IN "catalog_name" varchar, IN "schema_name" varchar, IN "table_name" varchar) RETURNS "text" 
	AS $BODY$
DECLARE
	real_schema name;

BEGIN

	IF ( schema_name = '' ) THEN
		SELECT current_schema() into real_schema;
	ELSE
		real_schema = schema_name;
	END IF;

	-- TODO: Should we warn if table doesn't exist probably instead just saying dropped
	-- Remove table
	EXECUTE 'DROP TABLE IF EXISTS '
		|| quote_ident(real_schema) || '.' ||
		quote_ident(table_name) || ' RESTRICT';

	RETURN
		real_schema || '.' ||
		table_name ||' dropped.';

END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."dropgeometrytable"(IN "catalog_name" varchar, IN "schema_name" varchar, IN "table_name" varchar) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."dropgeometrytable"(IN "catalog_name" varchar, IN "schema_name" varchar, IN "table_name" varchar) IS 'args: catalog_name, schema_name, table_name - Drops a table and all its references in geometry_columns.';

-- ----------------------------
--  Function structure for public.dropgeometrytable(varchar, varchar)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."dropgeometrytable"(varchar, varchar);
CREATE FUNCTION "public"."dropgeometrytable"(IN "schema_name" varchar, IN "table_name" varchar) RETURNS "text" 
	AS $BODY$ SELECT DropGeometryTable('',$1,$2) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."dropgeometrytable"(IN "schema_name" varchar, IN "table_name" varchar) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."dropgeometrytable"(IN "schema_name" varchar, IN "table_name" varchar) IS 'args: schema_name, table_name - Drops a table and all its references in geometry_columns.';

-- ----------------------------
--  Function structure for public.dropgeometrytable(varchar)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."dropgeometrytable"(varchar);
CREATE FUNCTION "public"."dropgeometrytable"(IN "table_name" varchar) RETURNS "text" 
	AS $BODY$ SELECT DropGeometryTable('','',$1) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."dropgeometrytable"(IN "table_name" varchar) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."dropgeometrytable"(IN "table_name" varchar) IS 'args: table_name - Drops a table and all its references in geometry_columns.';

-- ----------------------------
--  Function structure for public.text("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."text"("public"."geometry");
CREATE FUNCTION "public"."text"(IN "public"."geometry") RETURNS "text" 
	AS '$libdir/postgis-2.1','LWGEOM_to_text'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."text"(IN "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.box3dtobox("public"."box3d")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."box3dtobox"("public"."box3d");
CREATE FUNCTION "public"."box3dtobox"(IN "public"."box3d") RETURNS "box" 
	AS $BODY$SELECT box($1)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."box3dtobox"(IN "public"."box3d") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry("public"."box2d")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry"("public"."box2d");
CREATE FUNCTION "public"."geometry"(IN "public"."box2d") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','BOX2D_to_LWGEOM'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry"(IN "public"."box2d") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry("public"."box3d")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry"("public"."box3d");
CREATE FUNCTION "public"."geometry"(IN "public"."box3d") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','BOX3D_to_LWGEOM'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry"(IN "public"."box3d") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.updategeometrysrid(varchar, varchar, varchar, varchar, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."updategeometrysrid"(varchar, varchar, varchar, varchar, int4);
CREATE FUNCTION "public"."updategeometrysrid"(IN catalogn_name varchar, IN "schema_name" varchar, IN "table_name" varchar, IN "column_name" varchar, IN new_srid_in int4) RETURNS "text" 
	AS $BODY$
DECLARE
	myrec RECORD;
	okay boolean;
	cname varchar;
	real_schema name;
	unknown_srid integer;
	new_srid integer := new_srid_in;

BEGIN


	-- Find, check or fix schema_name
	IF ( schema_name != '' ) THEN
		okay = false;

		FOR myrec IN SELECT nspname FROM pg_namespace WHERE text(nspname) = schema_name LOOP
			okay := true;
		END LOOP;

		IF ( okay <> true ) THEN
			RAISE EXCEPTION 'Invalid schema name';
		ELSE
			real_schema = schema_name;
		END IF;
	ELSE
		SELECT INTO real_schema current_schema()::text;
	END IF;

	-- Ensure that column_name is in geometry_columns
	okay = false;
	FOR myrec IN SELECT type, coord_dimension FROM geometry_columns WHERE f_table_schema = text(real_schema) and f_table_name = table_name and f_geometry_column = column_name LOOP
		okay := true;
	END LOOP;
	IF (NOT okay) THEN
		RAISE EXCEPTION 'column not found in geometry_columns table';
		RETURN false;
	END IF;

	-- Ensure that new_srid is valid
	IF ( new_srid > 0 ) THEN
		IF ( SELECT count(*) = 0 from spatial_ref_sys where srid = new_srid ) THEN
			RAISE EXCEPTION 'invalid SRID: % not found in spatial_ref_sys', new_srid;
			RETURN false;
		END IF;
	ELSE
		unknown_srid := ST_SRID('POINT EMPTY'::geometry);
		IF ( new_srid != unknown_srid ) THEN
			new_srid := unknown_srid;
			RAISE NOTICE 'SRID value % converted to the officially unknown SRID value %', new_srid_in, new_srid;
		END IF;
	END IF;

	IF postgis_constraint_srid(schema_name, table_name, column_name) IS NOT NULL THEN 
	-- srid was enforced with constraints before, keep it that way.
        -- Make up constraint name
        cname = 'enforce_srid_'  || column_name;
    
        -- Drop enforce_srid constraint
        EXECUTE 'ALTER TABLE ' || quote_ident(real_schema) ||
            '.' || quote_ident(table_name) ||
            ' DROP constraint ' || quote_ident(cname);
    
        -- Update geometries SRID
        EXECUTE 'UPDATE ' || quote_ident(real_schema) ||
            '.' || quote_ident(table_name) ||
            ' SET ' || quote_ident(column_name) ||
            ' = ST_SetSRID(' || quote_ident(column_name) ||
            ', ' || new_srid::text || ')';
            
        -- Reset enforce_srid constraint
        EXECUTE 'ALTER TABLE ' || quote_ident(real_schema) ||
            '.' || quote_ident(table_name) ||
            ' ADD constraint ' || quote_ident(cname) ||
            ' CHECK (st_srid(' || quote_ident(column_name) ||
            ') = ' || new_srid::text || ')';
    ELSE 
        -- We will use typmod to enforce if no srid constraints
        -- We are using postgis_type_name to lookup the new name 
        -- (in case Paul changes his mind and flips geometry_columns to return old upper case name) 
        EXECUTE 'ALTER TABLE ' || quote_ident(real_schema) || '.' || quote_ident(table_name) || 
        ' ALTER COLUMN ' || quote_ident(column_name) || ' TYPE  geometry(' || postgis_type_name(myrec.type, myrec.coord_dimension, true) || ', ' || new_srid::text || ') USING ST_SetSRID(' || quote_ident(column_name) || ',' || new_srid::text || ');' ;
    END IF;

	RETURN real_schema || '.' || table_name || '.' || column_name ||' SRID changed to ' || new_srid::text;

END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."updategeometrysrid"(IN catalogn_name varchar, IN "schema_name" varchar, IN "table_name" varchar, IN "column_name" varchar, IN new_srid_in int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."updategeometrysrid"(IN catalogn_name varchar, IN "schema_name" varchar, IN "table_name" varchar, IN "column_name" varchar, IN new_srid_in int4) IS 'args: catalog_name, schema_name, table_name, column_name, srid - Updates the SRID of all features in a geometry column, geometry_columns metadata and srid. If it was enforced with constraints, the constraints will be updated with new srid constraint. If the old was enforced by type definition, the type definition will be changed.';

-- ----------------------------
--  Function structure for public.updategeometrysrid(varchar, varchar, varchar, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."updategeometrysrid"(varchar, varchar, varchar, int4);
CREATE FUNCTION "public"."updategeometrysrid"(IN varchar, IN varchar, IN varchar, IN int4) RETURNS "text" 
	AS $BODY$
DECLARE
	ret  text;
BEGIN
	SELECT UpdateGeometrySRID('',$1,$2,$3,$4) into ret;
	RETURN ret;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."updategeometrysrid"(IN varchar, IN varchar, IN varchar, IN int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."updategeometrysrid"(IN varchar, IN varchar, IN varchar, IN int4) IS 'args: schema_name, table_name, column_name, srid - Updates the SRID of all features in a geometry column, geometry_columns metadata and srid. If it was enforced with constraints, the constraints will be updated with new srid constraint. If the old was enforced by type definition, the type definition will be changed.';

-- ----------------------------
--  Function structure for public.updategeometrysrid(varchar, varchar, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."updategeometrysrid"(varchar, varchar, int4);
CREATE FUNCTION "public"."updategeometrysrid"(IN varchar, IN varchar, IN int4) RETURNS "text" 
	AS $BODY$
DECLARE
	ret  text;
BEGIN
	SELECT UpdateGeometrySRID('','',$1,$2,$3) into ret;
	RETURN ret;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."updategeometrysrid"(IN varchar, IN varchar, IN int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."updategeometrysrid"(IN varchar, IN varchar, IN int4) IS 'args: table_name, column_name, srid - Updates the SRID of all features in a geometry column, geometry_columns metadata and srid. If it was enforced with constraints, the constraints will be updated with new srid constraint. If the old was enforced by type definition, the type definition will be changed.';

-- ----------------------------
--  Function structure for public.find_srid(varchar, varchar, varchar)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."find_srid"(varchar, varchar, varchar);
CREATE FUNCTION "public"."find_srid"(IN varchar, IN varchar, IN varchar) RETURNS "int4" 
	AS $BODY$
DECLARE
	schem text;
	tabl text;
	sr int4;
BEGIN
	IF $1 IS NULL THEN
	  RAISE EXCEPTION 'find_srid() - schema is NULL!';
	END IF;
	IF $2 IS NULL THEN
	  RAISE EXCEPTION 'find_srid() - table name is NULL!';
	END IF;
	IF $3 IS NULL THEN
	  RAISE EXCEPTION 'find_srid() - column name is NULL!';
	END IF;
	schem = $1;
	tabl = $2;
-- if the table contains a . and the schema is empty
-- split the table into a schema and a table
-- otherwise drop through to default behavior
	IF ( schem = '' and tabl LIKE '%.%' ) THEN
	 schem = substr(tabl,1,strpos(tabl,'.')-1);
	 tabl = substr(tabl,length(schem)+2);
	ELSE
	 schem = schem || '%';
	END IF;

	select SRID into sr from geometry_columns where f_table_schema like schem and f_table_name = tabl and f_geometry_column = $3;
	IF NOT FOUND THEN
	   RAISE EXCEPTION 'find_srid() - couldnt find the corresponding SRID - is the geometry registered in the GEOMETRY_COLUMNS table?  Is there an uppercase/lowercase missmatch?';
	END IF;
	return sr;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."find_srid"(IN varchar, IN varchar, IN varchar) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."find_srid"(IN varchar, IN varchar, IN varchar) IS 'args: a_schema_name, a_table_name, a_geomfield_name - The syntax is find_srid(a_db_schema, a_table, a_column) and the function returns the integer SRID of the specified column by searching through the GEOMETRY_COLUMNS table.';

-- ----------------------------
--  Function structure for public.get_proj4_from_srid(int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."get_proj4_from_srid"(int4);
CREATE FUNCTION "public"."get_proj4_from_srid"(IN int4) RETURNS "text" 
	AS $BODY$
BEGIN
	RETURN proj4text::text FROM spatial_ref_sys WHERE srid= $1;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."get_proj4_from_srid"(IN int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.postgis_transform_geometry("public"."geometry", text, text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_transform_geometry"("public"."geometry", text, text, int4);
CREATE FUNCTION "public"."postgis_transform_geometry"(IN "public"."geometry", IN text, IN text, IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','transform_geom'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_transform_geometry"(IN "public"."geometry", IN text, IN text, IN int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_transform("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_transform"("public"."geometry", int4);
CREATE FUNCTION "public"."st_transform"(IN "public"."geometry", IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','transform'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_transform"(IN "public"."geometry", IN int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_transform"(IN "public"."geometry", IN int4) IS 'args: g1, srid - Returns a new geometry with its coordinates transformed to the SRID referenced by the integer parameter.';

-- ----------------------------
--  Function structure for public.postgis_version()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_version"();
CREATE FUNCTION "public"."postgis_version"() RETURNS "text" 
	AS '$libdir/postgis-2.1','postgis_version'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_version"() OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."postgis_version"() IS 'Returns PostGIS version number and compile-time options.';

-- ----------------------------
--  Function structure for public.postgis_proj_version()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_proj_version"();
CREATE FUNCTION "public"."postgis_proj_version"() RETURNS "text" 
	AS '$libdir/postgis-2.1','postgis_proj_version'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_proj_version"() OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."postgis_proj_version"() IS 'Returns the version number of the PROJ4 library.';

-- ----------------------------
--  Function structure for public.postgis_scripts_installed()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_scripts_installed"();
CREATE FUNCTION "public"."postgis_scripts_installed"() RETURNS "text" 
	AS $BODY$ SELECT '2.1.0'::text || ' r' || 11822::text AS version $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_scripts_installed"() OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."postgis_scripts_installed"() IS 'Returns version of the postgis scripts installed in this database.';

-- ----------------------------
--  Function structure for public.postgis_lib_version()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_lib_version"();
CREATE FUNCTION "public"."postgis_lib_version"() RETURNS "text" 
	AS '$libdir/postgis-2.1','postgis_lib_version'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_lib_version"() OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."postgis_lib_version"() IS 'Returns the version number of the PostGIS library.';

-- ----------------------------
--  Function structure for public.postgis_scripts_released()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_scripts_released"();
CREATE FUNCTION "public"."postgis_scripts_released"() RETURNS "text" 
	AS '$libdir/postgis-2.1','postgis_scripts_released'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_scripts_released"() OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."postgis_scripts_released"() IS 'Returns the version number of the postgis.sql script released with the installed postgis lib.';

-- ----------------------------
--  Function structure for public.postgis_geos_version()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_geos_version"();
CREATE FUNCTION "public"."postgis_geos_version"() RETURNS "text" 
	AS '$libdir/postgis-2.1','postgis_geos_version'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_geos_version"() OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."postgis_geos_version"() IS 'Returns the version number of the GEOS library.';

-- ----------------------------
--  Function structure for public.postgis_svn_version()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_svn_version"();
CREATE FUNCTION "public"."postgis_svn_version"() RETURNS "text" 
	AS '$libdir/postgis-2.1','postgis_svn_version'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_svn_version"() OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.postgis_libxml_version()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_libxml_version"();
CREATE FUNCTION "public"."postgis_libxml_version"() RETURNS "text" 
	AS '$libdir/postgis-2.1','postgis_libxml_version'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_libxml_version"() OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."postgis_libxml_version"() IS 'Returns the version number of the libxml2 library.';

-- ----------------------------
--  Function structure for public.postgis_scripts_build_date()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_scripts_build_date"();
CREATE FUNCTION "public"."postgis_scripts_build_date"() RETURNS "text" 
	AS $BODY$SELECT '2014-03-03 22:01:48'::text AS version$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_scripts_build_date"() OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."postgis_scripts_build_date"() IS 'Returns build date of the PostGIS scripts.';

-- ----------------------------
--  Function structure for public.postgis_lib_build_date()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_lib_build_date"();
CREATE FUNCTION "public"."postgis_lib_build_date"() RETURNS "text" 
	AS '$libdir/postgis-2.1','postgis_lib_build_date'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_lib_build_date"() OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."postgis_lib_build_date"() IS 'Returns build date of the PostGIS library.';

-- ----------------------------
--  Function structure for public.postgis_full_version()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_full_version"();
CREATE FUNCTION "public"."postgis_full_version"() RETURNS "text" 
	AS $BODY$
DECLARE
	libver text;
	svnver text;
	projver text;
	geosver text;
	sfcgalver text;
	cgalver text;
	gdalver text;
	libxmlver text;
	dbproc text;
	relproc text;
	fullver text;
	rast_lib_ver text;
	rast_scr_ver text;
	topo_scr_ver text;
	json_lib_ver text;
BEGIN
	SELECT postgis_lib_version() INTO libver;
	SELECT postgis_proj_version() INTO projver;
	SELECT postgis_geos_version() INTO geosver;
	SELECT postgis_libjson_version() INTO json_lib_ver;
	BEGIN
		SELECT postgis_gdal_version() INTO gdalver;
	EXCEPTION
		WHEN undefined_function THEN
			gdalver := NULL;
			RAISE NOTICE 'Function postgis_gdal_version() not found.  Is raster support enabled and rtpostgis.sql installed?';
	END;
	BEGIN
		SELECT postgis_sfcgal_version() INTO sfcgalver;
	EXCEPTION
		WHEN undefined_function THEN
			sfcgalver := NULL;
	END;
	SELECT postgis_libxml_version() INTO libxmlver;
	SELECT postgis_scripts_installed() INTO dbproc;
	SELECT postgis_scripts_released() INTO relproc;
	select postgis_svn_version() INTO svnver;
	BEGIN
		SELECT postgis_topology_scripts_installed() INTO topo_scr_ver;
	EXCEPTION
		WHEN undefined_function THEN
			topo_scr_ver := NULL;
			RAISE NOTICE 'Function postgis_topology_scripts_installed() not found. Is topology support enabled and topology.sql installed?';
	END;

	BEGIN
		SELECT postgis_raster_scripts_installed() INTO rast_scr_ver;
	EXCEPTION
		WHEN undefined_function THEN
			rast_scr_ver := NULL;
			RAISE NOTICE 'Function postgis_raster_scripts_installed() not found. Is raster support enabled and rtpostgis.sql installed?';
	END;

	BEGIN
		SELECT postgis_raster_lib_version() INTO rast_lib_ver;
	EXCEPTION
		WHEN undefined_function THEN
			rast_lib_ver := NULL;
			RAISE NOTICE 'Function postgis_raster_lib_version() not found. Is raster support enabled and rtpostgis.sql installed?';
	END;

	fullver = 'POSTGIS="' || libver;

	IF  svnver IS NOT NULL THEN
		fullver = fullver || ' r' || svnver;
	END IF;

	fullver = fullver || '"';

	IF  geosver IS NOT NULL THEN
		fullver = fullver || ' GEOS="' || geosver || '"';
	END IF;

	IF  sfcgalver IS NOT NULL THEN
		fullver = fullver || ' SFCGAL="' || sfcgalver || '"';
	END IF;

	IF  projver IS NOT NULL THEN
		fullver = fullver || ' PROJ="' || projver || '"';
	END IF;

	IF  gdalver IS NOT NULL THEN
		fullver = fullver || ' GDAL="' || gdalver || '"';
	END IF;

	IF  libxmlver IS NOT NULL THEN
		fullver = fullver || ' LIBXML="' || libxmlver || '"';
	END IF;

	IF json_lib_ver IS NOT NULL THEN
		fullver = fullver || ' LIBJSON="' || json_lib_ver || '"';
	END IF;

	-- fullver = fullver || ' DBPROC="' || dbproc || '"';
	-- fullver = fullver || ' RELPROC="' || relproc || '"';

	IF dbproc != relproc THEN
		fullver = fullver || ' (core procs from "' || dbproc || '" need upgrade)';
	END IF;

	IF topo_scr_ver IS NOT NULL THEN
		fullver = fullver || ' TOPOLOGY';
		IF topo_scr_ver != relproc THEN
			fullver = fullver || ' (topology procs from "' || topo_scr_ver || '" need upgrade)';
		END IF;
	END IF;

	IF rast_lib_ver IS NOT NULL THEN
		fullver = fullver || ' RASTER';
		IF rast_lib_ver != relproc THEN
			fullver = fullver || ' (raster lib from "' || rast_lib_ver || '" need upgrade)';
		END IF;
	END IF;

	IF rast_scr_ver IS NOT NULL AND rast_scr_ver != relproc THEN
		fullver = fullver || ' (raster procs from "' || rast_scr_ver || '" need upgrade)';
	END IF;

	RETURN fullver;
END
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_full_version"() OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."postgis_full_version"() IS 'Reports full postgis version and build configuration infos.';

-- ----------------------------
--  Function structure for public.box2d("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."box2d"("public"."geometry");
CREATE FUNCTION "public"."box2d"(IN "public"."geometry") RETURNS "public"."box2d" 
	AS '$libdir/postgis-2.1','LWGEOM_to_BOX2D'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."box2d"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."box2d"(IN "public"."geometry") IS 'args: geomA - Returns a BOX2D representing the maximum extents of the geometry.';

-- ----------------------------
--  Function structure for public.box3d("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."box3d"("public"."geometry");
CREATE FUNCTION "public"."box3d"(IN "public"."geometry") RETURNS "public"."box3d" 
	AS '$libdir/postgis-2.1','LWGEOM_to_BOX3D'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."box3d"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."box3d"(IN "public"."geometry") IS 'args: geomA - Returns a BOX3D representing the maximum extents of the geometry.';

-- ----------------------------
--  Function structure for public.box("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."box"("public"."geometry");
CREATE FUNCTION "public"."box"(IN "public"."geometry") RETURNS "box" 
	AS '$libdir/postgis-2.1','LWGEOM_to_BOX'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."box"(IN "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry"(text);
CREATE FUNCTION "public"."geometry"(IN text) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','parse_WKT_lwgeom'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry"(IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry"(bytea);
CREATE FUNCTION "public"."geometry"(IN bytea) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_from_bytea'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry"(IN bytea) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.bytea("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."bytea"("public"."geometry");
CREATE FUNCTION "public"."bytea"(IN "public"."geometry") RETURNS "bytea" 
	AS '$libdir/postgis-2.1','LWGEOM_to_bytea'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."bytea"(IN "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_simplify("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_simplify"("public"."geometry", float8);
CREATE FUNCTION "public"."st_simplify"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_simplify2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_simplify"(IN "public"."geometry", IN float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_simplify"(IN "public"."geometry", IN float8) IS 'args: geomA, tolerance - Returns a "simplified" version of the given geometry using the Douglas-Peucker algorithm.';

-- ----------------------------
--  Function structure for public.st_snaptogrid("public"."geometry", float8, float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_snaptogrid"("public"."geometry", float8, float8, float8, float8);
CREATE FUNCTION "public"."st_snaptogrid"(IN "public"."geometry", IN float8, IN float8, IN float8, IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_snaptogrid'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_snaptogrid"(IN "public"."geometry", IN float8, IN float8, IN float8, IN float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_snaptogrid"(IN "public"."geometry", IN float8, IN float8, IN float8, IN float8) IS 'args: geomA, originX, originY, sizeX, sizeY - Snap all points of the input geometry to a regular grid.';

-- ----------------------------
--  Function structure for public.st_snaptogrid("public"."geometry", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_snaptogrid"("public"."geometry", float8, float8);
CREATE FUNCTION "public"."st_snaptogrid"(IN "public"."geometry", IN float8, IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_SnapToGrid($1, 0, 0, $2, $3)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_snaptogrid"(IN "public"."geometry", IN float8, IN float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_snaptogrid"(IN "public"."geometry", IN float8, IN float8) IS 'args: geomA, sizeX, sizeY - Snap all points of the input geometry to a regular grid.';

-- ----------------------------
--  Function structure for public.st_snaptogrid("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_snaptogrid"("public"."geometry", float8);
CREATE FUNCTION "public"."st_snaptogrid"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_SnapToGrid($1, 0, 0, $2, $2)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_snaptogrid"(IN "public"."geometry", IN float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_snaptogrid"(IN "public"."geometry", IN float8) IS 'args: geomA, size - Snap all points of the input geometry to a regular grid.';

-- ----------------------------
--  Function structure for public.st_snaptogrid("public"."geometry", "public"."geometry", float8, float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_snaptogrid"("public"."geometry", "public"."geometry", float8, float8, float8, float8);
CREATE FUNCTION "public"."st_snaptogrid"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8, IN float8, IN float8, IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_snaptogrid_pointoff'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_snaptogrid"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8, IN float8, IN float8, IN float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_snaptogrid"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8, IN float8, IN float8, IN float8) IS 'args: geomA, pointOrigin, sizeX, sizeY, sizeZ, sizeM - Snap all points of the input geometry to a regular grid.';

-- ----------------------------
--  Function structure for public.st_segmentize("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_segmentize"("public"."geometry", float8);
CREATE FUNCTION "public"."st_segmentize"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_segmentize2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_segmentize"(IN "public"."geometry", IN float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_segmentize"(IN "public"."geometry", IN float8) IS 'args: geom, max_segment_length - Return a modified geometry/geography having no segment longer than the given distance. Distance computation is performed in 2d only. For geometry, length units are in units of spatial reference. For geography, units are in meters.';

-- ----------------------------
--  Function structure for public.st_lineinterpolatepoint("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_lineinterpolatepoint"("public"."geometry", float8);
CREATE FUNCTION "public"."st_lineinterpolatepoint"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_line_interpolate_point'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_lineinterpolatepoint"(IN "public"."geometry", IN float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_lineinterpolatepoint"(IN "public"."geometry", IN float8) IS 'args: a_linestring, a_fraction - Returns a point interpolated along a line. Second argument is a float8 between 0 and 1 representing fraction of total length of linestring the point has to be located.';

-- ----------------------------
--  Function structure for public.st_line_interpolate_point("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_line_interpolate_point"("public"."geometry", float8);
CREATE FUNCTION "public"."st_line_interpolate_point"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS $BODY$ SELECT _postgis_deprecate('ST_Line_Interpolate_Point', 'ST_LineInterpolatePoint', '2.1.0');
    SELECT ST_LineInterpolatePoint($1, $2);
  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_line_interpolate_point"(IN "public"."geometry", IN float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_linesubstring("public"."geometry", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_linesubstring"("public"."geometry", float8, float8);
CREATE FUNCTION "public"."st_linesubstring"(IN "public"."geometry", IN float8, IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_line_substring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_linesubstring"(IN "public"."geometry", IN float8, IN float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_linesubstring"(IN "public"."geometry", IN float8, IN float8) IS 'args: a_linestring, startfraction, endfraction - Return a linestring being a substring of the input one starting and ending at the given fractions of total 2d length. Second and third arguments are float8 values between 0 and 1.';

-- ----------------------------
--  Function structure for public.st_line_substring("public"."geometry", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_line_substring"("public"."geometry", float8, float8);
CREATE FUNCTION "public"."st_line_substring"(IN "public"."geometry", IN float8, IN float8) RETURNS "public"."geometry" 
	AS $BODY$ SELECT _postgis_deprecate('ST_Line_Substring', 'ST_LineSubstring', '2.1.0');
     SELECT ST_LineSubstring($1, $2, $3);
  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_line_substring"(IN "public"."geometry", IN float8, IN float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_linelocatepoint("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_linelocatepoint"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_linelocatepoint"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-2.1','LWGEOM_line_locate_point'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_linelocatepoint"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_linelocatepoint"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: a_linestring, a_point - Returns a float between 0 and 1 representing the location of the closest point on LineString to the given Point, as a fraction of total 2d line length.';

-- ----------------------------
--  Function structure for public.st_line_locate_point("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_line_locate_point"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_line_locate_point"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "float8" 
	AS $BODY$ SELECT _postgis_deprecate('ST_Line_Locate_Point', 'ST_LineLocatePoint', '2.1.0');
     SELECT ST_LineLocatePoint($1, $2);
  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_line_locate_point"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_locate_between_measures("public"."geometry", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_locate_between_measures"("public"."geometry", float8, float8);
CREATE FUNCTION "public"."st_locate_between_measures"(IN "public"."geometry", IN float8, IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_locate_between_m'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_locate_between_measures"(IN "public"."geometry", IN float8, IN float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_locate_along_measure("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_locate_along_measure"("public"."geometry", float8);
CREATE FUNCTION "public"."st_locate_along_measure"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS $BODY$ SELECT ST_locate_between_measures($1, $2, $2) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_locate_along_measure"(IN "public"."geometry", IN float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_addmeasure("public"."geometry", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_addmeasure"("public"."geometry", float8, float8);
CREATE FUNCTION "public"."st_addmeasure"(IN "public"."geometry", IN float8, IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','ST_AddMeasure'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_addmeasure"(IN "public"."geometry", IN float8, IN float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_addmeasure"(IN "public"."geometry", IN float8, IN float8) IS 'args: geom_mline, measure_start, measure_end - Return a derived geometry with measure elements linearly interpolated between the start and end points. If the geometry has no measure dimension, one is added. If the geometry has a measure dimension, it is over-written with new values. Only LINESTRINGS and MULTILINESTRINGS are supported.';

-- ----------------------------
--  Function structure for public.st_intersection("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_intersection"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_intersection"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','intersection'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_intersection"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_intersection"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: geomA, geomB - (T) Returns a geometry that represents the shared portion of geomA and geomB. The geography implementation does a transform to geometry to do the intersection and then transform back to WGS84.';

-- ----------------------------
--  Function structure for public.st_buffer("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_buffer"("public"."geometry", float8);
CREATE FUNCTION "public"."st_buffer"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','buffer'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_buffer"(IN "public"."geometry", IN float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_buffer"(IN "public"."geometry", IN float8) IS 'args: g1, radius_of_buffer - (T) For geometry: Returns a geometry that represents all points whose distance from this Geometry is less than or equal to distance. Calculations are in the Spatial Reference System of this Geometry. For geography: Uses a planar transform wrapper. Introduced in 1.5 support for different end cap and mitre settings to control shape. buffer_style options: quad_segs=#,endcap=round|flat|square,join=round|mitre|bevel,mitre_limit=#.#';

-- ----------------------------
--  Function structure for public._st_buffer("public"."geometry", float8, cstring)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_buffer"("public"."geometry", float8, cstring);
CREATE FUNCTION "public"."_st_buffer"(IN "public"."geometry", IN float8, IN cstring) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','buffer'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_buffer"(IN "public"."geometry", IN float8, IN cstring) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_buffer("public"."geometry", float8, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_buffer"("public"."geometry", float8, int4);
CREATE FUNCTION "public"."st_buffer"(IN "public"."geometry", IN float8, IN int4) RETURNS "public"."geometry" 
	AS $BODY$ SELECT _ST_Buffer($1, $2,
		CAST('quad_segs='||CAST($3 AS text) as cstring))
	   $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_buffer"(IN "public"."geometry", IN float8, IN int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_buffer"(IN "public"."geometry", IN float8, IN int4) IS 'args: g1, radius_of_buffer, num_seg_quarter_circle - (T) For geometry: Returns a geometry that represents all points whose distance from this Geometry is less than or equal to distance. Calculations are in the Spatial Reference System of this Geometry. For geography: Uses a planar transform wrapper. Introduced in 1.5 support for different end cap and mitre settings to control shape. buffer_style options: quad_segs=#,endcap=round|flat|square,join=round|mitre|bevel,mitre_limit=#.#';

-- ----------------------------
--  Function structure for public.st_buffer("public"."geometry", float8, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_buffer"("public"."geometry", float8, text);
CREATE FUNCTION "public"."st_buffer"(IN "public"."geometry", IN float8, IN text) RETURNS "public"."geometry" 
	AS $BODY$ SELECT _ST_Buffer($1, $2,
		CAST( regexp_replace($3, '^[0123456789]+$',
			'quad_segs='||$3) AS cstring)
		)
	   $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_buffer"(IN "public"."geometry", IN float8, IN text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_buffer"(IN "public"."geometry", IN float8, IN text) IS 'args: g1, radius_of_buffer, buffer_style_parameters - (T) For geometry: Returns a geometry that represents all points whose distance from this Geometry is less than or equal to distance. Calculations are in the Spatial Reference System of this Geometry. For geography: Uses a planar transform wrapper. Introduced in 1.5 support for different end cap and mitre settings to control shape. buffer_style options: quad_segs=#,endcap=round|flat|square,join=round|mitre|bevel,mitre_limit=#.#';

-- ----------------------------
--  Function structure for public.st_offsetcurve("public"."geometry", float8, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_offsetcurve"("public"."geometry", float8, text);
CREATE FUNCTION "public"."st_offsetcurve"(IN line "public"."geometry", IN distance float8, IN params text DEFAULT ''::text) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','ST_OffsetCurve'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_offsetcurve"(IN line "public"."geometry", IN distance float8, IN params text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_offsetcurve"(IN line "public"."geometry", IN distance float8, IN params text) IS 'args: line, signed_distance, style_parameters='' - Return an offset line at a given distance and side from an input line. Useful for computing parallel lines about a center line';

-- ----------------------------
--  Function structure for public.st_convexhull("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_convexhull"("public"."geometry");
CREATE FUNCTION "public"."st_convexhull"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','convexhull'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_convexhull"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_convexhull"(IN "public"."geometry") IS 'args: geomA - The convex hull of a geometry represents the minimum convex geometry that encloses all geometries within the set.';

-- ----------------------------
--  Function structure for public._st_linecrossingdirection("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_linecrossingdirection"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."_st_linecrossingdirection"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "int4" 
	AS '$libdir/postgis-2.1','ST_LineCrossingDirection'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_linecrossingdirection"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_linecrossingdirection("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_linecrossingdirection"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_linecrossingdirection"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "int4" 
	AS $BODY$ SELECT CASE WHEN NOT $1 && $2 THEN 0 ELSE _ST_LineCrossingDirection($1,$2) END $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_linecrossingdirection"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_linecrossingdirection"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: linestringA, linestringB - Given 2 linestrings, returns a number between -3 and 3 denoting what kind of crossing behavior. 0 is no crossing.';

-- ----------------------------
--  Function structure for public.st_simplifypreservetopology("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_simplifypreservetopology"("public"."geometry", float8);
CREATE FUNCTION "public"."st_simplifypreservetopology"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','topologypreservesimplify'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_simplifypreservetopology"(IN "public"."geometry", IN float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_simplifypreservetopology"(IN "public"."geometry", IN float8) IS 'args: geomA, tolerance - Returns a "simplified" version of the given geometry using the Douglas-Peucker algorithm. Will avoid creating derived geometries (polygons in particular) that are invalid.';

-- ----------------------------
--  Function structure for public.st_isvalidreason("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_isvalidreason"("public"."geometry");
CREATE FUNCTION "public"."st_isvalidreason"(IN "public"."geometry") RETURNS "text" 
	AS '$libdir/postgis-2.1','isvalidreason'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_isvalidreason"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_isvalidreason"(IN "public"."geometry") IS 'args: geomA - Returns text stating if a geometry is valid or not and if not valid, a reason why.';

-- ----------------------------
--  Function structure for public.st_isvaliddetail("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_isvaliddetail"("public"."geometry");
CREATE FUNCTION "public"."st_isvaliddetail"(IN "public"."geometry") RETURNS "public"."valid_detail" 
	AS '$libdir/postgis-2.1','isvaliddetail'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_isvaliddetail"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_isvaliddetail"(IN "public"."geometry") IS 'args: geom - Returns a valid_detail (valid,reason,location) row stating if a geometry is valid or not and if not valid, a reason why and a location where.';

-- ----------------------------
--  Function structure for public.st_isvaliddetail("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_isvaliddetail"("public"."geometry", int4);
CREATE FUNCTION "public"."st_isvaliddetail"(IN "public"."geometry", IN int4) RETURNS "public"."valid_detail" 
	AS '$libdir/postgis-2.1','isvaliddetail'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_isvaliddetail"(IN "public"."geometry", IN int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_isvaliddetail"(IN "public"."geometry", IN int4) IS 'args: geom, flags - Returns a valid_detail (valid,reason,location) row stating if a geometry is valid or not and if not valid, a reason why and a location where.';

-- ----------------------------
--  Function structure for public.st_isvalidreason("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_isvalidreason"("public"."geometry", int4);
CREATE FUNCTION "public"."st_isvalidreason"(IN "public"."geometry", IN int4) RETURNS "text" 
	AS $BODY$
SELECT CASE WHEN valid THEN 'Valid Geometry' ELSE reason END FROM (
	SELECT (ST_isValidDetail($1, $2)).*
) foo
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_isvalidreason"(IN "public"."geometry", IN int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_isvalidreason"(IN "public"."geometry", IN int4) IS 'args: geomA, flags - Returns text stating if a geometry is valid or not and if not valid, a reason why.';

-- ----------------------------
--  Function structure for public.st_isvalid("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_isvalid"("public"."geometry", int4);
CREATE FUNCTION "public"."st_isvalid"(IN "public"."geometry", IN int4) RETURNS "bool" 
	AS $BODY$SELECT (ST_isValidDetail($1, $2)).valid$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_isvalid"(IN "public"."geometry", IN int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_isvalid"(IN "public"."geometry", IN int4) IS 'args: g, flags - Returns true if the ST_Geometry is well formed.';

-- ----------------------------
--  Function structure for public.st_hausdorffdistance("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_hausdorffdistance"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_hausdorffdistance"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-2.1','hausdorffdistance'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_hausdorffdistance"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_hausdorffdistance"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: g1, g2 - Returns the Hausdorff distance between two geometries. Basically a measure of how similar or dissimilar 2 geometries are. Units are in the units of the spatial reference system of the geometries.';

-- ----------------------------
--  Function structure for public.st_hausdorffdistance("public"."geometry", "public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_hausdorffdistance"("public"."geometry", "public"."geometry", float8);
CREATE FUNCTION "public"."st_hausdorffdistance"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) RETURNS "float8" 
	AS '$libdir/postgis-2.1','hausdorffdistancedensify'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_hausdorffdistance"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_hausdorffdistance"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) IS 'args: g1, g2, densifyFrac - Returns the Hausdorff distance between two geometries. Basically a measure of how similar or dissimilar 2 geometries are. Units are in the units of the spatial reference system of the geometries.';

-- ----------------------------
--  Function structure for public.st_difference("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_difference"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_difference"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','difference'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_difference"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_difference"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: geomA, geomB - Returns a geometry that represents that part of geometry A that does not intersect with geometry B.';

-- ----------------------------
--  Function structure for public.st_boundary("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_boundary"("public"."geometry");
CREATE FUNCTION "public"."st_boundary"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','boundary'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_boundary"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_boundary"(IN "public"."geometry") IS 'args: geomA - Returns the closure of the combinatorial boundary of this Geometry.';

-- ----------------------------
--  Function structure for public.st_symdifference("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_symdifference"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_symdifference"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','symdifference'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_symdifference"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_symdifference"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: geomA, geomB - Returns a geometry that represents the portions of A and B that do not intersect. It is called a symmetric difference because ST_SymDifference(A,B) = ST_SymDifference(B,A).';

-- ----------------------------
--  Function structure for public.st_symmetricdifference("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_symmetricdifference"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_symmetricdifference"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','symdifference'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_symmetricdifference"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_union("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_union"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_union"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','geomunion'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_union"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_union"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: g1, g2 - Returns a geometry that represents the point set union of the Geometries.';

-- ----------------------------
--  Function structure for public.st_unaryunion("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_unaryunion"("public"."geometry");
CREATE FUNCTION "public"."st_unaryunion"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','ST_UnaryUnion'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_unaryunion"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_unaryunion"(IN "public"."geometry") IS 'args: geom - Like ST_Union, but working at the geometry component level.';

-- ----------------------------
--  Function structure for public.st_removerepeatedpoints("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_removerepeatedpoints"("public"."geometry");
CREATE FUNCTION "public"."st_removerepeatedpoints"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','ST_RemoveRepeatedPoints'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_removerepeatedpoints"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_removerepeatedpoints"(IN "public"."geometry") IS 'args: geom - Returns a version of the given geometry with duplicated points removed.';

-- ----------------------------
--  Function structure for public.st_makevalid("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_makevalid"("public"."geometry");
CREATE FUNCTION "public"."st_makevalid"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','ST_MakeValid'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_makevalid"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_makevalid"(IN "public"."geometry") IS 'args: input - Attempts to make an invalid geometry valid without losing vertices.';

-- ----------------------------
--  Function structure for public.st_cleangeometry("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_cleangeometry"("public"."geometry");
CREATE FUNCTION "public"."st_cleangeometry"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','ST_CleanGeometry'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_cleangeometry"(IN "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_split("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_split"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_split"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','ST_Split'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_split"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_split"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: input, blade - Returns a collection of geometries resulting by splitting a geometry.';

-- ----------------------------
--  Function structure for public.st_sharedpaths("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_sharedpaths"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_sharedpaths"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','ST_SharedPaths'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_sharedpaths"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_sharedpaths"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: lineal1, lineal2 - Returns a collection containing paths shared by the two input linestrings/multilinestrings.';

-- ----------------------------
--  Function structure for public.st_snap("public"."geometry", "public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_snap"("public"."geometry", "public"."geometry", float8);
CREATE FUNCTION "public"."st_snap"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','ST_Snap'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_snap"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_snap"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) IS 'args: input, reference, tolerance - Snap segments and vertices of input geometry to vertices of a reference geometry.';

-- ----------------------------
--  Function structure for public.st_relatematch(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_relatematch"(text, text);
CREATE FUNCTION "public"."st_relatematch"(IN text, IN text) RETURNS "bool" 
	AS '$libdir/postgis-2.1','ST_RelateMatch'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_relatematch"(IN text, IN text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_relatematch"(IN text, IN text) IS 'args: intersectionMatrix, intersectionMatrixPattern - Returns true if intersectionMattrixPattern1 implies intersectionMatrixPattern2';

-- ----------------------------
--  Function structure for public.st_node("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_node"("public"."geometry");
CREATE FUNCTION "public"."st_node"(IN "g" "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','ST_Node'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_node"(IN "g" "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_node"(IN "g" "public"."geometry") IS 'args: geom - Node a set of linestrings.';

-- ----------------------------
--  Function structure for public.st_delaunaytriangles("public"."geometry", float8, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_delaunaytriangles"("public"."geometry", float8, int4);
CREATE FUNCTION "public"."st_delaunaytriangles"(IN g1 "public"."geometry", IN tolerance float8 DEFAULT 0.0, IN flags int4 DEFAULT 0) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','ST_DelaunayTriangles'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_delaunaytriangles"(IN g1 "public"."geometry", IN tolerance float8, IN flags int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_delaunaytriangles"(IN g1 "public"."geometry", IN tolerance float8, IN flags int4) IS 'args: g1, tolerance, flags - Return a Delaunay triangulation around the given input points.';

-- ----------------------------
--  Function structure for public.st_combine_bbox("public"."box3d", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_combine_bbox"("public"."box3d", "public"."geometry");
CREATE FUNCTION "public"."st_combine_bbox"(IN "public"."box3d", IN "public"."geometry") RETURNS "public"."box3d" 
	AS '$libdir/postgis-2.1','BOX3D_combine'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_combine_bbox"(IN "public"."box3d", IN "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_collect("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_collect"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_collect"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_collect'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_collect"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_collect"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: g1, g2 - Return a specified ST_Geometry value from a collection of other geometries.';

-- ----------------------------
--  Function structure for public.st_collect("public"."_geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_collect"("public"."_geometry");
CREATE FUNCTION "public"."st_collect"(IN "public"."_geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_collect_garray'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_collect"(IN "public"."_geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_collect"(IN "public"."_geometry") IS 'args: g1_array - Return a specified ST_Geometry value from a collection of other geometries.';

-- ----------------------------
--  Function structure for public.pgis_abs_in(cstring)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."pgis_abs_in"(cstring);
CREATE FUNCTION "public"."pgis_abs_in"(IN cstring) RETURNS "public"."pgis_abs" 
	AS '$libdir/postgis-2.1','pgis_abs_in'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."pgis_abs_in"(IN cstring) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.pgis_abs_out("public"."pgis_abs")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."pgis_abs_out"("public"."pgis_abs");
CREATE FUNCTION "public"."pgis_abs_out"(IN "public"."pgis_abs") RETURNS "cstring" 
	AS '$libdir/postgis-2.1','pgis_abs_out'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."pgis_abs_out"(IN "public"."pgis_abs") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.pgis_geometry_accum_transfn("public"."pgis_abs", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."pgis_geometry_accum_transfn"("public"."pgis_abs", "public"."geometry");
CREATE FUNCTION "public"."pgis_geometry_accum_transfn"(IN "public"."pgis_abs", IN "public"."geometry") RETURNS "public"."pgis_abs" 
	AS '$libdir/postgis-2.1','pgis_geometry_accum_transfn'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."pgis_geometry_accum_transfn"(IN "public"."pgis_abs", IN "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.pgis_geometry_accum_finalfn("public"."pgis_abs")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."pgis_geometry_accum_finalfn"("public"."pgis_abs");
CREATE FUNCTION "public"."pgis_geometry_accum_finalfn"(IN "public"."pgis_abs") RETURNS "public"."_geometry" 
	AS '$libdir/postgis-2.1','pgis_geometry_accum_finalfn'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."pgis_geometry_accum_finalfn"(IN "public"."pgis_abs") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.pgis_geometry_union_finalfn("public"."pgis_abs")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."pgis_geometry_union_finalfn"("public"."pgis_abs");
CREATE FUNCTION "public"."pgis_geometry_union_finalfn"(IN "public"."pgis_abs") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','pgis_geometry_union_finalfn'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."pgis_geometry_union_finalfn"(IN "public"."pgis_abs") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.pgis_geometry_collect_finalfn("public"."pgis_abs")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."pgis_geometry_collect_finalfn"("public"."pgis_abs");
CREATE FUNCTION "public"."pgis_geometry_collect_finalfn"(IN "public"."pgis_abs") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','pgis_geometry_collect_finalfn'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."pgis_geometry_collect_finalfn"(IN "public"."pgis_abs") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.pgis_geometry_polygonize_finalfn("public"."pgis_abs")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."pgis_geometry_polygonize_finalfn"("public"."pgis_abs");
CREATE FUNCTION "public"."pgis_geometry_polygonize_finalfn"(IN "public"."pgis_abs") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','pgis_geometry_polygonize_finalfn'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."pgis_geometry_polygonize_finalfn"(IN "public"."pgis_abs") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.pgis_geometry_makeline_finalfn("public"."pgis_abs")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."pgis_geometry_makeline_finalfn"("public"."pgis_abs");
CREATE FUNCTION "public"."pgis_geometry_makeline_finalfn"(IN "public"."pgis_abs") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','pgis_geometry_makeline_finalfn'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."pgis_geometry_makeline_finalfn"(IN "public"."pgis_abs") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_union("public"."_geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_union"("public"."_geometry");
CREATE FUNCTION "public"."st_union"(IN "public"."_geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','pgis_union_geometry_array'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_union"(IN "public"."_geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_union"(IN "public"."_geometry") IS 'args: g1_array - Returns a geometry that represents the point set union of the Geometries.';

-- ----------------------------
--  Function structure for public.st_relate("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_relate"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_relate"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "text" 
	AS '$libdir/postgis-2.1','relate_full'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_relate"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_relate"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: geomA, geomB - Returns true if this Geometry is spatially related to anotherGeometry, by testing for intersections between the Interior, Boundary and Exterior of the two geometries as specified by the values in the intersectionMatrixPattern. If no intersectionMatrixPattern is passed in, then returns the maximum intersectionMatrixPattern that relates the 2 geometries.';

-- ----------------------------
--  Function structure for public.st_relate("public"."geometry", "public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_relate"("public"."geometry", "public"."geometry", int4);
CREATE FUNCTION "public"."st_relate"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN int4) RETURNS "text" 
	AS '$libdir/postgis-2.1','relate_full'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_relate"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_relate"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN int4) IS 'args: geomA, geomB, BoundaryNodeRule - Returns true if this Geometry is spatially related to anotherGeometry, by testing for intersections between the Interior, Boundary and Exterior of the two geometries as specified by the values in the intersectionMatrixPattern. If no intersectionMatrixPattern is passed in, then returns the maximum intersectionMatrixPattern that relates the 2 geometries.';

-- ----------------------------
--  Function structure for public.st_relate("public"."geometry", "public"."geometry", text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_relate"("public"."geometry", "public"."geometry", text);
CREATE FUNCTION "public"."st_relate"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN text) RETURNS "bool" 
	AS '$libdir/postgis-2.1','relate_pattern'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_relate"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_relate"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN text) IS 'args: geomA, geomB, intersectionMatrixPattern - Returns true if this Geometry is spatially related to anotherGeometry, by testing for intersections between the Interior, Boundary and Exterior of the two geometries as specified by the values in the intersectionMatrixPattern. If no intersectionMatrixPattern is passed in, then returns the maximum intersectionMatrixPattern that relates the 2 geometries.';

-- ----------------------------
--  Function structure for public.st_disjoint("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_disjoint"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_disjoint"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.1','disjoint'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_disjoint"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_disjoint"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: A, B - Returns TRUE if the Geometries do not "spatially intersect" - if they do not share any space together.';

-- ----------------------------
--  Function structure for public._st_touches("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_touches"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."_st_touches"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.1','touches'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_touches"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_touches("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_touches"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_touches"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS $BODY$SELECT $1 && $2 AND _ST_Touches($1,$2)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_touches"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_touches"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: g1, g2 - Returns TRUE if the geometries have at least one point in common, but their interiors do not intersect.';

-- ----------------------------
--  Function structure for public._st_dwithin("public"."geometry", "public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_dwithin"("public"."geometry", "public"."geometry", float8);
CREATE FUNCTION "public"."_st_dwithin"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) RETURNS "bool" 
	AS '$libdir/postgis-2.1','LWGEOM_dwithin'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_dwithin"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_dwithin("public"."geometry", "public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_dwithin"("public"."geometry", "public"."geometry", float8);
CREATE FUNCTION "public"."st_dwithin"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) RETURNS "bool" 
	AS $BODY$SELECT $1 && ST_Expand($2,$3) AND $2 && ST_Expand($1,$3) AND _ST_DWithin($1, $2, $3)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_dwithin"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_dwithin"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) IS 'args: g1, g2, distance_of_srid - Returns true if the geometries are within the specified distance of one another. For geometry units are in those of spatial reference and For geography units are in meters and measurement is defaulted to use_spheroid=true (measure around spheroid), for faster check, use_spheroid=false to measure along sphere.';

-- ----------------------------
--  Function structure for public._st_intersects("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_intersects"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."_st_intersects"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.1','intersects'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_intersects"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_intersects("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_intersects"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_intersects"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS $BODY$SELECT $1 && $2 AND _ST_Intersects($1,$2)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_intersects"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_intersects"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: geomA, geomB - Returns TRUE if the Geometries/Geography "spatially intersect in 2D" - (share any portion of space) and FALSE if they dont (they are Disjoint). For geography -- tolerance is 0.00001 meters (so any points that close are considered to intersect)';

-- ----------------------------
--  Function structure for public._st_crosses("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_crosses"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."_st_crosses"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.1','crosses'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_crosses"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_crosses("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_crosses"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_crosses"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS $BODY$SELECT $1 && $2 AND _ST_Crosses($1,$2)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_crosses"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_crosses"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: g1, g2 - Returns TRUE if the supplied geometries have some, but not all, interior points in common.';

-- ----------------------------
--  Function structure for public._st_contains("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_contains"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."_st_contains"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.1','contains'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_contains"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_contains("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_contains"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_contains"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS $BODY$SELECT $1 && $2 AND _ST_Contains($1,$2)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_contains"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_contains"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: geomA, geomB - Returns true if and only if no points of B lie in the exterior of A, and at least one point of the interior of B lies in the interior of A.';

-- ----------------------------
--  Function structure for public._st_coveredby("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_coveredby"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."_st_coveredby"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.1','coveredby'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_coveredby"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_coveredby("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_coveredby"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_coveredby"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS $BODY$SELECT $1 && $2 AND _ST_CoveredBy($1,$2)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_coveredby"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_coveredby"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: geomA, geomB - Returns 1 (TRUE) if no point in Geometry/Geography A is outside Geometry/Geography B';

-- ----------------------------
--  Function structure for public._st_covers("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_covers"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."_st_covers"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.1','covers'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_covers"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_covers("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_covers"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_covers"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS $BODY$SELECT $1 && $2 AND _ST_Covers($1,$2)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_covers"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_covers"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: geomA, geomB - Returns 1 (TRUE) if no point in Geometry B is outside Geometry A';

-- ----------------------------
--  Function structure for public._st_containsproperly("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_containsproperly"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."_st_containsproperly"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.1','containsproperly'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_containsproperly"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_containsproperly("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_containsproperly"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_containsproperly"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS $BODY$SELECT $1 && $2 AND _ST_ContainsProperly($1,$2)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_containsproperly"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_containsproperly"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: geomA, geomB - Returns true if B intersects the interior of A but not the boundary (or exterior). A does not contain properly itself, but does contain itself.';

-- ----------------------------
--  Function structure for public._st_overlaps("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_overlaps"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."_st_overlaps"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.1','overlaps'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_overlaps"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._st_within("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_within"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."_st_within"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS $BODY$SELECT _ST_Contains($2,$1)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_within"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_within("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_within"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_within"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS $BODY$SELECT $1 && $2 AND _ST_Contains($2,$1)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_within"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_within"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: A, B - Returns true if the geometry A is completely inside geometry B';

-- ----------------------------
--  Function structure for public.st_overlaps("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_overlaps"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_overlaps"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS $BODY$SELECT $1 && $2 AND _ST_Overlaps($1,$2)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_overlaps"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_overlaps"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: A, B - Returns TRUE if the Geometries share space, are of the same dimension, but are not completely contained by each other.';

-- ----------------------------
--  Function structure for public.st_isvalid("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_isvalid"("public"."geometry");
CREATE FUNCTION "public"."st_isvalid"(IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.1','isvalid'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_isvalid"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_isvalid"(IN "public"."geometry") IS 'args: g - Returns true if the ST_Geometry is well formed.';

-- ----------------------------
--  Function structure for public.st_centroid("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_centroid"("public"."geometry");
CREATE FUNCTION "public"."st_centroid"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','centroid'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_centroid"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_centroid"(IN "public"."geometry") IS 'args: g1 - Returns the geometric center of a geometry.';

-- ----------------------------
--  Function structure for public.st_isring("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_isring"("public"."geometry");
CREATE FUNCTION "public"."st_isring"(IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.1','isring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_isring"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_isring"(IN "public"."geometry") IS 'args: g - Returns TRUE if this LINESTRING is both closed and simple.';

-- ----------------------------
--  Function structure for public.st_pointonsurface("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_pointonsurface"("public"."geometry");
CREATE FUNCTION "public"."st_pointonsurface"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','pointonsurface'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_pointonsurface"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_pointonsurface"(IN "public"."geometry") IS 'args: g1 - Returns a POINT guaranteed to lie on the surface.';

-- ----------------------------
--  Function structure for public.st_issimple("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_issimple"("public"."geometry");
CREATE FUNCTION "public"."st_issimple"(IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.1','issimple'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_issimple"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_issimple"(IN "public"."geometry") IS 'args: geomA - Returns (TRUE) if this Geometry has no anomalous geometric points, such as self intersection or self tangency.';

-- ----------------------------
--  Function structure for public.st_iscollection("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_iscollection"("public"."geometry");
CREATE FUNCTION "public"."st_iscollection"(IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.1','ST_IsCollection'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_iscollection"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_iscollection"(IN "public"."geometry") IS 'args: g - Returns TRUE if the argument is a collection (MULTI*, GEOMETRYCOLLECTION, ...)';

-- ----------------------------
--  Function structure for public._st_equals("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_equals"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."_st_equals"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.1','ST_Equals'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_equals"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_equals("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_equals"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_equals"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS $BODY$SELECT $1 ~= $2 AND _ST_Equals($1,$2)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_equals"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_equals"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: A, B - Returns true if the given geometries represent the same geometry. Directionality is ignored.';

-- ----------------------------
--  Function structure for public.equals("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."equals"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."equals"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.1','ST_Equals'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."equals"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._st_geomfromgml(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_geomfromgml"(text, int4);
CREATE FUNCTION "public"."_st_geomfromgml"(IN text, IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','geom_from_gml'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_geomfromgml"(IN text, IN int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_geomfromgml(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geomfromgml"(text, int4);
CREATE FUNCTION "public"."st_geomfromgml"(IN text, IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','geom_from_gml'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geomfromgml"(IN text, IN int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_geomfromgml"(IN text, IN int4) IS 'args: geomgml, srid - Takes as input GML representation of geometry and outputs a PostGIS geometry object';

-- ----------------------------
--  Function structure for public.st_geomfromgml(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geomfromgml"(text);
CREATE FUNCTION "public"."st_geomfromgml"(IN text) RETURNS "public"."geometry" 
	AS $BODY$SELECT _ST_GeomFromGML($1, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geomfromgml"(IN text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_geomfromgml"(IN text) IS 'args: geomgml - Takes as input GML representation of geometry and outputs a PostGIS geometry object';

-- ----------------------------
--  Function structure for public.st_gmltosql(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_gmltosql"(text);
CREATE FUNCTION "public"."st_gmltosql"(IN text) RETURNS "public"."geometry" 
	AS $BODY$SELECT _ST_GeomFromGML($1, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_gmltosql"(IN text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_gmltosql"(IN text) IS 'args: geomgml - Return a specified ST_Geometry value from GML representation. This is an alias name for ST_GeomFromGML';

-- ----------------------------
--  Function structure for public.st_gmltosql(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_gmltosql"(text, int4);
CREATE FUNCTION "public"."st_gmltosql"(IN text, IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','geom_from_gml'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_gmltosql"(IN text, IN int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_gmltosql"(IN text, IN int4) IS 'args: geomgml, srid - Return a specified ST_Geometry value from GML representation. This is an alias name for ST_GeomFromGML';

-- ----------------------------
--  Function structure for public.st_geomfromkml(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geomfromkml"(text);
CREATE FUNCTION "public"."st_geomfromkml"(IN text) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','geom_from_kml'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geomfromkml"(IN text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_geomfromkml"(IN text) IS 'args: geomkml - Takes as input KML representation of geometry and outputs a PostGIS geometry object';

-- ----------------------------
--  Function structure for public.st_geomfromgeojson(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geomfromgeojson"(text);
CREATE FUNCTION "public"."st_geomfromgeojson"(IN text) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','geom_from_geojson'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geomfromgeojson"(IN text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_geomfromgeojson"(IN text) IS 'args: geomjson - Takes as input a geojson representation of a geometry and outputs a PostGIS geometry object';

-- ----------------------------
--  Function structure for public.postgis_libjson_version()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_libjson_version"();
CREATE FUNCTION "public"."postgis_libjson_version"() RETURNS "text" 
	AS '$libdir/postgis-2.1','postgis_libjson_version'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_libjson_version"() OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_assvg("public"."geometry", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_assvg"("public"."geometry", int4, int4);
CREATE FUNCTION "public"."st_assvg"(IN geom "public"."geometry", IN rel int4 DEFAULT 0, IN maxdecimaldigits int4 DEFAULT 15) RETURNS "text" 
	AS '$libdir/postgis-2.1','LWGEOM_asSVG'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_assvg"(IN geom "public"."geometry", IN rel int4, IN maxdecimaldigits int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_assvg"(IN geom "public"."geometry", IN rel int4, IN maxdecimaldigits int4) IS 'args: geom, rel=0, maxdecimaldigits=15 - Returns a Geometry in SVG path data given a geometry or geography object.';

-- ----------------------------
--  Function structure for public._st_asgml(int4, "public"."geometry", int4, int4, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_asgml"(int4, "public"."geometry", int4, int4, text, text);
CREATE FUNCTION "public"."_st_asgml"(IN int4, IN "public"."geometry", IN int4, IN int4, IN text, IN text) RETURNS "text" 
	AS '$libdir/postgis-2.1','LWGEOM_asGML'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_asgml"(IN int4, IN "public"."geometry", IN int4, IN int4, IN text, IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_asgml("public"."geometry", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asgml"("public"."geometry", int4, int4);
CREATE FUNCTION "public"."st_asgml"(IN geom "public"."geometry", IN maxdecimaldigits int4 DEFAULT 15, IN "options" int4 DEFAULT 0) RETURNS "text" 
	AS $BODY$ SELECT _ST_AsGML(2, $1, $2, $3, null, null); $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asgml"(IN geom "public"."geometry", IN maxdecimaldigits int4, IN "options" int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_asgml(int4, "public"."geometry", int4, int4, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asgml"(int4, "public"."geometry", int4, int4, text, text);
CREATE FUNCTION "public"."st_asgml"(IN "version" int4, IN geom "public"."geometry", IN maxdecimaldigits int4 DEFAULT 15, IN "options" int4 DEFAULT 0, IN nprefix text DEFAULT NULL::text, IN "id" text DEFAULT NULL::text) RETURNS "text" 
	AS $BODY$ SELECT _ST_AsGML($1, $2, $3, $4, $5, $6); $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asgml"(IN "version" int4, IN geom "public"."geometry", IN maxdecimaldigits int4, IN "options" int4, IN nprefix text, IN "id" text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_asgml"(IN "version" int4, IN geom "public"."geometry", IN maxdecimaldigits int4, IN "options" int4, IN nprefix text, IN "id" text) IS 'args: version, geom, maxdecimaldigits=15, options=0, nprefix=null, id=null - Return the geometry as a GML version 2 or 3 element.';

-- ----------------------------
--  Function structure for public._st_askml(int4, "public"."geometry", int4, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_askml"(int4, "public"."geometry", int4, text);
CREATE FUNCTION "public"."_st_askml"(IN int4, IN "public"."geometry", IN int4, IN text) RETURNS "text" 
	AS '$libdir/postgis-2.1','LWGEOM_asKML'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_askml"(IN int4, IN "public"."geometry", IN int4, IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_askml("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_askml"("public"."geometry", int4);
CREATE FUNCTION "public"."st_askml"(IN geom "public"."geometry", IN maxdecimaldigits int4 DEFAULT 15) RETURNS "text" 
	AS $BODY$ SELECT _ST_AsKML(2, ST_Transform($1,4326), $2, null); $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_askml"(IN geom "public"."geometry", IN maxdecimaldigits int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_askml"(IN geom "public"."geometry", IN maxdecimaldigits int4) IS 'args: geom, maxdecimaldigits=15 - Return the geometry as a KML element. Several variants. Default version=2, default precision=15';

-- ----------------------------
--  Function structure for public.st_askml(int4, "public"."geometry", int4, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_askml"(int4, "public"."geometry", int4, text);
CREATE FUNCTION "public"."st_askml"(IN "version" int4, IN geom "public"."geometry", IN maxdecimaldigits int4 DEFAULT 15, IN nprefix text DEFAULT NULL::text) RETURNS "text" 
	AS $BODY$ SELECT _ST_AsKML($1, ST_Transform($2,4326), $3, $4); $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_askml"(IN "version" int4, IN geom "public"."geometry", IN maxdecimaldigits int4, IN nprefix text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_askml"(IN "version" int4, IN geom "public"."geometry", IN maxdecimaldigits int4, IN nprefix text) IS 'args: version, geom, maxdecimaldigits=15, nprefix=NULL - Return the geometry as a KML element. Several variants. Default version=2, default precision=15';

-- ----------------------------
--  Function structure for public._st_asgeojson(int4, "public"."geometry", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_asgeojson"(int4, "public"."geometry", int4, int4);
CREATE FUNCTION "public"."_st_asgeojson"(IN int4, IN "public"."geometry", IN int4, IN int4) RETURNS "text" 
	AS '$libdir/postgis-2.1','LWGEOM_asGeoJson'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_asgeojson"(IN int4, IN "public"."geometry", IN int4, IN int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_asgeojson("public"."geometry", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asgeojson"("public"."geometry", int4, int4);
CREATE FUNCTION "public"."st_asgeojson"(IN geom "public"."geometry", IN maxdecimaldigits int4 DEFAULT 15, IN "options" int4 DEFAULT 0) RETURNS "text" 
	AS $BODY$ SELECT _ST_AsGeoJson(1, $1, $2, $3); $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asgeojson"(IN geom "public"."geometry", IN maxdecimaldigits int4, IN "options" int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_asgeojson"(IN geom "public"."geometry", IN maxdecimaldigits int4, IN "options" int4) IS 'args: geom, maxdecimaldigits=15, options=0 - Return the geometry as a GeoJSON element.';

-- ----------------------------
--  Function structure for public.st_asgeojson(int4, "public"."geometry", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asgeojson"(int4, "public"."geometry", int4, int4);
CREATE FUNCTION "public"."st_asgeojson"(IN gj_version int4, IN geom "public"."geometry", IN maxdecimaldigits int4 DEFAULT 15, IN "options" int4 DEFAULT 0) RETURNS "text" 
	AS $BODY$ SELECT _ST_AsGeoJson($1, $2, $3, $4); $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asgeojson"(IN gj_version int4, IN geom "public"."geometry", IN maxdecimaldigits int4, IN "options" int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_asgeojson"(IN gj_version int4, IN geom "public"."geometry", IN maxdecimaldigits int4, IN "options" int4) IS 'args: gj_version, geom, maxdecimaldigits=15, options=0 - Return the geometry as a GeoJSON element.';

-- ----------------------------
--  Function structure for public.geography_recv(internal, oid, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography_recv"(internal, oid, int4);
CREATE FUNCTION "public"."geography_recv"(IN internal, IN oid, IN int4) RETURNS "public"."geography" 
	AS '$libdir/postgis-2.1','geography_recv'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geography_recv"(IN internal, IN oid, IN int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_geohash("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geohash"("public"."geometry", int4);
CREATE FUNCTION "public"."st_geohash"(IN geom "public"."geometry", IN maxchars int4 DEFAULT 0) RETURNS "text" 
	AS '$libdir/postgis-2.1','ST_GeoHash'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geohash"(IN geom "public"."geometry", IN maxchars int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_geohash"(IN geom "public"."geometry", IN maxchars int4) IS 'args: geom, maxchars=full_precision_of_point - Return a GeoHash representation of the geometry.';

-- ----------------------------
--  Function structure for public.st_box2dfromgeohash(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_box2dfromgeohash"(text, int4);
CREATE FUNCTION "public"."st_box2dfromgeohash"(IN text, IN int4 DEFAULT NULL::integer) RETURNS "public"."box2d" 
	AS '$libdir/postgis-2.1','box2d_from_geohash'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_box2dfromgeohash"(IN text, IN int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_box2dfromgeohash"(IN text, IN int4) IS 'args: geohash, precision=full_precision_of_geohash - Return a BOX2D from a GeoHash string.';

-- ----------------------------
--  Function structure for public.st_pointfromgeohash(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_pointfromgeohash"(text, int4);
CREATE FUNCTION "public"."st_pointfromgeohash"(IN text, IN int4 DEFAULT NULL::integer) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','point_from_geohash'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_pointfromgeohash"(IN text, IN int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_pointfromgeohash"(IN text, IN int4) IS 'args: geohash, precision=full_precision_of_geohash - Return a point from a GeoHash string.';

-- ----------------------------
--  Function structure for public.st_geomfromgeohash(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geomfromgeohash"(text, int4);
CREATE FUNCTION "public"."st_geomfromgeohash"(IN text, IN int4 DEFAULT NULL::integer) RETURNS "public"."geometry" 
	AS $BODY$ SELECT CAST(ST_Box2dFromGeoHash($1, $2) AS geometry); $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geomfromgeohash"(IN text, IN int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_geomfromgeohash"(IN text, IN int4) IS 'args: geohash, precision=full_precision_of_geohash - Return a geometry from a GeoHash string.';

-- ----------------------------
--  Function structure for public.st_numpoints("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_numpoints"("public"."geometry");
CREATE FUNCTION "public"."st_numpoints"(IN "public"."geometry") RETURNS "int4" 
	AS '$libdir/postgis-2.1','LWGEOM_numpoints_linestring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_numpoints"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_numpoints"(IN "public"."geometry") IS 'args: g1 - Return the number of points in an ST_LineString or ST_CircularString value.';

-- ----------------------------
--  Function structure for public.st_numgeometries("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_numgeometries"("public"."geometry");
CREATE FUNCTION "public"."st_numgeometries"(IN "public"."geometry") RETURNS "int4" 
	AS '$libdir/postgis-2.1','LWGEOM_numgeometries_collection'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_numgeometries"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_numgeometries"(IN "public"."geometry") IS 'args: geom - If geometry is a GEOMETRYCOLLECTION (or MULTI*) return the number of geometries, for single geometries will return 1, otherwise return NULL.';

-- ----------------------------
--  Function structure for public.st_geometryn("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geometryn"("public"."geometry", int4);
CREATE FUNCTION "public"."st_geometryn"(IN "public"."geometry", IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_geometryn_collection'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geometryn"(IN "public"."geometry", IN int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_geometryn"(IN "public"."geometry", IN int4) IS 'args: geomA, n - Return the 1-based Nth geometry if the geometry is a GEOMETRYCOLLECTION, (MULTI)POINT, (MULTI)LINESTRING, MULTICURVE or (MULTI)POLYGON, POLYHEDRALSURFACE Otherwise, return NULL.';

-- ----------------------------
--  Function structure for public.st_dimension("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_dimension"("public"."geometry");
CREATE FUNCTION "public"."st_dimension"(IN "public"."geometry") RETURNS "int4" 
	AS '$libdir/postgis-2.1','LWGEOM_dimension'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_dimension"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_dimension"(IN "public"."geometry") IS 'args: g - The inherent dimension of this Geometry object, which must be less than or equal to the coordinate dimension.';

-- ----------------------------
--  Function structure for public.st_exteriorring("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_exteriorring"("public"."geometry");
CREATE FUNCTION "public"."st_exteriorring"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_exteriorring_polygon'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_exteriorring"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_exteriorring"(IN "public"."geometry") IS 'args: a_polygon - Returns a line string representing the exterior ring of the POLYGON geometry. Return NULL if the geometry is not a polygon. Will not work with MULTIPOLYGON';

-- ----------------------------
--  Function structure for public.st_numinteriorrings("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_numinteriorrings"("public"."geometry");
CREATE FUNCTION "public"."st_numinteriorrings"(IN "public"."geometry") RETURNS "int4" 
	AS '$libdir/postgis-2.1','LWGEOM_numinteriorrings_polygon'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_numinteriorrings"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_numinteriorrings"(IN "public"."geometry") IS 'args: a_polygon - Return the number of interior rings of the first polygon in the geometry. This will work with both POLYGON and MULTIPOLYGON types but only looks at the first polygon. Return NULL if there is no polygon in the geometry.';

-- ----------------------------
--  Function structure for public.st_numinteriorring("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_numinteriorring"("public"."geometry");
CREATE FUNCTION "public"."st_numinteriorring"(IN "public"."geometry") RETURNS "int4" 
	AS '$libdir/postgis-2.1','LWGEOM_numinteriorrings_polygon'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_numinteriorring"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_numinteriorring"(IN "public"."geometry") IS 'args: a_polygon - Return the number of interior rings of the first polygon in the geometry. Synonym to ST_NumInteriorRings.';

-- ----------------------------
--  Function structure for public.st_interiorringn("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_interiorringn"("public"."geometry", int4);
CREATE FUNCTION "public"."st_interiorringn"(IN "public"."geometry", IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_interiorringn_polygon'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_interiorringn"(IN "public"."geometry", IN int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_interiorringn"(IN "public"."geometry", IN int4) IS 'args: a_polygon, n - Return the Nth interior linestring ring of the polygon geometry. Return NULL if the geometry is not a polygon or the given N is out of range.';

-- ----------------------------
--  Function structure for public.geometrytype("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometrytype"("public"."geometry");
CREATE FUNCTION "public"."geometrytype"(IN "public"."geometry") RETURNS "text" 
	AS '$libdir/postgis-2.1','LWGEOM_getTYPE'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometrytype"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."geometrytype"(IN "public"."geometry") IS 'args: geomA - Returns the type of the geometry as a string. Eg: LINESTRING, POLYGON, MULTIPOINT, etc.';

-- ----------------------------
--  Function structure for public.st_geometrytype("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geometrytype"("public"."geometry");
CREATE FUNCTION "public"."st_geometrytype"(IN "public"."geometry") RETURNS "text" 
	AS '$libdir/postgis-2.1','geometry_geometrytype'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geometrytype"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_geometrytype"(IN "public"."geometry") IS 'args: g1 - Return the geometry type of the ST_Geometry value.';

-- ----------------------------
--  Function structure for public.st_pointn("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_pointn"("public"."geometry", int4);
CREATE FUNCTION "public"."st_pointn"(IN "public"."geometry", IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_pointn_linestring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_pointn"(IN "public"."geometry", IN int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_pointn"(IN "public"."geometry", IN int4) IS 'args: a_linestring, n - Return the Nth point in the first linestring or circular linestring in the geometry. Return NULL if there is no linestring in the geometry.';

-- ----------------------------
--  Function structure for public.st_numpatches("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_numpatches"("public"."geometry");
CREATE FUNCTION "public"."st_numpatches"(IN "public"."geometry") RETURNS "int4" 
	AS $BODY$
	SELECT CASE WHEN ST_GeometryType($1) = 'ST_PolyhedralSurface'
	THEN ST_NumGeometries($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_numpatches"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_numpatches"(IN "public"."geometry") IS 'args: g1 - Return the number of faces on a Polyhedral Surface. Will return null for non-polyhedral geometries.';

-- ----------------------------
--  Function structure for public.st_patchn("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_patchn"("public"."geometry", int4);
CREATE FUNCTION "public"."st_patchn"(IN "public"."geometry", IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN ST_GeometryType($1) = 'ST_PolyhedralSurface'
	THEN ST_GeometryN($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_patchn"(IN "public"."geometry", IN int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_patchn"(IN "public"."geometry", IN int4) IS 'args: geomA, n - Return the 1-based Nth geometry (face) if the geometry is a POLYHEDRALSURFACE, POLYHEDRALSURFACEM. Otherwise, return NULL.';

-- ----------------------------
--  Function structure for public.st_startpoint("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_startpoint"("public"."geometry");
CREATE FUNCTION "public"."st_startpoint"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_startpoint_linestring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_startpoint"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_startpoint"(IN "public"."geometry") IS 'args: geomA - Returns the first point of a LINESTRING geometry as a POINT.';

-- ----------------------------
--  Function structure for public.st_endpoint("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_endpoint"("public"."geometry");
CREATE FUNCTION "public"."st_endpoint"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_endpoint_linestring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_endpoint"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_endpoint"(IN "public"."geometry") IS 'args: g - Returns the last point of a LINESTRING geometry as a POINT.';

-- ----------------------------
--  Function structure for public.st_isclosed("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_isclosed"("public"."geometry");
CREATE FUNCTION "public"."st_isclosed"(IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.1','LWGEOM_isclosed'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_isclosed"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_isclosed"(IN "public"."geometry") IS 'args: g - Returns TRUE if the LINESTRINGs start and end points are coincident. For Polyhedral surface is closed (volumetric).';

-- ----------------------------
--  Function structure for public.st_isempty("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_isempty"("public"."geometry");
CREATE FUNCTION "public"."st_isempty"(IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.1','LWGEOM_isempty'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_isempty"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_isempty"(IN "public"."geometry") IS 'args: geomA - Returns true if this Geometry is an empty geometrycollection, polygon, point etc.';

-- ----------------------------
--  Function structure for public.st_srid("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_srid"("public"."geometry");
CREATE FUNCTION "public"."st_srid"(IN "public"."geometry") RETURNS "int4" 
	AS '$libdir/postgis-2.1','LWGEOM_get_srid'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_srid"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_srid"(IN "public"."geometry") IS 'args: g1 - Returns the spatial reference identifier for the ST_Geometry as defined in spatial_ref_sys table.';

-- ----------------------------
--  Function structure for public.st_setsrid("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_setsrid"("public"."geometry", int4);
CREATE FUNCTION "public"."st_setsrid"(IN "public"."geometry", IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_set_srid'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_setsrid"(IN "public"."geometry", IN int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_setsrid"(IN "public"."geometry", IN int4) IS 'args: geom, srid - Sets the SRID on a geometry to a particular integer value.';

-- ----------------------------
--  Function structure for public.st_asbinary("public"."geometry", text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asbinary"("public"."geometry", text);
CREATE FUNCTION "public"."st_asbinary"(IN "public"."geometry", IN text) RETURNS "bytea" 
	AS '$libdir/postgis-2.1','LWGEOM_asBinary'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asbinary"(IN "public"."geometry", IN text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_asbinary"(IN "public"."geometry", IN text) IS 'args: g1, NDR_or_XDR - Return the Well-Known Binary (WKB) representation of the geometry/geography without SRID meta data.';

-- ----------------------------
--  Function structure for public.st_asbinary("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asbinary"("public"."geometry");
CREATE FUNCTION "public"."st_asbinary"(IN "public"."geometry") RETURNS "bytea" 
	AS '$libdir/postgis-2.1','LWGEOM_asBinary'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asbinary"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_asbinary"(IN "public"."geometry") IS 'args: g1 - Return the Well-Known Binary (WKB) representation of the geometry/geography without SRID meta data.';

-- ----------------------------
--  Function structure for public.st_astext("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_astext"("public"."geometry");
CREATE FUNCTION "public"."st_astext"(IN "public"."geometry") RETURNS "text" 
	AS '$libdir/postgis-2.1','LWGEOM_asText'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_astext"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_astext"(IN "public"."geometry") IS 'args: g1 - Return the Well-Known Text (WKT) representation of the geometry/geography without SRID metadata.';

-- ----------------------------
--  Function structure for public.st_geometryfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geometryfromtext"(text);
CREATE FUNCTION "public"."st_geometryfromtext"(IN text) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_from_text'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geometryfromtext"(IN text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_geometryfromtext"(IN text) IS 'args: WKT - Return a specified ST_Geometry value from Well-Known Text representation (WKT). This is an alias name for ST_GeomFromText';

-- ----------------------------
--  Function structure for public.st_geometryfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geometryfromtext"(text, int4);
CREATE FUNCTION "public"."st_geometryfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_from_text'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geometryfromtext"(IN text, IN int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_geometryfromtext"(IN text, IN int4) IS 'args: WKT, srid - Return a specified ST_Geometry value from Well-Known Text representation (WKT). This is an alias name for ST_GeomFromText';

-- ----------------------------
--  Function structure for public.st_geomfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geomfromtext"(text);
CREATE FUNCTION "public"."st_geomfromtext"(IN text) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_from_text'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geomfromtext"(IN text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_geomfromtext"(IN text) IS 'args: WKT - Return a specified ST_Geometry value from Well-Known Text representation (WKT).';

-- ----------------------------
--  Function structure for public.st_geomfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geomfromtext"(text, int4);
CREATE FUNCTION "public"."st_geomfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_from_text'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geomfromtext"(IN text, IN int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_geomfromtext"(IN text, IN int4) IS 'args: WKT, srid - Return a specified ST_Geometry value from Well-Known Text representation (WKT).';

-- ----------------------------
--  Function structure for public.st_wkttosql(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_wkttosql"(text);
CREATE FUNCTION "public"."st_wkttosql"(IN text) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_from_text'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_wkttosql"(IN text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_wkttosql"(IN text) IS 'args: WKT - Return a specified ST_Geometry value from Well-Known Text representation (WKT). This is an alias name for ST_GeomFromText';

-- ----------------------------
--  Function structure for public.st_pointfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_pointfromtext"(text);
CREATE FUNCTION "public"."st_pointfromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1)) = 'POINT'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_pointfromtext"(IN text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_pointfromtext"(IN text) IS 'args: WKT - Makes a point Geometry from WKT with the given SRID. If SRID is not given, it defaults to unknown.';

-- ----------------------------
--  Function structure for public.st_pointfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_pointfromtext"(text, int4);
CREATE FUNCTION "public"."st_pointfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1, $2)) = 'POINT'
	THEN ST_GeomFromText($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_pointfromtext"(IN text, IN int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_pointfromtext"(IN text, IN int4) IS 'args: WKT, srid - Makes a point Geometry from WKT with the given SRID. If SRID is not given, it defaults to unknown.';

-- ----------------------------
--  Function structure for public.st_linefromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_linefromtext"(text);
CREATE FUNCTION "public"."st_linefromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1)) = 'LINESTRING'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_linefromtext"(IN text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_linefromtext"(IN text) IS 'args: WKT - Makes a Geometry from WKT representation with the given SRID. If SRID is not given, it defaults to -1.';

-- ----------------------------
--  Function structure for public.st_linefromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_linefromtext"(text, int4);
CREATE FUNCTION "public"."st_linefromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1, $2)) = 'LINESTRING'
	THEN ST_GeomFromText($1,$2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_linefromtext"(IN text, IN int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_linefromtext"(IN text, IN int4) IS 'args: WKT, srid - Makes a Geometry from WKT representation with the given SRID. If SRID is not given, it defaults to -1.';

-- ----------------------------
--  Function structure for public.st_polyfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_polyfromtext"(text);
CREATE FUNCTION "public"."st_polyfromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1)) = 'POLYGON'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_polyfromtext"(IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_polyfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_polyfromtext"(text, int4);
CREATE FUNCTION "public"."st_polyfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1, $2)) = 'POLYGON'
	THEN ST_GeomFromText($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_polyfromtext"(IN text, IN int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_polygonfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_polygonfromtext"(text, int4);
CREATE FUNCTION "public"."st_polygonfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_PolyFromText($1, $2)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_polygonfromtext"(IN text, IN int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_polygonfromtext"(IN text, IN int4) IS 'args: WKT, srid - Makes a Geometry from WKT with the given SRID. If SRID is not give, it defaults to -1.';

-- ----------------------------
--  Function structure for public.st_polygonfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_polygonfromtext"(text);
CREATE FUNCTION "public"."st_polygonfromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_PolyFromText($1)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_polygonfromtext"(IN text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_polygonfromtext"(IN text) IS 'args: WKT - Makes a Geometry from WKT with the given SRID. If SRID is not give, it defaults to -1.';

-- ----------------------------
--  Function structure for public.st_mlinefromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mlinefromtext"(text, int4);
CREATE FUNCTION "public"."st_mlinefromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE
	WHEN geometrytype(ST_GeomFromText($1, $2)) = 'MULTILINESTRING'
	THEN ST_GeomFromText($1,$2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_mlinefromtext"(IN text, IN int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_mlinefromtext"(IN text, IN int4) IS 'args: WKT, srid - Return a specified ST_MultiLineString value from WKT representation.';

-- ----------------------------
--  Function structure for public.st_mlinefromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mlinefromtext"(text);
CREATE FUNCTION "public"."st_mlinefromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1)) = 'MULTILINESTRING'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_mlinefromtext"(IN text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_mlinefromtext"(IN text) IS 'args: WKT - Return a specified ST_MultiLineString value from WKT representation.';

-- ----------------------------
--  Function structure for public.st_multilinestringfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_multilinestringfromtext"(text);
CREATE FUNCTION "public"."st_multilinestringfromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_MLineFromText($1)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_multilinestringfromtext"(IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_multilinestringfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_multilinestringfromtext"(text, int4);
CREATE FUNCTION "public"."st_multilinestringfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_MLineFromText($1, $2)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_multilinestringfromtext"(IN text, IN int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_mpointfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mpointfromtext"(text, int4);
CREATE FUNCTION "public"."st_mpointfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1, $2)) = 'MULTIPOINT'
	THEN ST_GeomFromText($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_mpointfromtext"(IN text, IN int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_mpointfromtext"(IN text, IN int4) IS 'args: WKT, srid - Makes a Geometry from WKT with the given SRID. If SRID is not give, it defaults to -1.';

-- ----------------------------
--  Function structure for public.st_mpointfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mpointfromtext"(text);
CREATE FUNCTION "public"."st_mpointfromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1)) = 'MULTIPOINT'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_mpointfromtext"(IN text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_mpointfromtext"(IN text) IS 'args: WKT - Makes a Geometry from WKT with the given SRID. If SRID is not give, it defaults to -1.';

-- ----------------------------
--  Function structure for public.st_multipointfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_multipointfromtext"(text);
CREATE FUNCTION "public"."st_multipointfromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_MPointFromText($1)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_multipointfromtext"(IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_mpolyfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mpolyfromtext"(text, int4);
CREATE FUNCTION "public"."st_mpolyfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1, $2)) = 'MULTIPOLYGON'
	THEN ST_GeomFromText($1,$2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_mpolyfromtext"(IN text, IN int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_mpolyfromtext"(IN text, IN int4) IS 'args: WKT, srid - Makes a MultiPolygon Geometry from WKT with the given SRID. If SRID is not give, it defaults to -1.';

-- ----------------------------
--  Function structure for public.st_mpolyfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mpolyfromtext"(text);
CREATE FUNCTION "public"."st_mpolyfromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1)) = 'MULTIPOLYGON'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_mpolyfromtext"(IN text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_mpolyfromtext"(IN text) IS 'args: WKT - Makes a MultiPolygon Geometry from WKT with the given SRID. If SRID is not give, it defaults to -1.';

-- ----------------------------
--  Function structure for public.st_multipolygonfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_multipolygonfromtext"(text, int4);
CREATE FUNCTION "public"."st_multipolygonfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_MPolyFromText($1, $2)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_multipolygonfromtext"(IN text, IN int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_multipolygonfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_multipolygonfromtext"(text);
CREATE FUNCTION "public"."st_multipolygonfromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_MPolyFromText($1)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_multipolygonfromtext"(IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_geomcollfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geomcollfromtext"(text, int4);
CREATE FUNCTION "public"."st_geomcollfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE
	WHEN geometrytype(ST_GeomFromText($1, $2)) = 'GEOMETRYCOLLECTION'
	THEN ST_GeomFromText($1,$2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geomcollfromtext"(IN text, IN int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_geomcollfromtext"(IN text, IN int4) IS 'args: WKT, srid - Makes a collection Geometry from collection WKT with the given SRID. If SRID is not give, it defaults to -1.';

-- ----------------------------
--  Function structure for public.st_geomcollfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geomcollfromtext"(text);
CREATE FUNCTION "public"."st_geomcollfromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE
	WHEN geometrytype(ST_GeomFromText($1)) = 'GEOMETRYCOLLECTION'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geomcollfromtext"(IN text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_geomcollfromtext"(IN text) IS 'args: WKT - Makes a collection Geometry from collection WKT with the given SRID. If SRID is not give, it defaults to -1.';

-- ----------------------------
--  Function structure for public.st_geomfromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geomfromwkb"(bytea);
CREATE FUNCTION "public"."st_geomfromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_from_WKB'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geomfromwkb"(IN bytea) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_geomfromwkb"(IN bytea) IS 'args: geom - Makes a geometry from WKB with the given SRID';

-- ----------------------------
--  Function structure for public.st_geomfromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geomfromwkb"(bytea, int4);
CREATE FUNCTION "public"."st_geomfromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_SetSRID(ST_GeomFromWKB($1), $2)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geomfromwkb"(IN bytea, IN int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_geomfromwkb"(IN bytea, IN int4) IS 'args: geom, srid - Makes a geometry from WKB with the given SRID';

-- ----------------------------
--  Function structure for public.st_pointfromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_pointfromwkb"(bytea, int4);
CREATE FUNCTION "public"."st_pointfromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'POINT'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_pointfromwkb"(IN bytea, IN int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_pointfromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_pointfromwkb"(bytea);
CREATE FUNCTION "public"."st_pointfromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'POINT'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_pointfromwkb"(IN bytea) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_linefromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_linefromwkb"(bytea, int4);
CREATE FUNCTION "public"."st_linefromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'LINESTRING'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_linefromwkb"(IN bytea, IN int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_linefromwkb"(IN bytea, IN int4) IS 'args: WKB, srid - Makes a LINESTRING from WKB with the given SRID';

-- ----------------------------
--  Function structure for public.st_linefromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_linefromwkb"(bytea);
CREATE FUNCTION "public"."st_linefromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'LINESTRING'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_linefromwkb"(IN bytea) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_linefromwkb"(IN bytea) IS 'args: WKB - Makes a LINESTRING from WKB with the given SRID';

-- ----------------------------
--  Function structure for public.st_linestringfromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_linestringfromwkb"(bytea, int4);
CREATE FUNCTION "public"."st_linestringfromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'LINESTRING'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_linestringfromwkb"(IN bytea, IN int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_linestringfromwkb"(IN bytea, IN int4) IS 'args: WKB, srid - Makes a geometry from WKB with the given SRID.';

-- ----------------------------
--  Function structure for public.st_linestringfromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_linestringfromwkb"(bytea);
CREATE FUNCTION "public"."st_linestringfromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'LINESTRING'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_linestringfromwkb"(IN bytea) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_linestringfromwkb"(IN bytea) IS 'args: WKB - Makes a geometry from WKB with the given SRID.';

-- ----------------------------
--  Function structure for public.st_polyfromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_polyfromwkb"(bytea, int4);
CREATE FUNCTION "public"."st_polyfromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'POLYGON'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_polyfromwkb"(IN bytea, IN int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_polyfromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_polyfromwkb"(bytea);
CREATE FUNCTION "public"."st_polyfromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'POLYGON'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_polyfromwkb"(IN bytea) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geography_send("public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography_send"("public"."geography");
CREATE FUNCTION "public"."geography_send"(IN "public"."geography") RETURNS "bytea" 
	AS '$libdir/postgis-2.1','geography_send'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geography_send"(IN "public"."geography") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_polygonfromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_polygonfromwkb"(bytea, int4);
CREATE FUNCTION "public"."st_polygonfromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1,$2)) = 'POLYGON'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_polygonfromwkb"(IN bytea, IN int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_polygonfromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_polygonfromwkb"(bytea);
CREATE FUNCTION "public"."st_polygonfromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'POLYGON'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_polygonfromwkb"(IN bytea) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_mpointfromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mpointfromwkb"(bytea, int4);
CREATE FUNCTION "public"."st_mpointfromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'MULTIPOINT'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_mpointfromwkb"(IN bytea, IN int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_mpointfromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mpointfromwkb"(bytea);
CREATE FUNCTION "public"."st_mpointfromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'MULTIPOINT'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_mpointfromwkb"(IN bytea) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_multipointfromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_multipointfromwkb"(bytea, int4);
CREATE FUNCTION "public"."st_multipointfromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1,$2)) = 'MULTIPOINT'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_multipointfromwkb"(IN bytea, IN int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_multipointfromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_multipointfromwkb"(bytea);
CREATE FUNCTION "public"."st_multipointfromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'MULTIPOINT'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_multipointfromwkb"(IN bytea) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_multilinefromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_multilinefromwkb"(bytea);
CREATE FUNCTION "public"."st_multilinefromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'MULTILINESTRING'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_multilinefromwkb"(IN bytea) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_mlinefromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mlinefromwkb"(bytea, int4);
CREATE FUNCTION "public"."st_mlinefromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'MULTILINESTRING'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_mlinefromwkb"(IN bytea, IN int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_mlinefromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mlinefromwkb"(bytea);
CREATE FUNCTION "public"."st_mlinefromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'MULTILINESTRING'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_mlinefromwkb"(IN bytea) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_mpolyfromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mpolyfromwkb"(bytea, int4);
CREATE FUNCTION "public"."st_mpolyfromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'MULTIPOLYGON'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_mpolyfromwkb"(IN bytea, IN int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_mpolyfromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mpolyfromwkb"(bytea);
CREATE FUNCTION "public"."st_mpolyfromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'MULTIPOLYGON'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_mpolyfromwkb"(IN bytea) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_multipolyfromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_multipolyfromwkb"(bytea, int4);
CREATE FUNCTION "public"."st_multipolyfromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'MULTIPOLYGON'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_multipolyfromwkb"(IN bytea, IN int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_multipolyfromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_multipolyfromwkb"(bytea);
CREATE FUNCTION "public"."st_multipolyfromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'MULTIPOLYGON'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_multipolyfromwkb"(IN bytea) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_geomcollfromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geomcollfromwkb"(bytea, int4);
CREATE FUNCTION "public"."st_geomcollfromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE
	WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'GEOMETRYCOLLECTION'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geomcollfromwkb"(IN bytea, IN int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_geomcollfromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geomcollfromwkb"(bytea);
CREATE FUNCTION "public"."st_geomcollfromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE
	WHEN geometrytype(ST_GeomFromWKB($1)) = 'GEOMETRYCOLLECTION'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geomcollfromwkb"(IN bytea) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._st_maxdistance("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_maxdistance"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."_st_maxdistance"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-2.1','LWGEOM_maxdistance2d_linestring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_maxdistance"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_maxdistance("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_maxdistance"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_maxdistance"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "float8" 
	AS $BODY$SELECT _ST_MaxDistance(ST_ConvexHull($1), ST_ConvexHull($2))$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_maxdistance"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_maxdistance"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: g1, g2 - Returns the 2-dimensional largest distance between two geometries in projected units.';

-- ----------------------------
--  Function structure for public.st_closestpoint("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_closestpoint"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_closestpoint"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_closestpoint'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_closestpoint"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_closestpoint"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: g1, g2 - Returns the 2-dimensional point on g1 that is closest to g2. This is the first point of the shortest line.';

-- ----------------------------
--  Function structure for public.st_shortestline("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_shortestline"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_shortestline"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_shortestline2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_shortestline"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_shortestline"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: g1, g2 - Returns the 2-dimensional shortest line between two geometries';

-- ----------------------------
--  Function structure for public._st_longestline("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_longestline"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."_st_longestline"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_longestline2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_longestline"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_longestline("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_longestline"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_longestline"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "public"."geometry" 
	AS $BODY$SELECT _ST_LongestLine(ST_ConvexHull($1), ST_ConvexHull($2))$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_longestline"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_longestline"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: g1, g2 - Returns the 2-dimensional longest line points of two geometries. The function will only return the first longest line if more than one, that the function finds. The line returned will always start in g1 and end in g2. The length of the line this function returns will always be the same as st_maxdistance returns for g1 and g2.';

-- ----------------------------
--  Function structure for public._st_dfullywithin("public"."geometry", "public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_dfullywithin"("public"."geometry", "public"."geometry", float8);
CREATE FUNCTION "public"."_st_dfullywithin"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) RETURNS "bool" 
	AS '$libdir/postgis-2.1','LWGEOM_dfullywithin'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_dfullywithin"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_dfullywithin("public"."geometry", "public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_dfullywithin"("public"."geometry", "public"."geometry", float8);
CREATE FUNCTION "public"."st_dfullywithin"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) RETURNS "bool" 
	AS $BODY$SELECT $1 && ST_Expand($2,$3) AND $2 && ST_Expand($1,$3) AND _ST_DFullyWithin(ST_ConvexHull($1), ST_ConvexHull($2), $3)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_dfullywithin"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_dfullywithin"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) IS 'args: g1, g2, distance - Returns true if all of the geometries are within the specified distance of one another';

-- ----------------------------
--  Function structure for public.st_flipcoordinates("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_flipcoordinates"("public"."geometry");
CREATE FUNCTION "public"."st_flipcoordinates"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','ST_FlipCoordinates'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_flipcoordinates"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_flipcoordinates"(IN "public"."geometry") IS 'args: geom - Returns a version of the given geometry with X and Y axis flipped. Useful for people who have built latitude/longitude features and need to fix them.';

-- ----------------------------
--  Function structure for public.st_bdpolyfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_bdpolyfromtext"(text, int4);
CREATE FUNCTION "public"."st_bdpolyfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
DECLARE
	geomtext alias for $1;
	srid alias for $2;
	mline geometry;
	geom geometry;
BEGIN
	mline := ST_MultiLineStringFromText(geomtext, srid);

	IF mline IS NULL
	THEN
		RAISE EXCEPTION 'Input is not a MultiLinestring';
	END IF;

	geom := ST_BuildArea(mline);

	IF GeometryType(geom) != 'POLYGON'
	THEN
		RAISE EXCEPTION 'Input returns more then a single polygon, try using BdMPolyFromText instead';
	END IF;

	RETURN geom;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_bdpolyfromtext"(IN text, IN int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_bdpolyfromtext"(IN text, IN int4) IS 'args: WKT, srid - Construct a Polygon given an arbitrary collection of closed linestrings as a MultiLineString Well-Known text representation.';

-- ----------------------------
--  Function structure for public.st_bdmpolyfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_bdmpolyfromtext"(text, int4);
CREATE FUNCTION "public"."st_bdmpolyfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
DECLARE
	geomtext alias for $1;
	srid alias for $2;
	mline geometry;
	geom geometry;
BEGIN
	mline := ST_MultiLineStringFromText(geomtext, srid);

	IF mline IS NULL
	THEN
		RAISE EXCEPTION 'Input is not a MultiLinestring';
	END IF;

	geom := ST_Multi(ST_BuildArea(mline));

	RETURN geom;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_bdmpolyfromtext"(IN text, IN int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_bdmpolyfromtext"(IN text, IN int4) IS 'args: WKT, srid - Construct a MultiPolygon given an arbitrary collection of closed linestrings as a MultiLineString text representation Well-Known text representation.';

-- ----------------------------
--  Function structure for public.unlockrows(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."unlockrows"(text);
CREATE FUNCTION "public"."unlockrows"(IN text) RETURNS "int4" 
	AS $BODY$ 
DECLARE
	ret int;
BEGIN

	IF NOT LongTransactionsEnabled() THEN
		RAISE EXCEPTION 'Long transaction support disabled, use EnableLongTransaction() to enable.';
	END IF;

	EXECUTE 'DELETE FROM authorization_table where authid = ' ||
		quote_literal($1);

	GET DIAGNOSTICS ret = ROW_COUNT;

	RETURN ret;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."unlockrows"(IN text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."unlockrows"(IN text) IS 'args: auth_token - Remove all locks held by specified authorization id. Returns the number of locks released.';

-- ----------------------------
--  Function structure for public.lockrow(text, text, text, text, timestamp)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."lockrow"(text, text, text, text, timestamp);
CREATE FUNCTION "public"."lockrow"(IN text, IN text, IN text, IN text, IN timestamp) RETURNS "int4" 
	AS $BODY$ 
DECLARE
	myschema alias for $1;
	mytable alias for $2;
	myrid   alias for $3;
	authid alias for $4;
	expires alias for $5;
	ret int;
	mytoid oid;
	myrec RECORD;
	
BEGIN

	IF NOT LongTransactionsEnabled() THEN
		RAISE EXCEPTION 'Long transaction support disabled, use EnableLongTransaction() to enable.';
	END IF;

	EXECUTE 'DELETE FROM authorization_table WHERE expires < now()'; 

	SELECT c.oid INTO mytoid FROM pg_class c, pg_namespace n
		WHERE c.relname = mytable
		AND c.relnamespace = n.oid
		AND n.nspname = myschema;

	-- RAISE NOTICE 'toid: %', mytoid;

	FOR myrec IN SELECT * FROM authorization_table WHERE 
		toid = mytoid AND rid = myrid
	LOOP
		IF myrec.authid != authid THEN
			RETURN 0;
		ELSE
			RETURN 1;
		END IF;
	END LOOP;

	EXECUTE 'INSERT INTO authorization_table VALUES ('||
		quote_literal(mytoid::text)||','||quote_literal(myrid)||
		','||quote_literal(expires::text)||
		','||quote_literal(authid) ||')';

	GET DIAGNOSTICS ret = ROW_COUNT;

	RETURN ret;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."lockrow"(IN text, IN text, IN text, IN text, IN timestamp) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."lockrow"(IN text, IN text, IN text, IN text, IN timestamp) IS 'args: a_schema_name, a_table_name, a_row_key, an_auth_token, expire_dt - Set lock/authorization for specific row in table';

-- ----------------------------
--  Function structure for public.lockrow(text, text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."lockrow"(text, text, text, text);
CREATE FUNCTION "public"."lockrow"(IN text, IN text, IN text, IN text) RETURNS "int4" 
	AS $BODY$ SELECT LockRow($1, $2, $3, $4, now()::timestamp+'1:00'); $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."lockrow"(IN text, IN text, IN text, IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.lockrow(text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."lockrow"(text, text, text);
CREATE FUNCTION "public"."lockrow"(IN text, IN text, IN text) RETURNS "int4" 
	AS $BODY$ SELECT LockRow(current_schema(), $1, $2, $3, now()::timestamp+'1:00'); $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."lockrow"(IN text, IN text, IN text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."lockrow"(IN text, IN text, IN text) IS 'args: a_table_name, a_row_key, an_auth_token - Set lock/authorization for specific row in table';

-- ----------------------------
--  Function structure for public.lockrow(text, text, text, timestamp)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."lockrow"(text, text, text, timestamp);
CREATE FUNCTION "public"."lockrow"(IN text, IN text, IN text, IN timestamp) RETURNS "int4" 
	AS $BODY$ SELECT LockRow(current_schema(), $1, $2, $3, $4); $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."lockrow"(IN text, IN text, IN text, IN timestamp) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."lockrow"(IN text, IN text, IN text, IN timestamp) IS 'args: a_table_name, a_row_key, an_auth_token, expire_dt - Set lock/authorization for specific row in table';

-- ----------------------------
--  Function structure for public.addauth(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."addauth"(text);
CREATE FUNCTION "public"."addauth"(IN text) RETURNS "bool" 
	AS $BODY$ 
DECLARE
	lockid alias for $1;
	okay boolean;
	myrec record;
BEGIN
	-- check to see if table exists
	--  if not, CREATE TEMP TABLE mylock (transid xid, lockcode text)
	okay := 'f';
	FOR myrec IN SELECT * FROM pg_class WHERE relname = 'temp_lock_have_table' LOOP
		okay := 't';
	END LOOP; 
	IF (okay <> 't') THEN 
		CREATE TEMP TABLE temp_lock_have_table (transid xid, lockcode text);
			-- this will only work from pgsql7.4 up
			-- ON COMMIT DELETE ROWS;
	END IF;

	--  INSERT INTO mylock VALUES ( $1)
--	EXECUTE 'INSERT INTO temp_lock_have_table VALUES ( '||
--		quote_literal(getTransactionID()) || ',' ||
--		quote_literal(lockid) ||')';

	INSERT INTO temp_lock_have_table VALUES (getTransactionID(), lockid);

	RETURN true::boolean;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."addauth"(IN text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."addauth"(IN text) IS 'args: auth_token - Add an authorization token to be used in current transaction.';

-- ----------------------------
--  Function structure for public.checkauth(text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."checkauth"(text, text, text);
CREATE FUNCTION "public"."checkauth"(IN text, IN text, IN text) RETURNS "int4" 
	AS $BODY$ 
DECLARE
	schema text;
BEGIN
	IF NOT LongTransactionsEnabled() THEN
		RAISE EXCEPTION 'Long transaction support disabled, use EnableLongTransaction() to enable.';
	END IF;

	if ( $1 != '' ) THEN
		schema = $1;
	ELSE
		SELECT current_schema() into schema;
	END IF;

	-- TODO: check for an already existing trigger ?

	EXECUTE 'CREATE TRIGGER check_auth BEFORE UPDATE OR DELETE ON ' 
		|| quote_ident(schema) || '.' || quote_ident($2)
		||' FOR EACH ROW EXECUTE PROCEDURE CheckAuthTrigger('
		|| quote_literal($3) || ')';

	RETURN 0;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."checkauth"(IN text, IN text, IN text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."checkauth"(IN text, IN text, IN text) IS 'args: a_schema_name, a_table_name, a_key_column_name - Creates trigger on a table to prevent/allow updates and deletes of rows based on authorization token.';

-- ----------------------------
--  Function structure for public.checkauth(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."checkauth"(text, text);
CREATE FUNCTION "public"."checkauth"(IN text, IN text) RETURNS "int4" 
	AS $BODY$ SELECT CheckAuth('', $1, $2) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."checkauth"(IN text, IN text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."checkauth"(IN text, IN text) IS 'args: a_table_name, a_key_column_name - Creates trigger on a table to prevent/allow updates and deletes of rows based on authorization token.';

-- ----------------------------
--  Function structure for public.gettransactionid()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."gettransactionid"();
CREATE FUNCTION "public"."gettransactionid"() RETURNS "xid" 
	AS '$libdir/postgis-2.1','getTransactionID'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."gettransactionid"() OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.enablelongtransactions()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."enablelongtransactions"();
CREATE FUNCTION "public"."enablelongtransactions"() RETURNS "text" 
	AS $BODY$ 
DECLARE
	"query" text;
	exists bool;
	rec RECORD;

BEGIN

	exists = 'f';
	FOR rec IN SELECT * FROM pg_class WHERE relname = 'authorization_table'
	LOOP
		exists = 't';
	END LOOP;

	IF NOT exists
	THEN
		"query" = 'CREATE TABLE authorization_table (
			toid oid, -- table oid
			rid text, -- row id
			expires timestamp,
			authid text
		)';
		EXECUTE "query";
	END IF;

	exists = 'f';
	FOR rec IN SELECT * FROM pg_class WHERE relname = 'authorized_tables'
	LOOP
		exists = 't';
	END LOOP;

	IF NOT exists THEN
		"query" = 'CREATE VIEW authorized_tables AS ' ||
			'SELECT ' ||
			'n.nspname as schema, ' ||
			'c.relname as table, trim(' ||
			quote_literal(chr(92) || '000') ||
			' from t.tgargs) as id_column ' ||
			'FROM pg_trigger t, pg_class c, pg_proc p ' ||
			', pg_namespace n ' ||
			'WHERE p.proname = ' || quote_literal('checkauthtrigger') ||
			' AND c.relnamespace = n.oid' ||
			' AND t.tgfoid = p.oid and t.tgrelid = c.oid';
		EXECUTE "query";
	END IF;

	RETURN 'Long transactions support enabled';
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."enablelongtransactions"() OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."enablelongtransactions"() IS 'Enable long transaction support. This function creates the required metadata tables, needs to be called once before using the other functions in this section. Calling it twice is harmless.';

-- ----------------------------
--  Function structure for public.longtransactionsenabled()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."longtransactionsenabled"();
CREATE FUNCTION "public"."longtransactionsenabled"() RETURNS "bool" 
	AS $BODY$ 
DECLARE
	rec RECORD;
BEGIN
	FOR rec IN SELECT oid FROM pg_class WHERE relname = 'authorized_tables'
	LOOP
		return 't';
	END LOOP;
	return 'f';
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."longtransactionsenabled"() OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.disablelongtransactions()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."disablelongtransactions"();
CREATE FUNCTION "public"."disablelongtransactions"() RETURNS "text" 
	AS $BODY$ 
DECLARE
	rec RECORD;

BEGIN

	--
	-- Drop all triggers applied by CheckAuth()
	--
	FOR rec IN
		SELECT c.relname, t.tgname, t.tgargs FROM pg_trigger t, pg_class c, pg_proc p
		WHERE p.proname = 'checkauthtrigger' and t.tgfoid = p.oid and t.tgrelid = c.oid
	LOOP
		EXECUTE 'DROP TRIGGER ' || quote_ident(rec.tgname) ||
			' ON ' || quote_ident(rec.relname);
	END LOOP;

	--
	-- Drop the authorization_table table
	--
	FOR rec IN SELECT * FROM pg_class WHERE relname = 'authorization_table' LOOP
		DROP TABLE authorization_table;
	END LOOP;

	--
	-- Drop the authorized_tables view
	--
	FOR rec IN SELECT * FROM pg_class WHERE relname = 'authorized_tables' LOOP
		DROP VIEW authorized_tables;
	END LOOP;

	RETURN 'Long transactions support disabled';
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."disablelongtransactions"() OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."disablelongtransactions"() IS 'Disable long transaction support. This function removes the long transaction support metadata tables, and drops all triggers attached to lock-checked tables.';

-- ----------------------------
--  Function structure for public.geography_typmod_in(_cstring)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography_typmod_in"(_cstring);
CREATE FUNCTION "public"."geography_typmod_in"(IN _cstring) RETURNS "int4" 
	AS '$libdir/postgis-2.1','geography_typmod_in'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geography_typmod_in"(IN _cstring) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geography_typmod_out(int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography_typmod_out"(int4);
CREATE FUNCTION "public"."geography_typmod_out"(IN int4) RETURNS "cstring" 
	AS '$libdir/postgis-2.1','postgis_typmod_out'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geography_typmod_out"(IN int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geography_in(cstring, oid, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography_in"(cstring, oid, int4);
CREATE FUNCTION "public"."geography_in"(IN cstring, IN oid, IN int4) RETURNS "public"."geography" 
	AS '$libdir/postgis-2.1','geography_in'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geography_in"(IN cstring, IN oid, IN int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geography_out("public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography_out"("public"."geography");
CREATE FUNCTION "public"."geography_out"(IN "public"."geography") RETURNS "cstring" 
	AS '$libdir/postgis-2.1','geography_out'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geography_out"(IN "public"."geography") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geography_analyze(internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography_analyze"(internal);
CREATE FUNCTION "public"."geography_analyze"(IN internal) RETURNS "bool" 
	AS '$libdir/postgis-2.1','gserialized_analyze_nd'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geography_analyze"(IN internal) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geography("public"."geography", int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography"("public"."geography", int4, bool);
CREATE FUNCTION "public"."geography"(IN "public"."geography", IN int4, IN bool) RETURNS "public"."geography" 
	AS '$libdir/postgis-2.1','geography_enforce_typmod'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geography"(IN "public"."geography", IN int4, IN bool) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geography(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography"(bytea);
CREATE FUNCTION "public"."geography"(IN bytea) RETURNS "public"."geography" 
	AS '$libdir/postgis-2.1','LWGEOM_from_bytea'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geography"(IN bytea) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.bytea("public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."bytea"("public"."geography");
CREATE FUNCTION "public"."bytea"(IN "public"."geography") RETURNS "bytea" 
	AS '$libdir/postgis-2.1','LWGEOM_to_bytea'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."bytea"(IN "public"."geography") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_astext("public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_astext"("public"."geography");
CREATE FUNCTION "public"."st_astext"(IN "public"."geography") RETURNS "text" 
	AS '$libdir/postgis-2.1','LWGEOM_asText'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_astext"(IN "public"."geography") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_astext"(IN "public"."geography") IS 'args: g1 - Return the Well-Known Text (WKT) representation of the geometry/geography without SRID metadata.';

-- ----------------------------
--  Function structure for public.st_astext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_astext"(text);
CREATE FUNCTION "public"."st_astext"(IN text) RETURNS "text" 
	AS $BODY$ SELECT ST_AsText($1::geometry);  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_astext"(IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_geographyfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geographyfromtext"(text);
CREATE FUNCTION "public"."st_geographyfromtext"(IN text) RETURNS "public"."geography" 
	AS '$libdir/postgis-2.1','geography_from_text'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geographyfromtext"(IN text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_geographyfromtext"(IN text) IS 'args: EWKT - Return a specified geography value from Well-Known Text representation or extended (WKT).';

-- ----------------------------
--  Function structure for public.st_geogfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geogfromtext"(text);
CREATE FUNCTION "public"."st_geogfromtext"(IN text) RETURNS "public"."geography" 
	AS '$libdir/postgis-2.1','geography_from_text'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geogfromtext"(IN text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_geogfromtext"(IN text) IS 'args: EWKT - Return a specified geography value from Well-Known Text representation or extended (WKT).';

-- ----------------------------
--  Function structure for public.st_geogfromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geogfromwkb"(bytea);
CREATE FUNCTION "public"."st_geogfromwkb"(IN bytea) RETURNS "public"."geography" 
	AS '$libdir/postgis-2.1','geography_from_binary'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geogfromwkb"(IN bytea) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_geogfromwkb"(IN bytea) IS 'args: geom - Creates a geography instance from a Well-Known Binary geometry representation (WKB) or extended Well Known Binary (EWKB).';

-- ----------------------------
--  Function structure for public.postgis_typmod_dims(int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_typmod_dims"(int4);
CREATE FUNCTION "public"."postgis_typmod_dims"(IN int4) RETURNS "int4" 
	AS '$libdir/postgis-2.1','postgis_typmod_dims'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_typmod_dims"(IN int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.postgis_typmod_srid(int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_typmod_srid"(int4);
CREATE FUNCTION "public"."postgis_typmod_srid"(IN int4) RETURNS "int4" 
	AS '$libdir/postgis-2.1','postgis_typmod_srid'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_typmod_srid"(IN int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.postgis_typmod_type(int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_typmod_type"(int4);
CREATE FUNCTION "public"."postgis_typmod_type"(IN int4) RETURNS "text" 
	AS '$libdir/postgis-2.1','postgis_typmod_type'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_typmod_type"(IN int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geography("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography"("public"."geometry");
CREATE FUNCTION "public"."geography"(IN "public"."geometry") RETURNS "public"."geography" 
	AS '$libdir/postgis-2.1','geography_from_geometry'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geography"(IN "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry("public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry"("public"."geography");
CREATE FUNCTION "public"."geometry"(IN "public"."geography") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','geometry_from_geography'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry"(IN "public"."geography") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geography_gist_consistent(internal, "public"."geography", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography_gist_consistent"(internal, "public"."geography", int4);
CREATE FUNCTION "public"."geography_gist_consistent"(IN internal, IN "public"."geography", IN int4) RETURNS "bool" 
	AS '$libdir/postgis-2.1','gserialized_gist_consistent'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geography_gist_consistent"(IN internal, IN "public"."geography", IN int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geography_gist_compress(internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography_gist_compress"(internal);
CREATE FUNCTION "public"."geography_gist_compress"(IN internal) RETURNS "internal" 
	AS '$libdir/postgis-2.1','gserialized_gist_compress'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geography_gist_compress"(IN internal) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geography_gist_penalty(internal, internal, internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography_gist_penalty"(internal, internal, internal);
CREATE FUNCTION "public"."geography_gist_penalty"(IN internal, IN internal, IN internal) RETURNS "internal" 
	AS '$libdir/postgis-2.1','gserialized_gist_penalty'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geography_gist_penalty"(IN internal, IN internal, IN internal) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geography_gist_picksplit(internal, internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography_gist_picksplit"(internal, internal);
CREATE FUNCTION "public"."geography_gist_picksplit"(IN internal, IN internal) RETURNS "internal" 
	AS '$libdir/postgis-2.1','gserialized_gist_picksplit'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geography_gist_picksplit"(IN internal, IN internal) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geography_gist_union(bytea, internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography_gist_union"(bytea, internal);
CREATE FUNCTION "public"."geography_gist_union"(IN bytea, IN internal) RETURNS "internal" 
	AS '$libdir/postgis-2.1','gserialized_gist_union'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geography_gist_union"(IN bytea, IN internal) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geography_gist_same("public"."box2d", "public"."box2d", internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography_gist_same"("public"."box2d", "public"."box2d", internal);
CREATE FUNCTION "public"."geography_gist_same"(IN "public"."box2d", IN "public"."box2d", IN internal) RETURNS "internal" 
	AS '$libdir/postgis-2.1','gserialized_gist_same'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geography_gist_same"(IN "public"."box2d", IN "public"."box2d", IN internal) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geography_gist_decompress(internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography_gist_decompress"(internal);
CREATE FUNCTION "public"."geography_gist_decompress"(IN internal) RETURNS "internal" 
	AS '$libdir/postgis-2.1','gserialized_gist_decompress'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geography_gist_decompress"(IN internal) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geography_overlaps("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography_overlaps"("public"."geography", "public"."geography");
CREATE FUNCTION "public"."geography_overlaps"(IN "public"."geography", IN "public"."geography") RETURNS "bool" 
	AS '$libdir/postgis-2.1','gserialized_overlaps'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geography_overlaps"(IN "public"."geography", IN "public"."geography") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geography_lt("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography_lt"("public"."geography", "public"."geography");
CREATE FUNCTION "public"."geography_lt"(IN "public"."geography", IN "public"."geography") RETURNS "bool" 
	AS '$libdir/postgis-2.1','geography_lt'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geography_lt"(IN "public"."geography", IN "public"."geography") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geography_le("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography_le"("public"."geography", "public"."geography");
CREATE FUNCTION "public"."geography_le"(IN "public"."geography", IN "public"."geography") RETURNS "bool" 
	AS '$libdir/postgis-2.1','geography_le'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geography_le"(IN "public"."geography", IN "public"."geography") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geography_gt("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography_gt"("public"."geography", "public"."geography");
CREATE FUNCTION "public"."geography_gt"(IN "public"."geography", IN "public"."geography") RETURNS "bool" 
	AS '$libdir/postgis-2.1','geography_gt'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geography_gt"(IN "public"."geography", IN "public"."geography") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geography_ge("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography_ge"("public"."geography", "public"."geography");
CREATE FUNCTION "public"."geography_ge"(IN "public"."geography", IN "public"."geography") RETURNS "bool" 
	AS '$libdir/postgis-2.1','geography_ge'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geography_ge"(IN "public"."geography", IN "public"."geography") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geography_eq("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography_eq"("public"."geography", "public"."geography");
CREATE FUNCTION "public"."geography_eq"(IN "public"."geography", IN "public"."geography") RETURNS "bool" 
	AS '$libdir/postgis-2.1','geography_eq'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geography_eq"(IN "public"."geography", IN "public"."geography") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geography_cmp("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography_cmp"("public"."geography", "public"."geography");
CREATE FUNCTION "public"."geography_cmp"(IN "public"."geography", IN "public"."geography") RETURNS "int4" 
	AS '$libdir/postgis-2.1','geography_cmp'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geography_cmp"(IN "public"."geography", IN "public"."geography") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_assvg("public"."geography", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_assvg"("public"."geography", int4, int4);
CREATE FUNCTION "public"."st_assvg"(IN geog "public"."geography", IN rel int4 DEFAULT 0, IN maxdecimaldigits int4 DEFAULT 15) RETURNS "text" 
	AS '$libdir/postgis-2.1','geography_as_svg'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_assvg"(IN geog "public"."geography", IN rel int4, IN maxdecimaldigits int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_assvg"(IN geog "public"."geography", IN rel int4, IN maxdecimaldigits int4) IS 'args: geog, rel=0, maxdecimaldigits=15 - Returns a Geometry in SVG path data given a geometry or geography object.';

-- ----------------------------
--  Function structure for public.st_assvg(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_assvg"(text);
CREATE FUNCTION "public"."st_assvg"(IN text) RETURNS "text" 
	AS $BODY$ SELECT ST_AsSVG($1::geometry,0,15);  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_assvg"(IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._st_asgml(int4, "public"."geography", int4, int4, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_asgml"(int4, "public"."geography", int4, int4, text, text);
CREATE FUNCTION "public"."_st_asgml"(IN int4, IN "public"."geography", IN int4, IN int4, IN text, IN text) RETURNS "text" 
	AS '$libdir/postgis-2.1','geography_as_gml'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_asgml"(IN int4, IN "public"."geography", IN int4, IN int4, IN text, IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_asgml(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asgml"(text);
CREATE FUNCTION "public"."st_asgml"(IN text) RETURNS "text" 
	AS $BODY$ SELECT _ST_AsGML(2,$1::geometry,15,0, NULL, NULL);  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asgml"(IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_asgml("public"."geography", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asgml"("public"."geography", int4, int4);
CREATE FUNCTION "public"."st_asgml"(IN geog "public"."geography", IN maxdecimaldigits int4 DEFAULT 15, IN "options" int4 DEFAULT 0) RETURNS "text" 
	AS $BODY$SELECT _ST_AsGML(2, $1, $2, $3, null, null)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asgml"(IN geog "public"."geography", IN maxdecimaldigits int4, IN "options" int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_asgml(int4, "public"."geography", int4, int4, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asgml"(int4, "public"."geography", int4, int4, text, text);
CREATE FUNCTION "public"."st_asgml"(IN "version" int4, IN geog "public"."geography", IN maxdecimaldigits int4 DEFAULT 15, IN "options" int4 DEFAULT 0, IN nprefix text DEFAULT NULL::text, IN "id" text DEFAULT NULL::text) RETURNS "text" 
	AS $BODY$ SELECT _ST_AsGML($1, $2, $3, $4, $5, $6);$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asgml"(IN "version" int4, IN geog "public"."geography", IN maxdecimaldigits int4, IN "options" int4, IN nprefix text, IN "id" text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_asgml"(IN "version" int4, IN geog "public"."geography", IN maxdecimaldigits int4, IN "options" int4, IN nprefix text, IN "id" text) IS 'args: version, geog, maxdecimaldigits=15, options=0, nprefix=null, id=null - Return the geometry as a GML version 2 or 3 element.';

-- ----------------------------
--  Function structure for public._st_askml(int4, "public"."geography", int4, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_askml"(int4, "public"."geography", int4, text);
CREATE FUNCTION "public"."_st_askml"(IN int4, IN "public"."geography", IN int4, IN text) RETURNS "text" 
	AS '$libdir/postgis-2.1','geography_as_kml'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_askml"(IN int4, IN "public"."geography", IN int4, IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_askml("public"."geography", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_askml"("public"."geography", int4);
CREATE FUNCTION "public"."st_askml"(IN geog "public"."geography", IN maxdecimaldigits int4 DEFAULT 15) RETURNS "text" 
	AS $BODY$SELECT _ST_AsKML(2, $1, $2, null)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_askml"(IN geog "public"."geography", IN maxdecimaldigits int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_askml"(IN geog "public"."geography", IN maxdecimaldigits int4) IS 'args: geog, maxdecimaldigits=15 - Return the geometry as a KML element. Several variants. Default version=2, default precision=15';

-- ----------------------------
--  Function structure for public.st_askml(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_askml"(text);
CREATE FUNCTION "public"."st_askml"(IN text) RETURNS "text" 
	AS $BODY$ SELECT _ST_AsKML(2, $1::geometry, 15, null);  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_askml"(IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_askml(int4, "public"."geography", int4, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_askml"(int4, "public"."geography", int4, text);
CREATE FUNCTION "public"."st_askml"(IN "version" int4, IN geog "public"."geography", IN maxdecimaldigits int4 DEFAULT 15, IN nprefix text DEFAULT NULL::text) RETURNS "text" 
	AS $BODY$SELECT _ST_AsKML($1, $2, $3, $4)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_askml"(IN "version" int4, IN geog "public"."geography", IN maxdecimaldigits int4, IN nprefix text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_askml"(IN "version" int4, IN geog "public"."geography", IN maxdecimaldigits int4, IN nprefix text) IS 'args: version, geog, maxdecimaldigits=15, nprefix=NULL - Return the geometry as a KML element. Several variants. Default version=2, default precision=15';

-- ----------------------------
--  Function structure for public._st_asgeojson(int4, "public"."geography", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_asgeojson"(int4, "public"."geography", int4, int4);
CREATE FUNCTION "public"."_st_asgeojson"(IN int4, IN "public"."geography", IN int4, IN int4) RETURNS "text" 
	AS '$libdir/postgis-2.1','geography_as_geojson'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_asgeojson"(IN int4, IN "public"."geography", IN int4, IN int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_asgeojson(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asgeojson"(text);
CREATE FUNCTION "public"."st_asgeojson"(IN text) RETURNS "text" 
	AS $BODY$ SELECT _ST_AsGeoJson(1, $1::geometry,15,0);  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asgeojson"(IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_asgeojson("public"."geography", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asgeojson"("public"."geography", int4, int4);
CREATE FUNCTION "public"."st_asgeojson"(IN geog "public"."geography", IN maxdecimaldigits int4 DEFAULT 15, IN "options" int4 DEFAULT 0) RETURNS "text" 
	AS $BODY$ SELECT _ST_AsGeoJson(1, $1, $2, $3); $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asgeojson"(IN geog "public"."geography", IN maxdecimaldigits int4, IN "options" int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_asgeojson"(IN geog "public"."geography", IN maxdecimaldigits int4, IN "options" int4) IS 'args: geog, maxdecimaldigits=15, options=0 - Return the geometry as a GeoJSON element.';

-- ----------------------------
--  Function structure for public.st_asgeojson(int4, "public"."geography", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asgeojson"(int4, "public"."geography", int4, int4);
CREATE FUNCTION "public"."st_asgeojson"(IN gj_version int4, IN geog "public"."geography", IN maxdecimaldigits int4 DEFAULT 15, IN "options" int4 DEFAULT 0) RETURNS "text" 
	AS $BODY$ SELECT _ST_AsGeoJson($1, $2, $3, $4); $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asgeojson"(IN gj_version int4, IN geog "public"."geography", IN maxdecimaldigits int4, IN "options" int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_asgeojson"(IN gj_version int4, IN geog "public"."geography", IN maxdecimaldigits int4, IN "options" int4) IS 'args: gj_version, geog, maxdecimaldigits=15, options=0 - Return the geometry as a GeoJSON element.';

-- ----------------------------
--  Function structure for public._st_distance("public"."geography", "public"."geography", float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_distance"("public"."geography", "public"."geography", float8, bool);
CREATE FUNCTION "public"."_st_distance"(IN "public"."geography", IN "public"."geography", IN float8, IN bool) RETURNS "float8" 
	AS '$libdir/postgis-2.1','geography_distance'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_distance"(IN "public"."geography", IN "public"."geography", IN float8, IN bool) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._st_dwithin("public"."geography", "public"."geography", float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_dwithin"("public"."geography", "public"."geography", float8, bool);
CREATE FUNCTION "public"."_st_dwithin"(IN "public"."geography", IN "public"."geography", IN float8, IN bool) RETURNS "bool" 
	AS '$libdir/postgis-2.1','geography_dwithin'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_dwithin"(IN "public"."geography", IN "public"."geography", IN float8, IN bool) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_distance("public"."geography", "public"."geography", bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_distance"("public"."geography", "public"."geography", bool);
CREATE FUNCTION "public"."st_distance"(IN "public"."geography", IN "public"."geography", IN bool) RETURNS "float8" 
	AS $BODY$SELECT _ST_Distance($1, $2, 0.0, $3)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_distance"(IN "public"."geography", IN "public"."geography", IN bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_distance"(IN "public"."geography", IN "public"."geography", IN bool) IS 'args: gg1, gg2, use_spheroid - For geometry type Returns the 2-dimensional cartesian minimum distance (based on spatial ref) between two geometries in projected units. For geography type defaults to return spheroidal minimum distance between two geographies in meters.';

-- ----------------------------
--  Function structure for public.st_distance("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_distance"("public"."geography", "public"."geography");
CREATE FUNCTION "public"."st_distance"(IN "public"."geography", IN "public"."geography") RETURNS "float8" 
	AS $BODY$SELECT _ST_Distance($1, $2, 0.0, true)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_distance"(IN "public"."geography", IN "public"."geography") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_distance"(IN "public"."geography", IN "public"."geography") IS 'args: gg1, gg2 - For geometry type Returns the 2-dimensional cartesian minimum distance (based on spatial ref) between two geometries in projected units. For geography type defaults to return spheroidal minimum distance between two geographies in meters.';

-- ----------------------------
--  Function structure for public.st_distance(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_distance"(text, text);
CREATE FUNCTION "public"."st_distance"(IN text, IN text) RETURNS "float8" 
	AS $BODY$ SELECT ST_Distance($1::geometry, $2::geometry);  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_distance"(IN text, IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._st_expand("public"."geography", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_expand"("public"."geography", float8);
CREATE FUNCTION "public"."_st_expand"(IN "public"."geography", IN float8) RETURNS "public"."geography" 
	AS '$libdir/postgis-2.1','geography_expand'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_expand"(IN "public"."geography", IN float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_dwithin("public"."geography", "public"."geography", float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_dwithin"("public"."geography", "public"."geography", float8, bool);
CREATE FUNCTION "public"."st_dwithin"(IN "public"."geography", IN "public"."geography", IN float8, IN bool) RETURNS "bool" 
	AS $BODY$SELECT $1 && _ST_Expand($2,$3) AND $2 && _ST_Expand($1,$3) AND _ST_DWithin($1, $2, $3, $4)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_dwithin"(IN "public"."geography", IN "public"."geography", IN float8, IN bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_dwithin"(IN "public"."geography", IN "public"."geography", IN float8, IN bool) IS 'args: gg1, gg2, distance_meters, use_spheroid - Returns true if the geometries are within the specified distance of one another. For geometry units are in those of spatial reference and For geography units are in meters and measurement is defaulted to use_spheroid=true (measure around spheroid), for faster check, use_spheroid=false to measure along sphere.';

-- ----------------------------
--  Function structure for public.st_dwithin("public"."geography", "public"."geography", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_dwithin"("public"."geography", "public"."geography", float8);
CREATE FUNCTION "public"."st_dwithin"(IN "public"."geography", IN "public"."geography", IN float8) RETURNS "bool" 
	AS $BODY$SELECT $1 && _ST_Expand($2,$3) AND $2 && _ST_Expand($1,$3) AND _ST_DWithin($1, $2, $3, true)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_dwithin"(IN "public"."geography", IN "public"."geography", IN float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_dwithin"(IN "public"."geography", IN "public"."geography", IN float8) IS 'args: gg1, gg2, distance_meters - Returns true if the geometries are within the specified distance of one another. For geometry units are in those of spatial reference and For geography units are in meters and measurement is defaulted to use_spheroid=true (measure around spheroid), for faster check, use_spheroid=false to measure along sphere.';

-- ----------------------------
--  Function structure for public.st_dwithin(text, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_dwithin"(text, text, float8);
CREATE FUNCTION "public"."st_dwithin"(IN text, IN text, IN float8) RETURNS "bool" 
	AS $BODY$ SELECT ST_DWithin($1::geometry, $2::geometry, $3);  $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_dwithin"(IN text, IN text, IN float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._st_distanceuncached("public"."geography", "public"."geography", float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_distanceuncached"("public"."geography", "public"."geography", float8, bool);
CREATE FUNCTION "public"."_st_distanceuncached"(IN "public"."geography", IN "public"."geography", IN float8, IN bool) RETURNS "float8" 
	AS '$libdir/postgis-2.1','geography_distance_uncached'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_distanceuncached"(IN "public"."geography", IN "public"."geography", IN float8, IN bool) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._st_distanceuncached("public"."geography", "public"."geography", bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_distanceuncached"("public"."geography", "public"."geography", bool);
CREATE FUNCTION "public"."_st_distanceuncached"(IN "public"."geography", IN "public"."geography", IN bool) RETURNS "float8" 
	AS $BODY$SELECT _ST_DistanceUnCached($1, $2, 0.0, $3)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_distanceuncached"(IN "public"."geography", IN "public"."geography", IN bool) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._st_distanceuncached("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_distanceuncached"("public"."geography", "public"."geography");
CREATE FUNCTION "public"."_st_distanceuncached"(IN "public"."geography", IN "public"."geography") RETURNS "float8" 
	AS $BODY$SELECT _ST_DistanceUnCached($1, $2, 0.0, true)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_distanceuncached"(IN "public"."geography", IN "public"."geography") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._st_distancetree("public"."geography", "public"."geography", float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_distancetree"("public"."geography", "public"."geography", float8, bool);
CREATE FUNCTION "public"."_st_distancetree"(IN "public"."geography", IN "public"."geography", IN float8, IN bool) RETURNS "float8" 
	AS '$libdir/postgis-2.1','geography_distance_tree'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_distancetree"(IN "public"."geography", IN "public"."geography", IN float8, IN bool) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._st_distancetree("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_distancetree"("public"."geography", "public"."geography");
CREATE FUNCTION "public"."_st_distancetree"(IN "public"."geography", IN "public"."geography") RETURNS "float8" 
	AS $BODY$SELECT _ST_DistanceTree($1, $2, 0.0, true)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_distancetree"(IN "public"."geography", IN "public"."geography") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._st_dwithinuncached("public"."geography", "public"."geography", float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_dwithinuncached"("public"."geography", "public"."geography", float8, bool);
CREATE FUNCTION "public"."_st_dwithinuncached"(IN "public"."geography", IN "public"."geography", IN float8, IN bool) RETURNS "bool" 
	AS '$libdir/postgis-2.1','geography_dwithin_uncached'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_dwithinuncached"(IN "public"."geography", IN "public"."geography", IN float8, IN bool) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._st_dwithinuncached("public"."geography", "public"."geography", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_dwithinuncached"("public"."geography", "public"."geography", float8);
CREATE FUNCTION "public"."_st_dwithinuncached"(IN "public"."geography", IN "public"."geography", IN float8) RETURNS "bool" 
	AS $BODY$SELECT $1 && _ST_Expand($2,$3) AND $2 && _ST_Expand($1,$3) AND _ST_DWithinUnCached($1, $2, $3, true)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_dwithinuncached"(IN "public"."geography", IN "public"."geography", IN float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_polygon("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_polygon"("public"."geometry", int4);
CREATE FUNCTION "public"."st_polygon"(IN "public"."geometry", IN int4) RETURNS "public"."geometry" 
	AS $BODY$ 
	SELECT ST_SetSRID(ST_MakePolygon($1), $2)
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_polygon"(IN "public"."geometry", IN int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_polygon"(IN "public"."geometry", IN int4) IS 'args: aLineString, srid - Returns a polygon built from the specified linestring and SRID.';

-- ----------------------------
--  Function structure for public.st_area("public"."geography", bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_area"("public"."geography", bool);
CREATE FUNCTION "public"."st_area"(IN geog "public"."geography", IN use_spheroid bool DEFAULT true) RETURNS "float8" 
	AS '$libdir/postgis-2.1','geography_area'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_area"(IN geog "public"."geography", IN use_spheroid bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_area"(IN geog "public"."geography", IN use_spheroid bool) IS 'args: geog, use_spheroid=true - Returns the area of the surface if it is a polygon or multi-polygon. For "geometry" type area is in SRID units. For "geography" area is in square meters.';

-- ----------------------------
--  Function structure for public.st_area(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_area"(text);
CREATE FUNCTION "public"."st_area"(IN text) RETURNS "float8" 
	AS $BODY$ SELECT ST_Area($1::geometry);  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_area"(IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_length("public"."geography", bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_length"("public"."geography", bool);
CREATE FUNCTION "public"."st_length"(IN geog "public"."geography", IN use_spheroid bool DEFAULT true) RETURNS "float8" 
	AS '$libdir/postgis-2.1','geography_length'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_length"(IN geog "public"."geography", IN use_spheroid bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_length"(IN geog "public"."geography", IN use_spheroid bool) IS 'args: geog, use_spheroid=true - Returns the 2d length of the geometry if it is a linestring or multilinestring. geometry are in units of spatial reference and geography are in meters (default spheroid)';

-- ----------------------------
--  Function structure for public.st_length(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_length"(text);
CREATE FUNCTION "public"."st_length"(IN text) RETURNS "float8" 
	AS $BODY$ SELECT ST_Length($1::geometry);  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_length"(IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_project("public"."geography", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_project"("public"."geography", float8, float8);
CREATE FUNCTION "public"."st_project"(IN geog "public"."geography", IN distance float8, IN azimuth float8) RETURNS "public"."geography" 
	AS '$libdir/postgis-2.1','geography_project'
	LANGUAGE c
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_project"(IN geog "public"."geography", IN distance float8, IN azimuth float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_project"(IN geog "public"."geography", IN distance float8, IN azimuth float8) IS 'args: g1, distance, azimuth - Returns a POINT projected from a start point using a distance in meters and bearing (azimuth) in radians.';

-- ----------------------------
--  Function structure for public.st_azimuth("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_azimuth"("public"."geography", "public"."geography");
CREATE FUNCTION "public"."st_azimuth"(IN geog1 "public"."geography", IN geog2 "public"."geography") RETURNS "float8" 
	AS '$libdir/postgis-2.1','geography_azimuth'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_azimuth"(IN geog1 "public"."geography", IN geog2 "public"."geography") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_azimuth"(IN geog1 "public"."geography", IN geog2 "public"."geography") IS 'args: pointA, pointB - Returns the north-based azimuth as the angle in radians measured clockwise from the vertical on pointA to pointB.';

-- ----------------------------
--  Function structure for public.st_perimeter("public"."geography", bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_perimeter"("public"."geography", bool);
CREATE FUNCTION "public"."st_perimeter"(IN geog "public"."geography", IN use_spheroid bool DEFAULT true) RETURNS "float8" 
	AS '$libdir/postgis-2.1','geography_perimeter'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_perimeter"(IN geog "public"."geography", IN use_spheroid bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_perimeter"(IN geog "public"."geography", IN use_spheroid bool) IS 'args: geog, use_spheroid=true - Return the length measurement of the boundary of an ST_Surface or ST_MultiSurface geometry or geography. (Polygon, Multipolygon). geometry measurement is in units of spatial reference and geography is in meters.';

-- ----------------------------
--  Function structure for public._st_pointoutside("public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_pointoutside"("public"."geography");
CREATE FUNCTION "public"."_st_pointoutside"(IN "public"."geography") RETURNS "public"."geography" 
	AS '$libdir/postgis-2.1','geography_point_outside'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_pointoutside"(IN "public"."geography") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._st_covers("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_covers"("public"."geography", "public"."geography");
CREATE FUNCTION "public"."_st_covers"(IN "public"."geography", IN "public"."geography") RETURNS "bool" 
	AS '$libdir/postgis-2.1','geography_covers'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_covers"(IN "public"."geography", IN "public"."geography") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_covers("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_covers"("public"."geography", "public"."geography");
CREATE FUNCTION "public"."st_covers"(IN "public"."geography", IN "public"."geography") RETURNS "bool" 
	AS $BODY$SELECT $1 && $2 AND _ST_Covers($1, $2)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_covers"(IN "public"."geography", IN "public"."geography") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_covers"(IN "public"."geography", IN "public"."geography") IS 'args: geogpolyA, geogpointB - Returns 1 (TRUE) if no point in Geometry B is outside Geometry A';

-- ----------------------------
--  Function structure for public.st_covers(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_covers"(text, text);
CREATE FUNCTION "public"."st_covers"(IN text, IN text) RETURNS "bool" 
	AS $BODY$ SELECT ST_Covers($1::geometry, $2::geometry);  $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_covers"(IN text, IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_coveredby("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_coveredby"("public"."geography", "public"."geography");
CREATE FUNCTION "public"."st_coveredby"(IN "public"."geography", IN "public"."geography") RETURNS "bool" 
	AS $BODY$SELECT $1 && $2 AND _ST_Covers($2, $1)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_coveredby"(IN "public"."geography", IN "public"."geography") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_coveredby"(IN "public"."geography", IN "public"."geography") IS 'args: geogA, geogB - Returns 1 (TRUE) if no point in Geometry/Geography A is outside Geometry/Geography B';

-- ----------------------------
--  Function structure for public.st_coveredby(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_coveredby"(text, text);
CREATE FUNCTION "public"."st_coveredby"(IN text, IN text) RETURNS "bool" 
	AS $BODY$ SELECT ST_CoveredBy($1::geometry, $2::geometry);  $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_coveredby"(IN text, IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_segmentize("public"."geography", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_segmentize"("public"."geography", float8);
CREATE FUNCTION "public"."st_segmentize"(IN geog "public"."geography", IN max_segment_length float8) RETURNS "public"."geography" 
	AS '$libdir/postgis-2.1','geography_segmentize'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_segmentize"(IN geog "public"."geography", IN max_segment_length float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_segmentize"(IN geog "public"."geography", IN max_segment_length float8) IS 'args: geog, max_segment_length - Return a modified geometry/geography having no segment longer than the given distance. Distance computation is performed in 2d only. For geometry, length units are in units of spatial reference. For geography, units are in meters.';

-- ----------------------------
--  Function structure for public.st_intersects("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_intersects"("public"."geography", "public"."geography");
CREATE FUNCTION "public"."st_intersects"(IN "public"."geography", IN "public"."geography") RETURNS "bool" 
	AS $BODY$SELECT $1 && $2 AND _ST_Distance($1, $2, 0.0, false) < 0.00001$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_intersects"(IN "public"."geography", IN "public"."geography") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_intersects"(IN "public"."geography", IN "public"."geography") IS 'args: geogA, geogB - Returns TRUE if the Geometries/Geography "spatially intersect in 2D" - (share any portion of space) and FALSE if they dont (they are Disjoint). For geography -- tolerance is 0.00001 meters (so any points that close are considered to intersect)';

-- ----------------------------
--  Function structure for public.st_intersects(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_intersects"(text, text);
CREATE FUNCTION "public"."st_intersects"(IN text, IN text) RETURNS "bool" 
	AS $BODY$ SELECT ST_Intersects($1::geometry, $2::geometry);  $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_intersects"(IN text, IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._st_bestsrid("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_bestsrid"("public"."geography", "public"."geography");
CREATE FUNCTION "public"."_st_bestsrid"(IN "public"."geography", IN "public"."geography") RETURNS "int4" 
	AS '$libdir/postgis-2.1','geography_bestsrid'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_bestsrid"(IN "public"."geography", IN "public"."geography") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._st_bestsrid("public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_bestsrid"("public"."geography");
CREATE FUNCTION "public"."_st_bestsrid"(IN "public"."geography") RETURNS "int4" 
	AS $BODY$SELECT _ST_BestSRID($1,$1)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_bestsrid"(IN "public"."geography") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_buffer("public"."geography", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_buffer"("public"."geography", float8);
CREATE FUNCTION "public"."st_buffer"(IN "public"."geography", IN float8) RETURNS "public"."geography" 
	AS $BODY$SELECT geography(ST_Transform(ST_Buffer(ST_Transform(geometry($1), _ST_BestSRID($1)), $2), 4326))$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_buffer"(IN "public"."geography", IN float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_buffer"(IN "public"."geography", IN float8) IS 'args: g1, radius_of_buffer_in_meters - (T) For geometry: Returns a geometry that represents all points whose distance from this Geometry is less than or equal to distance. Calculations are in the Spatial Reference System of this Geometry. For geography: Uses a planar transform wrapper. Introduced in 1.5 support for different end cap and mitre settings to control shape. buffer_style options: quad_segs=#,endcap=round|flat|square,join=round|mitre|bevel,mitre_limit=#.#';

-- ----------------------------
--  Function structure for public.st_buffer(text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_buffer"(text, float8);
CREATE FUNCTION "public"."st_buffer"(IN text, IN float8) RETURNS "public"."geometry" 
	AS $BODY$ SELECT ST_Buffer($1::geometry, $2);  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_buffer"(IN text, IN float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_intersection("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_intersection"("public"."geography", "public"."geography");
CREATE FUNCTION "public"."st_intersection"(IN "public"."geography", IN "public"."geography") RETURNS "public"."geography" 
	AS $BODY$SELECT geography(ST_Transform(ST_Intersection(ST_Transform(geometry($1), _ST_BestSRID($1, $2)), ST_Transform(geometry($2), _ST_BestSRID($1, $2))), 4326))$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_intersection"(IN "public"."geography", IN "public"."geography") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_intersection"(IN "public"."geography", IN "public"."geography") IS 'args: geogA, geogB - (T) Returns a geometry that represents the shared portion of geomA and geomB. The geography implementation does a transform to geometry to do the intersection and then transform back to WGS84.';

-- ----------------------------
--  Function structure for public.st_intersection(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_intersection"(text, text);
CREATE FUNCTION "public"."st_intersection"(IN text, IN text) RETURNS "public"."geometry" 
	AS $BODY$ SELECT ST_Intersection($1::geometry, $2::geometry);  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_intersection"(IN text, IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_asbinary("public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asbinary"("public"."geography");
CREATE FUNCTION "public"."st_asbinary"(IN "public"."geography") RETURNS "bytea" 
	AS '$libdir/postgis-2.1','LWGEOM_asBinary'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asbinary"(IN "public"."geography") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_asbinary"(IN "public"."geography") IS 'args: g1 - Return the Well-Known Binary (WKB) representation of the geometry/geography without SRID meta data.';

-- ----------------------------
--  Function structure for public.st_asbinary("public"."geography", text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asbinary"("public"."geography", text);
CREATE FUNCTION "public"."st_asbinary"(IN "public"."geography", IN text) RETURNS "bytea" 
	AS $BODY$ SELECT ST_AsBinary($1::geometry, $2);  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asbinary"(IN "public"."geography", IN text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_asbinary"(IN "public"."geography", IN text) IS 'args: g1, NDR_or_XDR - Return the Well-Known Binary (WKB) representation of the geometry/geography without SRID meta data.';

-- ----------------------------
--  Function structure for public.st_asewkt("public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asewkt"("public"."geography");
CREATE FUNCTION "public"."st_asewkt"(IN "public"."geography") RETURNS "text" 
	AS '$libdir/postgis-2.1','LWGEOM_asEWKT'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asewkt"(IN "public"."geography") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_asewkt"(IN "public"."geography") IS 'args: g1 - Return the Well-Known Text (WKT) representation of the geometry with SRID meta data.';

-- ----------------------------
--  Function structure for public.st_asewkt(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asewkt"(text);
CREATE FUNCTION "public"."st_asewkt"(IN text) RETURNS "text" 
	AS $BODY$ SELECT ST_AsEWKT($1::geometry);  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asewkt"(IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometrytype("public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometrytype"("public"."geography");
CREATE FUNCTION "public"."geometrytype"(IN "public"."geography") RETURNS "text" 
	AS '$libdir/postgis-2.1','LWGEOM_getTYPE'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometrytype"(IN "public"."geography") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_summary("public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_summary"("public"."geography");
CREATE FUNCTION "public"."st_summary"(IN "public"."geography") RETURNS "text" 
	AS '$libdir/postgis-2.1','LWGEOM_summary'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_summary"(IN "public"."geography") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_summary"(IN "public"."geography") IS 'args: g - Returns a text summary of the contents of the geometry.';

-- ----------------------------
--  Function structure for public.st_geohash("public"."geography", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geohash"("public"."geography", int4);
CREATE FUNCTION "public"."st_geohash"(IN geog "public"."geography", IN maxchars int4 DEFAULT 0) RETURNS "text" 
	AS '$libdir/postgis-2.1','ST_GeoHash'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geohash"(IN geog "public"."geography", IN maxchars int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_distance_sphere("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_distance_sphere"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_distance_sphere"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "float8" 
	AS $BODY$
	select st_distance(geography($1),geography($2),false)
	$BODY$
	LANGUAGE sql
	COST 300
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_distance_sphere"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_distance_sphere"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: geomlonlatA, geomlonlatB - Returns minimum distance in meters between two lon/lat geometries. Uses a spherical earth and radius of 6370986 meters. Faster than ST_Distance_Spheroid , but less accurate. PostGIS versions prior to 1.5 only implemented for points.';

-- ----------------------------
--  Function structure for public.postgis_type_name(varchar, int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_type_name"(varchar, int4, bool);
CREATE FUNCTION "public"."postgis_type_name"(IN geomname varchar, IN coord_dimension int4, IN use_new_name bool DEFAULT true) RETURNS "varchar" 
	AS $BODY$
 SELECT CASE WHEN $3 THEN new_name ELSE old_name END As geomname
 	FROM 
 	( VALUES
 		 ('GEOMETRY', 'Geometry', 2) ,
 		 	('GEOMETRY', 'GeometryZ', 3) ,
 		 	('GEOMETRY', 'GeometryZM', 4) ,
			('GEOMETRYCOLLECTION', 'GeometryCollection', 2) ,
			('GEOMETRYCOLLECTION', 'GeometryCollectionZ', 3) ,
			('GEOMETRYCOLLECTIONM', 'GeometryCollectionM', 3) ,
			('GEOMETRYCOLLECTION', 'GeometryCollectionZM', 4) ,
			
			('POINT', 'Point',2) ,
			('POINTM','PointM',3) ,
			('POINT', 'PointZ',3) ,
			('POINT', 'PointZM',4) ,
			
			('MULTIPOINT','MultiPoint',2) ,
			('MULTIPOINT','MultiPointZ',3) ,
			('MULTIPOINTM','MultiPointM',3) ,
			('MULTIPOINT','MultiPointZM',4) ,
			
			('POLYGON', 'Polygon',2) ,
			('POLYGON', 'PolygonZ',3) ,
			('POLYGONM', 'PolygonM',3) ,
			('POLYGON', 'PolygonZM',4) ,
			
			('MULTIPOLYGON', 'MultiPolygon',2) ,
			('MULTIPOLYGON', 'MultiPolygonZ',3) ,
			('MULTIPOLYGONM', 'MultiPolygonM',3) ,
			('MULTIPOLYGON', 'MultiPolygonZM',4) ,
			
			('MULTILINESTRING', 'MultiLineString',2) ,
			('MULTILINESTRING', 'MultiLineStringZ',3) ,
			('MULTILINESTRINGM', 'MultiLineStringM',3) ,
			('MULTILINESTRING', 'MultiLineStringZM',4) ,
			
			('LINESTRING', 'LineString',2) ,
			('LINESTRING', 'LineStringZ',3) ,
			('LINESTRINGM', 'LineStringM',3) ,
			('LINESTRING', 'LineStringZM',4) ,
			
			('CIRCULARSTRING', 'CircularString',2) ,
			('CIRCULARSTRING', 'CircularStringZ',3) ,
			('CIRCULARSTRINGM', 'CircularStringM',3) ,
			('CIRCULARSTRING', 'CircularStringZM',4) ,
			
			('COMPOUNDCURVE', 'CompoundCurve',2) ,
			('COMPOUNDCURVE', 'CompoundCurveZ',3) ,
			('COMPOUNDCURVEM', 'CompoundCurveM',3) ,
			('COMPOUNDCURVE', 'CompoundCurveZM',4) ,
			
			('CURVEPOLYGON', 'CurvePolygon',2) ,
			('CURVEPOLYGON', 'CurvePolygonZ',3) ,
			('CURVEPOLYGONM', 'CurvePolygonM',3) ,
			('CURVEPOLYGON', 'CurvePolygonZM',4) ,
			
			('MULTICURVE', 'MultiCurve',2 ) ,
			('MULTICURVE', 'MultiCurveZ',3 ) ,
			('MULTICURVEM', 'MultiCurveM',3 ) ,
			('MULTICURVE', 'MultiCurveZM',4 ) ,
			
			('MULTISURFACE', 'MultiSurface', 2) ,
			('MULTISURFACE', 'MultiSurfaceZ', 3) ,
			('MULTISURFACEM', 'MultiSurfaceM', 3) ,
			('MULTISURFACE', 'MultiSurfaceZM', 4) ,
			
			('POLYHEDRALSURFACE', 'PolyhedralSurface',2) ,
			('POLYHEDRALSURFACE', 'PolyhedralSurfaceZ',3) ,
			('POLYHEDRALSURFACEM', 'PolyhedralSurfaceM',3) ,
			('POLYHEDRALSURFACE', 'PolyhedralSurfaceZM',4) ,
			
			('TRIANGLE', 'Triangle',2) ,
			('TRIANGLE', 'TriangleZ',3) ,
			('TRIANGLEM', 'TriangleM',3) ,
			('TRIANGLE', 'TriangleZM',4) ,

			('TIN', 'Tin', 2),
			('TIN', 'TinZ', 3),
			('TIN', 'TinM', 3),
			('TIN', 'TinZM', 4) )
			 As g(old_name, new_name, coord_dimension)
		WHERE (upper(old_name) = upper($1) OR upper(new_name) = upper($1))
			AND coord_dimension = $2;
$BODY$
	LANGUAGE sql
	COST 200
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_type_name"(IN geomname varchar, IN coord_dimension int4, IN use_new_name bool) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.postgis_constraint_srid(text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_constraint_srid"(text, text, text);
CREATE FUNCTION "public"."postgis_constraint_srid"(IN geomschema text, IN geomtable text, IN geomcolumn text) RETURNS "int4" 
	AS $BODY$
SELECT replace(replace(split_part(s.consrc, ' = ', 2), ')', ''), '(', '')::integer
		 FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
		 WHERE n.nspname = $1
		 AND c.relname = $2
		 AND a.attname = $3
		 AND a.attrelid = c.oid
		 AND s.connamespace = n.oid
		 AND s.conrelid = c.oid
		 AND a.attnum = ANY (s.conkey)
		 AND s.consrc LIKE '%srid(% = %';
$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."postgis_constraint_srid"(IN geomschema text, IN geomtable text, IN geomcolumn text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.postgis_constraint_dims(text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_constraint_dims"(text, text, text);
CREATE FUNCTION "public"."postgis_constraint_dims"(IN geomschema text, IN geomtable text, IN geomcolumn text) RETURNS "int4" 
	AS $BODY$
SELECT  replace(split_part(s.consrc, ' = ', 2), ')', '')::integer
		 FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
		 WHERE n.nspname = $1
		 AND c.relname = $2
		 AND a.attname = $3
		 AND a.attrelid = c.oid
		 AND s.connamespace = n.oid
		 AND s.conrelid = c.oid
		 AND a.attnum = ANY (s.conkey)
		 AND s.consrc LIKE '%ndims(% = %';
$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."postgis_constraint_dims"(IN geomschema text, IN geomtable text, IN geomcolumn text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.postgis_constraint_type(text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_constraint_type"(text, text, text);
CREATE FUNCTION "public"."postgis_constraint_type"(IN geomschema text, IN geomtable text, IN geomcolumn text) RETURNS "varchar" 
	AS $BODY$
SELECT  replace(split_part(s.consrc, '''', 2), ')', '')::varchar		
		 FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
		 WHERE n.nspname = $1
		 AND c.relname = $2
		 AND a.attname = $3
		 AND a.attrelid = c.oid
		 AND s.connamespace = n.oid
		 AND s.conrelid = c.oid
		 AND a.attnum = ANY (s.conkey)
		 AND s.consrc LIKE '%geometrytype(% = %';
$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."postgis_constraint_type"(IN geomschema text, IN geomtable text, IN geomcolumn text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_3ddistance("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_3ddistance"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_3ddistance"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-2.1','distance3d'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_3ddistance"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_3ddistance"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: g1, g2 - For geometry type Returns the 3-dimensional cartesian minimum distance (based on spatial ref) between two geometries in projected units.';

-- ----------------------------
--  Function structure for public.st_3dmaxdistance("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_3dmaxdistance"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_3dmaxdistance"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-2.1','LWGEOM_maxdistance3d'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_3dmaxdistance"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_3dmaxdistance"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: g1, g2 - For geometry type Returns the 3-dimensional cartesian maximum distance (based on spatial ref) between two geometries in projected units.';

-- ----------------------------
--  Function structure for public.st_3dclosestpoint("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_3dclosestpoint"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_3dclosestpoint"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_closestpoint3d'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_3dclosestpoint"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_3dclosestpoint"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: g1, g2 - Returns the 3-dimensional point on g1 that is closest to g2. This is the first point of the 3D shortest line.';

-- ----------------------------
--  Function structure for public.st_3dshortestline("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_3dshortestline"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_3dshortestline"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_shortestline3d'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_3dshortestline"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_3dshortestline"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: g1, g2 - Returns the 3-dimensional shortest line between two geometries';

-- ----------------------------
--  Function structure for public.st_3dlongestline("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_3dlongestline"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_3dlongestline"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_longestline3d'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_3dlongestline"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_3dlongestline"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: g1, g2 - Returns the 3-dimensional longest line between two geometries';

-- ----------------------------
--  Function structure for public._st_3ddwithin("public"."geometry", "public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_3ddwithin"("public"."geometry", "public"."geometry", float8);
CREATE FUNCTION "public"."_st_3ddwithin"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) RETURNS "bool" 
	AS '$libdir/postgis-2.1','LWGEOM_dwithin3d'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_3ddwithin"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_3ddwithin("public"."geometry", "public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_3ddwithin"("public"."geometry", "public"."geometry", float8);
CREATE FUNCTION "public"."st_3ddwithin"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) RETURNS "bool" 
	AS $BODY$SELECT $1 && ST_Expand($2,$3) AND $2 && ST_Expand($1,$3) AND _ST_3DDWithin($1, $2, $3)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_3ddwithin"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_3ddwithin"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) IS 'args: g1, g2, distance_of_srid - For 3d (z) geometry type Returns true if two geometries 3d distance is within number of units.';

-- ----------------------------
--  Function structure for public._st_3ddfullywithin("public"."geometry", "public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_3ddfullywithin"("public"."geometry", "public"."geometry", float8);
CREATE FUNCTION "public"."_st_3ddfullywithin"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) RETURNS "bool" 
	AS '$libdir/postgis-2.1','LWGEOM_dfullywithin3d'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_3ddfullywithin"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_3ddfullywithin("public"."geometry", "public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_3ddfullywithin"("public"."geometry", "public"."geometry", float8);
CREATE FUNCTION "public"."st_3ddfullywithin"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) RETURNS "bool" 
	AS $BODY$SELECT $1 && ST_Expand($2,$3) AND $2 && ST_Expand($1,$3) AND _ST_3DDFullyWithin($1, $2, $3)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_3ddfullywithin"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_3ddfullywithin"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) IS 'args: g1, g2, distance - Returns true if all of the 3D geometries are within the specified distance of one another.';

-- ----------------------------
--  Function structure for public._st_3dintersects("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_3dintersects"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."_st_3dintersects"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.1','intersects3d'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_3dintersects"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_3dintersects("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_3dintersects"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_3dintersects"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS $BODY$SELECT $1 && $2 AND _ST_3DIntersects($1, $2)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_3dintersects"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_3dintersects"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: geomA, geomB - Returns TRUE if the Geometries "spatially intersect" in 3d - only for points and linestrings';

-- ----------------------------
--  Function structure for public.st_coorddim("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_coorddim"("public"."geometry");
CREATE FUNCTION "public"."st_coorddim"(IN geometry "public"."geometry") RETURNS "int2" 
	AS '$libdir/postgis-2.1','LWGEOM_ndims'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_coorddim"(IN geometry "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_coorddim"(IN geometry "public"."geometry") IS 'args: geomA - Return the coordinate dimension of the ST_Geometry value.';

-- ----------------------------
--  Function structure for public.st_curvetoline("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_curvetoline"("public"."geometry", int4);
CREATE FUNCTION "public"."st_curvetoline"(IN "public"."geometry", IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_curve_segmentize'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_curvetoline"(IN "public"."geometry", IN int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_curvetoline"(IN "public"."geometry", IN int4) IS 'args: curveGeom, segments_per_qtr_circle - Converts a CIRCULARSTRING/CURVEDPOLYGON to a LINESTRING/POLYGON';

-- ----------------------------
--  Function structure for public.st_curvetoline("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_curvetoline"("public"."geometry");
CREATE FUNCTION "public"."st_curvetoline"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_CurveToLine($1, 32)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_curvetoline"(IN "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_curvetoline"(IN "public"."geometry") IS 'args: curveGeom - Converts a CIRCULARSTRING/CURVEDPOLYGON to a LINESTRING/POLYGON';

-- ----------------------------
--  Function structure for public.st_hasarc("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_hasarc"("public"."geometry");
CREATE FUNCTION "public"."st_hasarc"(IN geometry "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.1','LWGEOM_has_arc'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_hasarc"(IN geometry "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_hasarc"(IN geometry "public"."geometry") IS 'args: geomA - Returns true if a geometry or geometry collection contains a circular string';

-- ----------------------------
--  Function structure for public.st_linetocurve("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_linetocurve"("public"."geometry");
CREATE FUNCTION "public"."st_linetocurve"(IN geometry "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_line_desegmentize'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_linetocurve"(IN geometry "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_linetocurve"(IN geometry "public"."geometry") IS 'args: geomANoncircular - Converts a LINESTRING/POLYGON to a CIRCULARSTRING, CURVED POLYGON';

-- ----------------------------
--  Function structure for public._st_orderingequals("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_orderingequals"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."_st_orderingequals"(IN geometrya "public"."geometry", IN geometryb "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.1','LWGEOM_same'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_orderingequals"(IN geometrya "public"."geometry", IN geometryb "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_orderingequals("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_orderingequals"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_orderingequals"(IN geometrya "public"."geometry", IN geometryb "public"."geometry") RETURNS "bool" 
	AS $BODY$ 
	SELECT $1 ~= $2 AND _ST_OrderingEquals($1, $2)
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_orderingequals"(IN geometrya "public"."geometry", IN geometryb "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_orderingequals"(IN geometrya "public"."geometry", IN geometryb "public"."geometry") IS 'args: A, B - Returns true if the given geometries represent the same geometry and points are in the same directional order.';

-- ----------------------------
--  Function structure for public.st_point(float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_point"(float8, float8);
CREATE FUNCTION "public"."st_point"(IN float8, IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_makepoint'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_point"(IN float8, IN float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_point"(IN float8, IN float8) IS 'args: x_lon, y_lat - Returns an ST_Point with the given coordinate values. OGC alias for ST_MakePoint.';

-- ----------------------------
--  Function structure for public.st_wkbtosql(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_wkbtosql"(bytea);
CREATE FUNCTION "public"."st_wkbtosql"(IN wkb bytea) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','LWGEOM_from_WKB'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_wkbtosql"(IN wkb bytea) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_wkbtosql"(IN wkb bytea) IS 'args: WKB - Return a specified ST_Geometry value from Well-Known Binary representation (WKB). This is an alias name for ST_GeomFromWKB that takes no srid';

-- ----------------------------
--  Function structure for public.st_locatebetween("public"."geometry", float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_locatebetween"("public"."geometry", float8, float8, float8);
CREATE FUNCTION "public"."st_locatebetween"(IN geometry "public"."geometry", IN frommeasure float8, IN tomeasure float8, IN leftrightoffset float8 DEFAULT 0.0) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','ST_LocateBetween'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_locatebetween"(IN geometry "public"."geometry", IN frommeasure float8, IN tomeasure float8, IN leftrightoffset float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_locatebetween"(IN geometry "public"."geometry", IN frommeasure float8, IN tomeasure float8, IN leftrightoffset float8) IS 'args: geomA, measure_start, measure_end, offset - Return a derived geometry collection value with elements that match the specified range of measures inclusively. Polygonal elements are not supported.';

-- ----------------------------
--  Function structure for public.st_locatealong("public"."geometry", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_locatealong"("public"."geometry", float8, float8);
CREATE FUNCTION "public"."st_locatealong"(IN geometry "public"."geometry", IN measure float8, IN leftrightoffset float8 DEFAULT 0.0) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','ST_LocateAlong'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_locatealong"(IN geometry "public"."geometry", IN measure float8, IN leftrightoffset float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_locatealong"(IN geometry "public"."geometry", IN measure float8, IN leftrightoffset float8) IS 'args: ageom_with_measure, a_measure, offset - Return a derived geometry collection value with elements that match the specified measure. Polygonal elements are not supported.';

-- ----------------------------
--  Function structure for public.st_locatebetweenelevations("public"."geometry", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_locatebetweenelevations"("public"."geometry", float8, float8);
CREATE FUNCTION "public"."st_locatebetweenelevations"(IN geometry "public"."geometry", IN fromelevation float8, IN toelevation float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.1','ST_LocateBetweenElevations'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_locatebetweenelevations"(IN geometry "public"."geometry", IN fromelevation float8, IN toelevation float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_locatebetweenelevations"(IN geometry "public"."geometry", IN fromelevation float8, IN toelevation float8) IS 'args: geom_mline, elevation_start, elevation_end - Return a derived geometry (collection) value with elements that intersect the specified range of elevations inclusively. Only 3D, 4D LINESTRINGS and MULTILINESTRINGS are supported.';

-- ----------------------------
--  Function structure for public.st_interpolatepoint("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_interpolatepoint"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_interpolatepoint"(IN line "public"."geometry", IN point "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-2.1','ST_InterpolatePoint'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_interpolatepoint"(IN line "public"."geometry", IN point "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_interpolatepoint"(IN line "public"."geometry", IN point "public"."geometry") IS 'args: line, point - Return the value of the measure dimension of a geometry at the point closed to the provided point.';

-- ----------------------------
--  Function structure for public.st_minimumboundingcircle("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_minimumboundingcircle"("public"."geometry", int4);
CREATE FUNCTION "public"."st_minimumboundingcircle"(IN inputgeom "public"."geometry", IN segs_per_quarter int4 DEFAULT 48) RETURNS "public"."geometry" 
	AS $BODY$
	DECLARE
	hull GEOMETRY;
	ring GEOMETRY;
	center GEOMETRY;
	radius DOUBLE PRECISION;
	dist DOUBLE PRECISION;
	d DOUBLE PRECISION;
	idx1 integer;
	idx2 integer;
	l1 GEOMETRY;
	l2 GEOMETRY;
	p1 GEOMETRY;
	p2 GEOMETRY;
	a1 DOUBLE PRECISION;
	a2 DOUBLE PRECISION;


	BEGIN

	-- First compute the ConvexHull of the geometry
	hull = ST_ConvexHull(inputgeom);
	--A point really has no MBC
	IF ST_GeometryType(hull) = 'ST_Point' THEN
		RETURN hull;
	END IF;
	-- convert the hull perimeter to a linestring so we can manipulate individual points
	--If its already a linestring force it to a closed linestring
	ring = CASE WHEN ST_GeometryType(hull) = 'ST_LineString' THEN ST_AddPoint(hull, ST_StartPoint(hull)) ELSE ST_ExteriorRing(hull) END;

	dist = 0;
	-- Brute Force - check every pair
	FOR i in 1 .. (ST_NumPoints(ring)-2)
		LOOP
			FOR j in i .. (ST_NumPoints(ring)-1)
				LOOP
				d = ST_Distance(ST_PointN(ring,i),ST_PointN(ring,j));
				-- Check the distance and update if larger
				IF (d > dist) THEN
					dist = d;
					idx1 = i;
					idx2 = j;
				END IF;
			END LOOP;
		END LOOP;

	-- We now have the diameter of the convex hull.  The following line returns it if desired.
	-- RETURN ST_MakeLine(ST_PointN(ring,idx1),ST_PointN(ring,idx2));

	-- Now for the Minimum Bounding Circle.  Since we know the two points furthest from each
	-- other, the MBC must go through those two points. Start with those points as a diameter of a circle.

	-- The radius is half the distance between them and the center is midway between them
	radius = ST_Distance(ST_PointN(ring,idx1),ST_PointN(ring,idx2)) / 2.0;
	center = ST_LineInterpolatePoint(ST_MakeLine(ST_PointN(ring,idx1),ST_PointN(ring,idx2)),0.5);

	-- Loop through each vertex and check if the distance from the center to the point
	-- is greater than the current radius.
	FOR k in 1 .. (ST_NumPoints(ring)-1)
		LOOP
		IF(k <> idx1 and k <> idx2) THEN
			dist = ST_Distance(center,ST_PointN(ring,k));
			IF (dist > radius) THEN
				-- We have to expand the circle.  The new circle must pass trhough
				-- three points - the two original diameters and this point.

				-- Draw a line from the first diameter to this point
				l1 = ST_Makeline(ST_PointN(ring,idx1),ST_PointN(ring,k));
				-- Compute the midpoint
				p1 = ST_LineInterpolatePoint(l1,0.5);
				-- Rotate the line 90 degrees around the midpoint (perpendicular bisector)
				l1 = ST_Rotate(l1,pi()/2,p1);
				--  Compute the azimuth of the bisector
				a1 = ST_Azimuth(ST_PointN(l1,1),ST_PointN(l1,2));
				--  Extend the line in each direction the new computed distance to insure they will intersect
				l1 = ST_AddPoint(l1,ST_Makepoint(ST_X(ST_PointN(l1,2))+sin(a1)*dist,ST_Y(ST_PointN(l1,2))+cos(a1)*dist),-1);
				l1 = ST_AddPoint(l1,ST_Makepoint(ST_X(ST_PointN(l1,1))-sin(a1)*dist,ST_Y(ST_PointN(l1,1))-cos(a1)*dist),0);

				-- Repeat for the line from the point to the other diameter point
				l2 = ST_Makeline(ST_PointN(ring,idx2),ST_PointN(ring,k));
				p2 = ST_LineInterpolatePoint(l2,0.5);
				l2 = ST_Rotate(l2,pi()/2,p2);
				a2 = ST_Azimuth(ST_PointN(l2,1),ST_PointN(l2,2));
				l2 = ST_AddPoint(l2,ST_Makepoint(ST_X(ST_PointN(l2,2))+sin(a2)*dist,ST_Y(ST_PointN(l2,2))+cos(a2)*dist),-1);
				l2 = ST_AddPoint(l2,ST_Makepoint(ST_X(ST_PointN(l2,1))-sin(a2)*dist,ST_Y(ST_PointN(l2,1))-cos(a2)*dist),0);

				-- The new center is the intersection of the two bisectors
				center = ST_Intersection(l1,l2);
				-- The new radius is the distance to any of the three points
				radius = ST_Distance(center,ST_PointN(ring,idx1));
			END IF;
		END IF;
		END LOOP;
	--DONE!!  Return the MBC via the buffer command
	RETURN ST_Buffer(center,radius,segs_per_quarter);

	END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_minimumboundingcircle"(IN inputgeom "public"."geometry", IN segs_per_quarter int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_minimumboundingcircle"(IN inputgeom "public"."geometry", IN segs_per_quarter int4) IS 'args: geomA, num_segs_per_qt_circ=48 - Returns the smallest circle polygon that can fully contain a geometry. Default uses 48 segments per quarter circle.';

-- ----------------------------
--  Function structure for public._st_concavehull("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_concavehull"("public"."geometry");
CREATE FUNCTION "public"."_st_concavehull"(IN param_inputgeom "public"."geometry") RETURNS "public"."geometry" 
	AS $BODY$
	DECLARE     
	vexhull GEOMETRY;
	var_resultgeom geometry;
	var_inputgeom geometry;
	vexring GEOMETRY;
	cavering GEOMETRY;
	cavept geometry[];
	seglength double precision;
	var_tempgeom geometry;
	scale_factor integer := 1;
	i integer;
	
	BEGIN

		-- First compute the ConvexHull of the geometry
		vexhull := ST_ConvexHull(param_inputgeom);
		var_inputgeom := param_inputgeom;
		--A point really has no concave hull
		IF ST_GeometryType(vexhull) = 'ST_Point' OR ST_GeometryType(vexHull) = 'ST_LineString' THEN
			RETURN vexhull;
		END IF;

		-- convert the hull perimeter to a linestring so we can manipulate individual points
		vexring := CASE WHEN ST_GeometryType(vexhull) = 'ST_LineString' THEN vexhull ELSE ST_ExteriorRing(vexhull) END;
		IF abs(ST_X(ST_PointN(vexring,1))) < 1 THEN --scale the geometry to prevent stupid precision errors - not sure it works so make low for now
			scale_factor := 100;
			vexring := ST_Scale(vexring, scale_factor,scale_factor);
			var_inputgeom := ST_Scale(var_inputgeom, scale_factor, scale_factor);
			--RAISE NOTICE 'Scaling';
		END IF;
		seglength := ST_Length(vexring)/least(ST_NPoints(vexring)*2,1000) ;

		vexring := ST_Segmentize(vexring, seglength);
		-- find the point on the original geom that is closest to each point of the convex hull and make a new linestring out of it.
		cavering := ST_Collect(
			ARRAY(

				SELECT 
					ST_ClosestPoint(var_inputgeom, pt ) As the_geom
					FROM (
						SELECT  ST_PointN(vexring, n ) As pt, n
							FROM 
							generate_series(1, ST_NPoints(vexring) ) As n
						) As pt
				
				)
			)
		; 
		

		var_resultgeom := ST_MakeLine(geom) 
			FROM ST_Dump(cavering) As foo;

		IF ST_IsSimple(var_resultgeom) THEN
			var_resultgeom := ST_MakePolygon(var_resultgeom);
			--RAISE NOTICE 'is Simple: %', var_resultgeom;
		ELSE 
			--RAISE NOTICE 'is not Simple: %', var_resultgeom;
			var_resultgeom := ST_ConvexHull(var_resultgeom);
		END IF;
		
		IF scale_factor > 1 THEN -- scale the result back
			var_resultgeom := ST_Scale(var_resultgeom, 1/scale_factor, 1/scale_factor);
		END IF;
		RETURN var_resultgeom;
	
	END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_concavehull"(IN param_inputgeom "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_concavehull("public"."geometry", float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_concavehull"("public"."geometry", float8, bool);
CREATE FUNCTION "public"."st_concavehull"(IN param_geom "public"."geometry", IN param_pctconvex float8, IN param_allow_holes bool DEFAULT false) RETURNS "public"."geometry" 
	AS $BODY$
	DECLARE
		var_convhull geometry := ST_ConvexHull(param_geom);
		var_param_geom geometry := param_geom;
		var_initarea float := ST_Area(var_convhull);
		var_newarea float := var_initarea;
		var_div integer := 6; 
		var_tempgeom geometry;
		var_tempgeom2 geometry;
		var_cent geometry;
		var_geoms geometry[4]; 
		var_enline geometry;
		var_resultgeom geometry;
		var_atempgeoms geometry[];
		var_buf float := 1; 
	BEGIN
		-- We start with convex hull as our base
		var_resultgeom := var_convhull;
		
		IF param_pctconvex = 1 THEN
			return var_resultgeom;
		ELSIF ST_GeometryType(var_param_geom) = 'ST_Polygon' THEN -- it is as concave as it is going to get
			IF param_allow_holes THEN -- leave the holes
				RETURN var_param_geom;
			ELSE -- remove the holes
				var_resultgeom := ST_MakePolygon(ST_ExteriorRing(var_param_geom));
				RETURN var_resultgeom;
			END IF;
		END IF;
		IF ST_Dimension(var_resultgeom) > 1 AND param_pctconvex BETWEEN 0 and 0.98 THEN
		-- get linestring that forms envelope of geometry
			var_enline := ST_Boundary(ST_Envelope(var_param_geom));
			var_buf := ST_Length(var_enline)/1000.0;
			IF ST_GeometryType(var_param_geom) = 'ST_MultiPoint' AND ST_NumGeometries(var_param_geom) BETWEEN 4 and 200 THEN
			-- we make polygons out of points since they are easier to cave in. 
			-- Note we limit to between 4 and 200 points because this process is slow and gets quadratically slow
				var_buf := sqrt(ST_Area(var_convhull)*0.8/(ST_NumGeometries(var_param_geom)*ST_NumGeometries(var_param_geom)));
				var_atempgeoms := ARRAY(SELECT geom FROM ST_DumpPoints(var_param_geom));
				-- 5 and 10 and just fudge factors
				var_tempgeom := ST_Union(ARRAY(SELECT geom
						FROM (
						-- fuse near neighbors together
						SELECT DISTINCT ON (i) i,  ST_Distance(var_atempgeoms[i],var_atempgeoms[j]), ST_Buffer(ST_MakeLine(var_atempgeoms[i], var_atempgeoms[j]) , var_buf*5, 'quad_segs=3') As geom
								FROM generate_series(1,array_upper(var_atempgeoms, 1)) As i
									INNER JOIN generate_series(1,array_upper(var_atempgeoms, 1)) As j 
										ON (
								 NOT ST_Intersects(var_atempgeoms[i],var_atempgeoms[j])
									AND ST_DWithin(var_atempgeoms[i],var_atempgeoms[j], var_buf*10)
									)
								UNION ALL
						-- catch the ones with no near neighbors
								SELECT i, 0, ST_Buffer(var_atempgeoms[i] , var_buf*10, 'quad_segs=3') As geom
								FROM generate_series(1,array_upper(var_atempgeoms, 1)) As i
									LEFT JOIN generate_series(ceiling(array_upper(var_atempgeoms,1)/2)::integer,array_upper(var_atempgeoms, 1)) As j 
										ON (
								 NOT ST_Intersects(var_atempgeoms[i],var_atempgeoms[j])
									AND ST_DWithin(var_atempgeoms[i],var_atempgeoms[j], var_buf*10) 
									)
									WHERE j IS NULL
								ORDER BY 1, 2
							) As foo	) );
				IF ST_IsValid(var_tempgeom) AND ST_GeometryType(var_tempgeom) = 'ST_Polygon' THEN
					var_tempgeom := ST_ForceSFS(ST_Intersection(var_tempgeom, var_convhull));
					IF param_allow_holes THEN
						var_param_geom := var_tempgeom;
					ELSE
						var_param_geom := ST_MakePolygon(ST_ExteriorRing(var_tempgeom));
					END IF;
					return var_param_geom;
				ELSIF ST_IsValid(var_tempgeom) THEN
					var_param_geom := ST_ForceSFS(ST_Intersection(var_tempgeom, var_convhull));	
				END IF;
			END IF;

			IF ST_GeometryType(var_param_geom) = 'ST_Polygon' THEN
				IF NOT param_allow_holes THEN
					var_param_geom := ST_MakePolygon(ST_ExteriorRing(var_param_geom));
				END IF;
				return var_param_geom;
			END IF;
            var_cent := ST_Centroid(var_param_geom);
            IF (ST_XMax(var_enline) - ST_XMin(var_enline) ) > var_buf AND (ST_YMax(var_enline) - ST_YMin(var_enline) ) > var_buf THEN
                    IF ST_Dwithin(ST_Centroid(var_convhull) , ST_Centroid(ST_Envelope(var_param_geom)), var_buf/2) THEN
                -- If the geometric dimension is > 1 and the object is symettric (cutting at centroid will not work -- offset a bit)
                        var_cent := ST_Translate(var_cent, (ST_XMax(var_enline) - ST_XMin(var_enline))/1000,  (ST_YMAX(var_enline) - ST_YMin(var_enline))/1000);
                    ELSE
                        -- uses closest point on geometry to centroid. I can't explain why we are doing this
                        var_cent := ST_ClosestPoint(var_param_geom,var_cent);
                    END IF;
                    IF ST_DWithin(var_cent, var_enline,var_buf) THEN
                        var_cent := ST_centroid(ST_Envelope(var_param_geom));
                    END IF;
                    -- break envelope into 4 triangles about the centroid of the geometry and returned the clipped geometry in each quadrant
                    FOR i in 1 .. 4 LOOP
                       var_geoms[i] := ST_MakePolygon(ST_MakeLine(ARRAY[ST_PointN(var_enline,i), ST_PointN(var_enline,i+1), var_cent, ST_PointN(var_enline,i)]));
                       var_geoms[i] := ST_ForceSFS(ST_Intersection(var_param_geom, ST_Buffer(var_geoms[i],var_buf)));
                       IF ST_IsValid(var_geoms[i]) THEN 
                            
                       ELSE
                            var_geoms[i] := ST_BuildArea(ST_MakeLine(ARRAY[ST_PointN(var_enline,i), ST_PointN(var_enline,i+1), var_cent, ST_PointN(var_enline,i)]));
                       END IF; 
                    END LOOP;
                    var_tempgeom := ST_Union(ARRAY[ST_ConvexHull(var_geoms[1]), ST_ConvexHull(var_geoms[2]) , ST_ConvexHull(var_geoms[3]), ST_ConvexHull(var_geoms[4])]); 
                    --RAISE NOTICE 'Curr vex % ', ST_AsText(var_tempgeom);
                    IF ST_Area(var_tempgeom) <= var_newarea AND ST_IsValid(var_tempgeom)  THEN --AND ST_GeometryType(var_tempgeom) ILIKE '%Polygon'
                        
                        var_tempgeom := ST_Buffer(ST_ConcaveHull(var_geoms[1],least(param_pctconvex + param_pctconvex/var_div),true),var_buf, 'quad_segs=2');
                        FOR i IN 1 .. 4 LOOP
                            var_geoms[i] := ST_Buffer(ST_ConcaveHull(var_geoms[i],least(param_pctconvex + param_pctconvex/var_div),true), var_buf, 'quad_segs=2');
                            IF ST_IsValid(var_geoms[i]) Then
                                var_tempgeom := ST_Union(var_tempgeom, var_geoms[i]);
                            ELSE
                                RAISE NOTICE 'Not valid % %', i, ST_AsText(var_tempgeom);
                                var_tempgeom := ST_Union(var_tempgeom, ST_ConvexHull(var_geoms[i]));
                            END IF; 
                        END LOOP;

                        --RAISE NOTICE 'Curr concave % ', ST_AsText(var_tempgeom);
                        IF ST_IsValid(var_tempgeom) THEN
                            var_resultgeom := var_tempgeom;
                        END IF;
                        var_newarea := ST_Area(var_resultgeom);
                    ELSIF ST_IsValid(var_tempgeom) THEN
                        var_resultgeom := var_tempgeom;
                    END IF;

                    IF ST_NumGeometries(var_resultgeom) > 1  THEN
                        var_tempgeom := _ST_ConcaveHull(var_resultgeom);
                        IF ST_IsValid(var_tempgeom) AND ST_GeometryType(var_tempgeom) ILIKE 'ST_Polygon' THEN
                            var_resultgeom := var_tempgeom;
                        ELSE
                            var_resultgeom := ST_Buffer(var_tempgeom,var_buf, 'quad_segs=2');
                        END IF;
                    END IF;
                    IF param_allow_holes = false THEN 
                    -- only keep exterior ring since we do not want holes
                        var_resultgeom := ST_MakePolygon(ST_ExteriorRing(var_resultgeom));
                    END IF;
                ELSE
                    var_resultgeom := ST_Buffer(var_resultgeom,var_buf);
                END IF;
                var_resultgeom := ST_ForceSFS(ST_Intersection(var_resultgeom, ST_ConvexHull(var_param_geom)));
            ELSE
                -- dimensions are too small to cut
                var_resultgeom := _ST_ConcaveHull(var_param_geom);
            END IF;
            RETURN var_resultgeom;
	END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_concavehull"(IN param_geom "public"."geometry", IN param_pctconvex float8, IN param_allow_holes bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_concavehull"(IN param_geom "public"."geometry", IN param_pctconvex float8, IN param_allow_holes bool) IS 'args: geomA, target_percent, allow_holes=false - The concave hull of a geometry represents a possibly concave geometry that encloses all geometries within the set. You can think of it as shrink wrapping.';

-- ----------------------------
--  Function structure for public._st_asx3d(int4, "public"."geometry", int4, int4, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_asx3d"(int4, "public"."geometry", int4, int4, text);
CREATE FUNCTION "public"."_st_asx3d"(IN int4, IN "public"."geometry", IN int4, IN int4, IN text) RETURNS "text" 
	AS '$libdir/postgis-2.1','LWGEOM_asX3D'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_asx3d"(IN int4, IN "public"."geometry", IN int4, IN int4, IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_asx3d("public"."geometry", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asx3d"("public"."geometry", int4, int4);
CREATE FUNCTION "public"."st_asx3d"(IN geom "public"."geometry", IN maxdecimaldigits int4 DEFAULT 15, IN "options" int4 DEFAULT 0) RETURNS "text" 
	AS $BODY$SELECT _ST_AsX3D(3,$1,$2,$3,'');$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asx3d"(IN geom "public"."geometry", IN maxdecimaldigits int4, IN "options" int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_asx3d"(IN geom "public"."geometry", IN maxdecimaldigits int4, IN "options" int4) IS 'args: g1, maxdecimaldigits=15, options=0 - Returns a Geometry in X3D xml node element format: ISO-IEC-19776-1.2-X3DEncodings-XML';

-- ----------------------------
--  Function structure for public.raster_in(cstring)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."raster_in"(cstring);
CREATE FUNCTION "public"."raster_in"(IN cstring) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.1','RASTER_in'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."raster_in"(IN cstring) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.raster_out("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."raster_out"("public"."raster");
CREATE FUNCTION "public"."raster_out"(IN "public"."raster") RETURNS "cstring" 
	AS '$libdir/rtpostgis-2.1','RASTER_out'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."raster_out"(IN "public"."raster") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.postgis_raster_lib_version()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_raster_lib_version"();
CREATE FUNCTION "public"."postgis_raster_lib_version"() RETURNS "text" 
	AS '$libdir/rtpostgis-2.1','RASTER_lib_version'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_raster_lib_version"() OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."postgis_raster_lib_version"() IS 'Reports full raster version and build configuration infos.';

-- ----------------------------
--  Function structure for public.postgis_raster_scripts_installed()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_raster_scripts_installed"();
CREATE FUNCTION "public"."postgis_raster_scripts_installed"() RETURNS "text" 
	AS $BODY$ SELECT '2.1.0'::text || ' r' || 11822::text AS version $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_raster_scripts_installed"() OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.postgis_raster_lib_build_date()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_raster_lib_build_date"();
CREATE FUNCTION "public"."postgis_raster_lib_build_date"() RETURNS "text" 
	AS '$libdir/rtpostgis-2.1','RASTER_lib_build_date'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_raster_lib_build_date"() OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."postgis_raster_lib_build_date"() IS 'Reports full raster library build date.';

-- ----------------------------
--  Function structure for public.postgis_gdal_version()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_gdal_version"();
CREATE FUNCTION "public"."postgis_gdal_version"() RETURNS "text" 
	AS '$libdir/rtpostgis-2.1','RASTER_gdal_version'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_gdal_version"() OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_convexhull("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_convexhull"("public"."raster");
CREATE FUNCTION "public"."st_convexhull"(IN "public"."raster") RETURNS "public"."geometry" 
	AS '$libdir/rtpostgis-2.1','RASTER_convex_hull'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_convexhull"(IN "public"."raster") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_minconvexhull("public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_minconvexhull"("public"."raster", int4);
CREATE FUNCTION "public"."st_minconvexhull"(IN rast "public"."raster", IN nband int4 DEFAULT NULL::integer) RETURNS "public"."geometry" 
	AS '$libdir/rtpostgis-2.1','RASTER_convex_hull'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_minconvexhull"(IN rast "public"."raster", IN nband int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.box3d("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."box3d"("public"."raster");
CREATE FUNCTION "public"."box3d"(IN "public"."raster") RETURNS "public"."box3d" 
	AS $BODY$select box3d(st_convexhull($1))$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."box3d"(IN "public"."raster") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_envelope("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_envelope"("public"."raster");
CREATE FUNCTION "public"."st_envelope"(IN "public"."raster") RETURNS "public"."geometry" 
	AS $BODY$select st_envelope(st_convexhull($1))$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_envelope"(IN "public"."raster") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_height("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_height"("public"."raster");
CREATE FUNCTION "public"."st_height"(IN "public"."raster") RETURNS "int4" 
	AS '$libdir/rtpostgis-2.1','RASTER_getHeight'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_height"(IN "public"."raster") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_height"(IN "public"."raster") IS 'args: rast - Returns the height of the raster in pixels.';

-- ----------------------------
--  Function structure for public.st_numbands("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_numbands"("public"."raster");
CREATE FUNCTION "public"."st_numbands"(IN "public"."raster") RETURNS "int4" 
	AS '$libdir/rtpostgis-2.1','RASTER_getNumBands'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_numbands"(IN "public"."raster") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_numbands"(IN "public"."raster") IS 'args: rast - Returns the number of bands in the raster object.';

-- ----------------------------
--  Function structure for public.st_scalex("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_scalex"("public"."raster");
CREATE FUNCTION "public"."st_scalex"(IN "public"."raster") RETURNS "float8" 
	AS '$libdir/rtpostgis-2.1','RASTER_getXScale'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_scalex"(IN "public"."raster") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_scalex"(IN "public"."raster") IS 'args: rast - Returns the X component of the pixel width in units of coordinate reference system.';

-- ----------------------------
--  Function structure for public.st_scaley("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_scaley"("public"."raster");
CREATE FUNCTION "public"."st_scaley"(IN "public"."raster") RETURNS "float8" 
	AS '$libdir/rtpostgis-2.1','RASTER_getYScale'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_scaley"(IN "public"."raster") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_scaley"(IN "public"."raster") IS 'args: rast - Returns the Y component of the pixel height in units of coordinate reference system.';

-- ----------------------------
--  Function structure for public.st_skewx("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_skewx"("public"."raster");
CREATE FUNCTION "public"."st_skewx"(IN "public"."raster") RETURNS "float8" 
	AS '$libdir/rtpostgis-2.1','RASTER_getXSkew'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_skewx"(IN "public"."raster") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_skewx"(IN "public"."raster") IS 'args: rast - Returns the georeference X skew (or rotation parameter).';

-- ----------------------------
--  Function structure for public.st_skewy("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_skewy"("public"."raster");
CREATE FUNCTION "public"."st_skewy"(IN "public"."raster") RETURNS "float8" 
	AS '$libdir/rtpostgis-2.1','RASTER_getYSkew'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_skewy"(IN "public"."raster") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_skewy"(IN "public"."raster") IS 'args: rast - Returns the georeference Y skew (or rotation parameter).';

-- ----------------------------
--  Function structure for public.st_srid("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_srid"("public"."raster");
CREATE FUNCTION "public"."st_srid"(IN "public"."raster") RETURNS "int4" 
	AS '$libdir/rtpostgis-2.1','RASTER_getSRID'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_srid"(IN "public"."raster") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_srid"(IN "public"."raster") IS 'args: rast - Returns the spatial reference identifier of the raster as defined in spatial_ref_sys table.';

-- ----------------------------
--  Function structure for public.st_upperleftx("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_upperleftx"("public"."raster");
CREATE FUNCTION "public"."st_upperleftx"(IN "public"."raster") RETURNS "float8" 
	AS '$libdir/rtpostgis-2.1','RASTER_getXUpperLeft'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_upperleftx"(IN "public"."raster") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_upperleftx"(IN "public"."raster") IS 'args: rast - Returns the upper left X coordinate of raster in projected spatial ref.';

-- ----------------------------
--  Function structure for public.st_upperlefty("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_upperlefty"("public"."raster");
CREATE FUNCTION "public"."st_upperlefty"(IN "public"."raster") RETURNS "float8" 
	AS '$libdir/rtpostgis-2.1','RASTER_getYUpperLeft'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_upperlefty"(IN "public"."raster") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_upperlefty"(IN "public"."raster") IS 'args: rast - Returns the upper left Y coordinate of raster in projected spatial ref.';

-- ----------------------------
--  Function structure for public.st_width("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_width"("public"."raster");
CREATE FUNCTION "public"."st_width"(IN "public"."raster") RETURNS "int4" 
	AS '$libdir/rtpostgis-2.1','RASTER_getWidth'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_width"(IN "public"."raster") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_width"(IN "public"."raster") IS 'args: rast - Returns the width of the raster in pixels.';

-- ----------------------------
--  Function structure for public.st_pixelwidth("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_pixelwidth"("public"."raster");
CREATE FUNCTION "public"."st_pixelwidth"(IN "public"."raster") RETURNS "float8" 
	AS '$libdir/rtpostgis-2.1','RASTER_getPixelWidth'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_pixelwidth"(IN "public"."raster") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_pixelwidth"(IN "public"."raster") IS 'args: rast - Returns the pixel width in geometric units of the spatial reference system.';

-- ----------------------------
--  Function structure for public.st_pixelheight("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_pixelheight"("public"."raster");
CREATE FUNCTION "public"."st_pixelheight"(IN "public"."raster") RETURNS "float8" 
	AS '$libdir/rtpostgis-2.1','RASTER_getPixelHeight'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_pixelheight"(IN "public"."raster") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_pixelheight"(IN "public"."raster") IS 'args: rast - Returns the pixel height in geometric units of the spatial reference system.';

-- ----------------------------
--  Function structure for public.st_geotransform("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geotransform"("public"."raster");
CREATE FUNCTION "public"."st_geotransform"(IN "public"."raster", OUT imag float8, OUT jmag float8, OUT theta_i float8, OUT theta_ij float8, OUT xoffset float8, OUT yoffset float8) RETURNS "record" 
	AS '$libdir/rtpostgis-2.1','RASTER_getGeotransform'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geotransform"(IN "public"."raster", OUT imag float8, OUT jmag float8, OUT theta_i float8, OUT theta_ij float8, OUT xoffset float8, OUT yoffset float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_rotation("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_rotation"("public"."raster");
CREATE FUNCTION "public"."st_rotation"(IN "public"."raster") RETURNS "float8" 
	AS $BODY$ SELECT (ST_Geotransform($1)).theta_i $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."st_rotation"(IN "public"."raster") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_rotation"(IN "public"."raster") IS 'args: rast - Returns the rotation of the raster in radian.';

-- ----------------------------
--  Function structure for public.st_metadata("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_metadata"("public"."raster");
CREATE FUNCTION "public"."st_metadata"(IN rast "public"."raster", OUT upperleftx float8, OUT upperlefty float8, OUT width int4, OUT height int4, OUT scalex float8, OUT scaley float8, OUT skewx float8, OUT skewy float8, OUT srid int4, OUT numbands int4) RETURNS "record" 
	AS '$libdir/rtpostgis-2.1','RASTER_metadata'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_metadata"(IN rast "public"."raster", OUT upperleftx float8, OUT upperlefty float8, OUT width int4, OUT height int4, OUT scalex float8, OUT scaley float8, OUT skewx float8, OUT skewy float8, OUT srid int4, OUT numbands int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_metadata"(IN rast "public"."raster", OUT upperleftx float8, OUT upperlefty float8, OUT width int4, OUT height int4, OUT scalex float8, OUT scaley float8, OUT skewx float8, OUT skewy float8, OUT srid int4, OUT numbands int4) IS 'args: rast - Returns basic meta data about a raster object such as pixel size, rotation (skew), upper, lower left, etc.';

-- ----------------------------
--  Function structure for public.st_summary("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_summary"("public"."raster");
CREATE FUNCTION "public"."st_summary"(IN rast "public"."raster") RETURNS "text" 
	AS $BODY$
	DECLARE
		extent box2d;
		metadata record;
		bandmetadata record;
		msg text;
		msgset text[];
	BEGIN
		extent := ST_Extent(rast::geometry);
		metadata := ST_Metadata(rast);

		msg := 'Raster of ' || metadata.width || 'x' || metadata.height || ' pixels has ' || metadata.numbands || ' ';

		IF metadata.numbands = 1 THEN
			msg := msg || 'band ';
		ELSE
			msg := msg || 'bands ';
		END IF;
		msg := msg || 'and extent of ' || extent;

		IF
			metadata.skewx::numeric(16, 10) <> 0::numeric(16, 10) OR 
			metadata.skewy::numeric(16, 10) <> 0::numeric(16, 10)
		THEN
			msg := 'Skewed ' || overlay(msg placing 'r' from 1 for 1);
		END IF;

		msgset := Array[]::text[] || msg;

		FOR bandmetadata IN SELECT * FROM ST_BandMetadata(rast, ARRAY[]::int[]) LOOP
			msg := 'band ' || bandmetadata.bandnum || ' of pixtype ' || bandmetadata.pixeltype || ' is ';
			IF bandmetadata.isoutdb IS FALSE THEN
				msg := msg || 'in-db ';
			ELSE
				msg := msg || 'out-db ';
			END IF;

			msg := msg || 'with ';
			IF bandmetadata.nodatavalue IS NOT NULL THEN
				msg := msg || 'NODATA value of ' || bandmetadata.nodatavalue;
			ELSE
				msg := msg || 'no NODATA value';
			END IF;

			msgset := msgset || ('    ' || msg);
		END LOOP;

		RETURN array_to_string(msgset, E'\n');
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_summary"(IN rast "public"."raster") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_summary"(IN rast "public"."raster") IS 'args: rast - Returns a text summary of the contents of the raster.';

-- ----------------------------
--  Function structure for public.st_makeemptyraster(int4, int4, float8, float8, float8, float8, float8, float8, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_makeemptyraster"(int4, int4, float8, float8, float8, float8, float8, float8, int4);
CREATE FUNCTION "public"."st_makeemptyraster"(IN width int4, IN height int4, IN upperleftx float8, IN upperlefty float8, IN scalex float8, IN scaley float8, IN skewx float8, IN skewy float8, IN srid int4 DEFAULT 0) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.1','RASTER_makeEmpty'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_makeemptyraster"(IN width int4, IN height int4, IN upperleftx float8, IN upperlefty float8, IN scalex float8, IN scaley float8, IN skewx float8, IN skewy float8, IN srid int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_makeemptyraster"(IN width int4, IN height int4, IN upperleftx float8, IN upperlefty float8, IN scalex float8, IN scaley float8, IN skewx float8, IN skewy float8, IN srid int4) IS 'args: width, height, upperleftx, upperlefty, scalex, scaley, skewx, skewy, srid=unknown - Returns an empty raster (having no bands) of given dimensions (width & height), upperleft X and Y, pixel size and rotation (scalex, scaley, skewx & skewy) and reference system (srid). If a raster is passed in, returns a new raster with the same size, alignment and SRID. If srid is left out, the spatial ref is set to unknown (0).';

-- ----------------------------
--  Function structure for public.st_makeemptyraster(int4, int4, float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_makeemptyraster"(int4, int4, float8, float8, float8);
CREATE FUNCTION "public"."st_makeemptyraster"(IN width int4, IN height int4, IN upperleftx float8, IN upperlefty float8, IN pixelsize float8) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_makeemptyraster($1, $2, $3, $4, $5, -($5), 0, 0, ST_SRID('POINT(0 0)'::geometry)) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_makeemptyraster"(IN width int4, IN height int4, IN upperleftx float8, IN upperlefty float8, IN pixelsize float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_makeemptyraster"(IN width int4, IN height int4, IN upperleftx float8, IN upperlefty float8, IN pixelsize float8) IS 'args: width, height, upperleftx, upperlefty, pixelsize - Returns an empty raster (having no bands) of given dimensions (width & height), upperleft X and Y, pixel size and rotation (scalex, scaley, skewx & skewy) and reference system (srid). If a raster is passed in, returns a new raster with the same size, alignment and SRID. If srid is left out, the spatial ref is set to unknown (0).';

-- ----------------------------
--  Function structure for public.st_makeemptyraster("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_makeemptyraster"("public"."raster");
CREATE FUNCTION "public"."st_makeemptyraster"(IN rast "public"."raster") RETURNS "public"."raster" 
	AS $BODY$
		DECLARE
			w int;
			h int;
			ul_x double precision;
			ul_y double precision;
			scale_x double precision;
			scale_y double precision;
			skew_x double precision;
			skew_y double precision;
			sr_id int;
		BEGIN
			SELECT width, height, upperleftx, upperlefty, scalex, scaley, skewx, skewy, srid INTO w, h, ul_x, ul_y, scale_x, scale_y, skew_x, skew_y, sr_id FROM ST_Metadata(rast);
			RETURN st_makeemptyraster(w, h, ul_x, ul_y, scale_x, scale_y, skew_x, skew_y, sr_id);
		END;
    $BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_makeemptyraster"(IN rast "public"."raster") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_makeemptyraster"(IN rast "public"."raster") IS 'args: rast - Returns an empty raster (having no bands) of given dimensions (width & height), upperleft X and Y, pixel size and rotation (scalex, scaley, skewx & skewy) and reference system (srid). If a raster is passed in, returns a new raster with the same size, alignment and SRID. If srid is left out, the spatial ref is set to unknown (0).';

-- ----------------------------
--  Function structure for public.st_addband("public"."raster", "public"."_addbandarg")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_addband"("public"."raster", "public"."_addbandarg");
CREATE FUNCTION "public"."st_addband"(IN rast "public"."raster", IN addbandargset "public"."_addbandarg") RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.1','RASTER_addBand'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_addband"(IN rast "public"."raster", IN addbandargset "public"."_addbandarg") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_addband"(IN rast "public"."raster", IN addbandargset "public"."_addbandarg") IS 'args: rast, addbandargset - Returns a raster with the new band(s) of given type added with given initial value in the given index location. If no index is specified, the band is added to the end.';

-- ----------------------------
--  Function structure for public.st_addband("public"."raster", int4, text, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_addband"("public"."raster", int4, text, float8, float8);
CREATE FUNCTION "public"."st_addband"(IN rast "public"."raster", IN "index" int4, IN pixeltype text, IN initialvalue float8 DEFAULT 0::numeric, IN nodataval float8 DEFAULT NULL::double precision) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_addband($1, ARRAY[ROW($2, $3, $4, $5)]::addbandarg[]) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_addband"(IN rast "public"."raster", IN "index" int4, IN pixeltype text, IN initialvalue float8, IN nodataval float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_addband"(IN rast "public"."raster", IN "index" int4, IN pixeltype text, IN initialvalue float8, IN nodataval float8) IS 'args: rast, index, pixeltype, initialvalue=0, nodataval=NULL - Returns a raster with the new band(s) of given type added with given initial value in the given index location. If no index is specified, the band is added to the end.';

-- ----------------------------
--  Function structure for public.st_addband("public"."raster", text, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_addband"("public"."raster", text, float8, float8);
CREATE FUNCTION "public"."st_addband"(IN rast "public"."raster", IN pixeltype text, IN initialvalue float8 DEFAULT 0::numeric, IN nodataval float8 DEFAULT NULL::double precision) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_addband($1, ARRAY[ROW(NULL, $2, $3, $4)]::addbandarg[]) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_addband"(IN rast "public"."raster", IN pixeltype text, IN initialvalue float8, IN nodataval float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_addband"(IN rast "public"."raster", IN pixeltype text, IN initialvalue float8, IN nodataval float8) IS 'args: rast, pixeltype, initialvalue=0, nodataval=NULL - Returns a raster with the new band(s) of given type added with given initial value in the given index location. If no index is specified, the band is added to the end.';

-- ----------------------------
--  Function structure for public.raster_left("public"."raster", "public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."raster_left"("public"."raster", "public"."raster");
CREATE FUNCTION "public"."raster_left"(IN "public"."raster", IN "public"."raster") RETURNS "bool" 
	AS $BODY$select $1::geometry << $2::geometry$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."raster_left"(IN "public"."raster", IN "public"."raster") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_addband("public"."raster", "public"."raster", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_addband"("public"."raster", "public"."raster", int4, int4);
CREATE FUNCTION "public"."st_addband"(IN torast "public"."raster", IN fromrast "public"."raster", IN fromband int4 DEFAULT 1, IN torastindex int4 DEFAULT NULL::integer) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.1','RASTER_copyBand'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_addband"(IN torast "public"."raster", IN fromrast "public"."raster", IN fromband int4, IN torastindex int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_addband"(IN torast "public"."raster", IN fromrast "public"."raster", IN fromband int4, IN torastindex int4) IS 'args: torast, fromrast, fromband=1, torastindex=at_end - Returns a raster with the new band(s) of given type added with given initial value in the given index location. If no index is specified, the band is added to the end.';

-- ----------------------------
--  Function structure for public.st_addband("public"."raster", "public"."_raster", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_addband"("public"."raster", "public"."_raster", int4, int4);
CREATE FUNCTION "public"."st_addband"(IN torast "public"."raster", IN fromrasts "public"."_raster", IN fromband int4 DEFAULT 1, IN torastindex int4 DEFAULT NULL::integer) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.1','RASTER_addBandRasterArray'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_addband"(IN torast "public"."raster", IN fromrasts "public"."_raster", IN fromband int4, IN torastindex int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_addband"(IN torast "public"."raster", IN fromrasts "public"."_raster", IN fromband int4, IN torastindex int4) IS 'args: torast, fromrasts, fromband=1, torastindex=at_end - Returns a raster with the new band(s) of given type added with given initial value in the given index location. If no index is specified, the band is added to the end.';

-- ----------------------------
--  Function structure for public.st_addband("public"."raster", int4, text, _int4, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_addband"("public"."raster", int4, text, _int4, float8);
CREATE FUNCTION "public"."st_addband"(IN rast "public"."raster", IN "index" int4, IN outdbfile text, IN outdbindex _int4, IN nodataval float8 DEFAULT NULL::double precision) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.1','RASTER_addBandOutDB'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_addband"(IN rast "public"."raster", IN "index" int4, IN outdbfile text, IN outdbindex _int4, IN nodataval float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_addband"(IN rast "public"."raster", IN "index" int4, IN outdbfile text, IN outdbindex _int4, IN nodataval float8) IS 'args: rast, index, outdbfile, outdbindex, nodataval=NULL - Returns a raster with the new band(s) of given type added with given initial value in the given index location. If no index is specified, the band is added to the end.';

-- ----------------------------
--  Function structure for public.st_addband("public"."raster", text, _int4, int4, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_addband"("public"."raster", text, _int4, int4, float8);
CREATE FUNCTION "public"."st_addband"(IN rast "public"."raster", IN outdbfile text, IN outdbindex _int4, IN "index" int4 DEFAULT NULL::integer, IN nodataval float8 DEFAULT NULL::double precision) RETURNS "public"."raster" 
	AS $BODY$ SELECT ST_AddBand($1, $4, $2, $3, $5) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_addband"(IN rast "public"."raster", IN outdbfile text, IN outdbindex _int4, IN "index" int4, IN nodataval float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_addband"(IN rast "public"."raster", IN outdbfile text, IN outdbindex _int4, IN "index" int4, IN nodataval float8) IS 'args: rast, outdbfile, outdbindex, index=at_end, nodataval=NULL - Returns a raster with the new band(s) of given type added with given initial value in the given index location. If no index is specified, the band is added to the end.';

-- ----------------------------
--  Function structure for public.st_band("public"."raster", _int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_band"("public"."raster", _int4);
CREATE FUNCTION "public"."st_band"(IN rast "public"."raster", IN nbands _int4 DEFAULT ARRAY[1]) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.1','RASTER_band'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_band"(IN rast "public"."raster", IN nbands _int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_band"(IN rast "public"."raster", IN nbands _int4) IS 'args: rast, nbands = ARRAY[1] - Returns one or more bands of an existing raster as a new raster. Useful for building new rasters from existing rasters.';

-- ----------------------------
--  Function structure for public.st_band("public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_band"("public"."raster", int4);
CREATE FUNCTION "public"."st_band"(IN rast "public"."raster", IN nband int4) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_band($1, ARRAY[$2]) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_band"(IN rast "public"."raster", IN nband int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_band"(IN rast "public"."raster", IN nband int4) IS 'args: rast, nband - Returns one or more bands of an existing raster as a new raster. Useful for building new rasters from existing rasters.';

-- ----------------------------
--  Function structure for public.st_band("public"."raster", text, bpchar)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_band"("public"."raster", text, bpchar);
CREATE FUNCTION "public"."st_band"(IN rast "public"."raster", IN nbands text, IN "delimiter" bpchar DEFAULT ','::bpchar) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_band($1, regexp_split_to_array(regexp_replace($2, '[[:space:]]', '', 'g'), $3)::int[]) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_band"(IN rast "public"."raster", IN nbands text, IN "delimiter" bpchar) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_band"(IN rast "public"."raster", IN nbands text, IN "delimiter" bpchar) IS 'args: rast, nbands, delimiter=, - Returns one or more bands of an existing raster as a new raster. Useful for building new rasters from existing rasters.';

-- ----------------------------
--  Function structure for public._st_summarystats("public"."raster", int4, bool, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_summarystats"("public"."raster", int4, bool, float8);
CREATE FUNCTION "public"."_st_summarystats"(IN rast "public"."raster", IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN sample_percent float8 DEFAULT 1, OUT "count" int8, OUT "sum" float8, OUT mean float8, OUT stddev float8, OUT "min" float8, OUT "max" float8) RETURNS "record" 
	AS '$libdir/rtpostgis-2.1','RASTER_summaryStats'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_summarystats"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8, OUT "count" int8, OUT "sum" float8, OUT mean float8, OUT stddev float8, OUT "min" float8, OUT "max" float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_summarystats("public"."raster", int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_summarystats"("public"."raster", int4, bool);
CREATE FUNCTION "public"."st_summarystats"(IN rast "public"."raster", IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, OUT "count" int8, OUT "sum" float8, OUT mean float8, OUT stddev float8, OUT "min" float8, OUT "max" float8) RETURNS "record" 
	AS $BODY$ SELECT _st_summarystats($1, $2, $3, 1) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_summarystats"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, OUT "count" int8, OUT "sum" float8, OUT mean float8, OUT stddev float8, OUT "min" float8, OUT "max" float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_summarystats"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, OUT "count" int8, OUT "sum" float8, OUT mean float8, OUT stddev float8, OUT "min" float8, OUT "max" float8) IS 'args: rast, nband, exclude_nodata_value - Returns record consisting of count, sum, mean, stddev, min, max for a given raster band of a raster or raster coverage. Band 1 is assumed is no band is specified.';

-- ----------------------------
--  Function structure for public.st_summarystats("public"."raster", bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_summarystats"("public"."raster", bool);
CREATE FUNCTION "public"."st_summarystats"(IN rast "public"."raster", IN exclude_nodata_value bool, OUT "count" int8, OUT "sum" float8, OUT mean float8, OUT stddev float8, OUT "min" float8, OUT "max" float8) RETURNS "record" 
	AS $BODY$ SELECT _st_summarystats($1, 1, $2, 1) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_summarystats"(IN rast "public"."raster", IN exclude_nodata_value bool, OUT "count" int8, OUT "sum" float8, OUT mean float8, OUT stddev float8, OUT "min" float8, OUT "max" float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_summarystats"(IN rast "public"."raster", IN exclude_nodata_value bool, OUT "count" int8, OUT "sum" float8, OUT mean float8, OUT stddev float8, OUT "min" float8, OUT "max" float8) IS 'args: rast, exclude_nodata_value - Returns record consisting of count, sum, mean, stddev, min, max for a given raster band of a raster or raster coverage. Band 1 is assumed is no band is specified.';

-- ----------------------------
--  Function structure for public.st_approxsummarystats("public"."raster", int4, bool, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxsummarystats"("public"."raster", int4, bool, float8);
CREATE FUNCTION "public"."st_approxsummarystats"(IN rast "public"."raster", IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN sample_percent float8 DEFAULT 0.1, OUT "count" int8, OUT "sum" float8, OUT mean float8, OUT stddev float8, OUT "min" float8, OUT "max" float8) RETURNS "record" 
	AS $BODY$ SELECT _st_summarystats($1, $2, $3, $4) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxsummarystats"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8, OUT "count" int8, OUT "sum" float8, OUT mean float8, OUT stddev float8, OUT "min" float8, OUT "max" float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_approxsummarystats("public"."raster", int4, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxsummarystats"("public"."raster", int4, float8);
CREATE FUNCTION "public"."st_approxsummarystats"(IN rast "public"."raster", IN nband int4, IN sample_percent float8, OUT "count" int8, OUT "sum" float8, OUT mean float8, OUT stddev float8, OUT "min" float8, OUT "max" float8) RETURNS "record" 
	AS $BODY$ SELECT _st_summarystats($1, $2, TRUE, $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxsummarystats"(IN rast "public"."raster", IN nband int4, IN sample_percent float8, OUT "count" int8, OUT "sum" float8, OUT mean float8, OUT stddev float8, OUT "min" float8, OUT "max" float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_approxsummarystats("public"."raster", bool, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxsummarystats"("public"."raster", bool, float8);
CREATE FUNCTION "public"."st_approxsummarystats"(IN rast "public"."raster", IN exclude_nodata_value bool, IN sample_percent float8 DEFAULT 0.1, OUT "count" int8, OUT "sum" float8, OUT mean float8, OUT stddev float8, OUT "min" float8, OUT "max" float8) RETURNS "record" 
	AS $BODY$ SELECT _st_summarystats($1, 1, $2, $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxsummarystats"(IN rast "public"."raster", IN exclude_nodata_value bool, IN sample_percent float8, OUT "count" int8, OUT "sum" float8, OUT mean float8, OUT stddev float8, OUT "min" float8, OUT "max" float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_approxsummarystats("public"."raster", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxsummarystats"("public"."raster", float8);
CREATE FUNCTION "public"."st_approxsummarystats"(IN rast "public"."raster", IN sample_percent float8, OUT "count" int8, OUT "sum" float8, OUT mean float8, OUT stddev float8, OUT "min" float8, OUT "max" float8) RETURNS "record" 
	AS $BODY$ SELECT _st_summarystats($1, 1, TRUE, $2) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxsummarystats"(IN rast "public"."raster", IN sample_percent float8, OUT "count" int8, OUT "sum" float8, OUT mean float8, OUT stddev float8, OUT "min" float8, OUT "max" float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._st_summarystats(text, text, int4, bool, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_summarystats"(text, text, int4, bool, float8);
CREATE FUNCTION "public"."_st_summarystats"(IN rastertable text, IN rastercolumn text, IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN sample_percent float8 DEFAULT 1, OUT "count" int8, OUT "sum" float8, OUT mean float8, OUT stddev float8, OUT "min" float8, OUT "max" float8) RETURNS "record" 
	AS '$libdir/rtpostgis-2.1','RASTER_summaryStatsCoverage'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_summarystats"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8, OUT "count" int8, OUT "sum" float8, OUT mean float8, OUT stddev float8, OUT "min" float8, OUT "max" float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_summarystats(text, text, int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_summarystats"(text, text, int4, bool);
CREATE FUNCTION "public"."st_summarystats"(IN rastertable text, IN rastercolumn text, IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, OUT "count" int8, OUT "sum" float8, OUT mean float8, OUT stddev float8, OUT "min" float8, OUT "max" float8) RETURNS "record" 
	AS $BODY$ SELECT _st_summarystats($1, $2, $3, $4, 1) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_summarystats"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, OUT "count" int8, OUT "sum" float8, OUT mean float8, OUT stddev float8, OUT "min" float8, OUT "max" float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_summarystats"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, OUT "count" int8, OUT "sum" float8, OUT mean float8, OUT stddev float8, OUT "min" float8, OUT "max" float8) IS 'args: rastertable, rastercolumn, nband=1, exclude_nodata_value=true - Returns record consisting of count, sum, mean, stddev, min, max for a given raster band of a raster or raster coverage. Band 1 is assumed is no band is specified.';

-- ----------------------------
--  Function structure for public.st_summarystats(text, text, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_summarystats"(text, text, bool);
CREATE FUNCTION "public"."st_summarystats"(IN rastertable text, IN rastercolumn text, IN exclude_nodata_value bool, OUT "count" int8, OUT "sum" float8, OUT mean float8, OUT stddev float8, OUT "min" float8, OUT "max" float8) RETURNS "record" 
	AS $BODY$ SELECT _st_summarystats($1, $2, 1, $3, 1) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_summarystats"(IN rastertable text, IN rastercolumn text, IN exclude_nodata_value bool, OUT "count" int8, OUT "sum" float8, OUT mean float8, OUT stddev float8, OUT "min" float8, OUT "max" float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_summarystats"(IN rastertable text, IN rastercolumn text, IN exclude_nodata_value bool, OUT "count" int8, OUT "sum" float8, OUT mean float8, OUT stddev float8, OUT "min" float8, OUT "max" float8) IS 'args: rastertable, rastercolumn, exclude_nodata_value - Returns record consisting of count, sum, mean, stddev, min, max for a given raster band of a raster or raster coverage. Band 1 is assumed is no band is specified.';

-- ----------------------------
--  Function structure for public.st_approxsummarystats(text, text, int4, bool, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxsummarystats"(text, text, int4, bool, float8);
CREATE FUNCTION "public"."st_approxsummarystats"(IN rastertable text, IN rastercolumn text, IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN sample_percent float8 DEFAULT 0.1, OUT "count" int8, OUT "sum" float8, OUT mean float8, OUT stddev float8, OUT "min" float8, OUT "max" float8) RETURNS "record" 
	AS $BODY$ SELECT _st_summarystats($1, $2, $3, $4, $5) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxsummarystats"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8, OUT "count" int8, OUT "sum" float8, OUT mean float8, OUT stddev float8, OUT "min" float8, OUT "max" float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_approxsummarystats(text, text, int4, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxsummarystats"(text, text, int4, float8);
CREATE FUNCTION "public"."st_approxsummarystats"(IN rastertable text, IN rastercolumn text, IN nband int4, IN sample_percent float8, OUT "count" int8, OUT "sum" float8, OUT mean float8, OUT stddev float8, OUT "min" float8, OUT "max" float8) RETURNS "record" 
	AS $BODY$ SELECT _st_summarystats($1, $2, $3, TRUE, $4) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxsummarystats"(IN rastertable text, IN rastercolumn text, IN nband int4, IN sample_percent float8, OUT "count" int8, OUT "sum" float8, OUT mean float8, OUT stddev float8, OUT "min" float8, OUT "max" float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_approxsummarystats(text, text, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxsummarystats"(text, text, bool);
CREATE FUNCTION "public"."st_approxsummarystats"(IN rastertable text, IN rastercolumn text, IN exclude_nodata_value bool, OUT "count" int8, OUT "sum" float8, OUT mean float8, OUT stddev float8, OUT "min" float8, OUT "max" float8) RETURNS "record" 
	AS $BODY$ SELECT _st_summarystats($1, $2, 1, $3, 0.1) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxsummarystats"(IN rastertable text, IN rastercolumn text, IN exclude_nodata_value bool, OUT "count" int8, OUT "sum" float8, OUT mean float8, OUT stddev float8, OUT "min" float8, OUT "max" float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_approxsummarystats(text, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxsummarystats"(text, text, float8);
CREATE FUNCTION "public"."st_approxsummarystats"(IN rastertable text, IN rastercolumn text, IN sample_percent float8, OUT "count" int8, OUT "sum" float8, OUT mean float8, OUT stddev float8, OUT "min" float8, OUT "max" float8) RETURNS "record" 
	AS $BODY$ SELECT _st_summarystats($1, $2, 1, TRUE, $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxsummarystats"(IN rastertable text, IN rastercolumn text, IN sample_percent float8, OUT "count" int8, OUT "sum" float8, OUT mean float8, OUT stddev float8, OUT "min" float8, OUT "max" float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._st_count("public"."raster", int4, bool, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_count"("public"."raster", int4, bool, float8);
CREATE FUNCTION "public"."_st_count"(IN rast "public"."raster", IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN sample_percent float8 DEFAULT 1) RETURNS "int8" 
	AS $BODY$
	DECLARE
		rtn bigint;
	BEGIN
		IF exclude_nodata_value IS FALSE THEN
			SELECT width * height INTO rtn FROM ST_Metadata(rast);
		ELSE
			SELECT count INTO rtn FROM _st_summarystats($1, $2, $3, $4);
		END IF;

		RETURN rtn;
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_count"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_count("public"."raster", int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_count"("public"."raster", int4, bool);
CREATE FUNCTION "public"."st_count"(IN rast "public"."raster", IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true) RETURNS "int8" 
	AS $BODY$ SELECT _st_count($1, $2, $3, 1) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_count"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_count"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool) IS 'args: rast, nband=1, exclude_nodata_value=true - Returns the number of pixels in a given band of a raster or raster coverage. If no band is specified defaults to band 1. If exclude_nodata_value is set to true, will only count pixels that are not equal to the nodata value.';

-- ----------------------------
--  Function structure for public.st_count("public"."raster", bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_count"("public"."raster", bool);
CREATE FUNCTION "public"."st_count"(IN rast "public"."raster", IN exclude_nodata_value bool) RETURNS "int8" 
	AS $BODY$ SELECT _st_count($1, 1, $2, 1) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_count"(IN rast "public"."raster", IN exclude_nodata_value bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_count"(IN rast "public"."raster", IN exclude_nodata_value bool) IS 'args: rast, exclude_nodata_value - Returns the number of pixels in a given band of a raster or raster coverage. If no band is specified defaults to band 1. If exclude_nodata_value is set to true, will only count pixels that are not equal to the nodata value.';

-- ----------------------------
--  Function structure for public.st_approxcount("public"."raster", int4, bool, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxcount"("public"."raster", int4, bool, float8);
CREATE FUNCTION "public"."st_approxcount"(IN rast "public"."raster", IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN sample_percent float8 DEFAULT 0.1) RETURNS "int8" 
	AS $BODY$ SELECT _st_count($1, $2, $3, $4) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxcount"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_approxcount("public"."raster", int4, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxcount"("public"."raster", int4, float8);
CREATE FUNCTION "public"."st_approxcount"(IN rast "public"."raster", IN nband int4, IN sample_percent float8) RETURNS "int8" 
	AS $BODY$ SELECT _st_count($1, $2, TRUE, $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxcount"(IN rast "public"."raster", IN nband int4, IN sample_percent float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_approxcount("public"."raster", bool, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxcount"("public"."raster", bool, float8);
CREATE FUNCTION "public"."st_approxcount"(IN rast "public"."raster", IN exclude_nodata_value bool, IN sample_percent float8 DEFAULT 0.1) RETURNS "int8" 
	AS $BODY$ SELECT _st_count($1, 1, $2, $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxcount"(IN rast "public"."raster", IN exclude_nodata_value bool, IN sample_percent float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_approxcount("public"."raster", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxcount"("public"."raster", float8);
CREATE FUNCTION "public"."st_approxcount"(IN rast "public"."raster", IN sample_percent float8) RETURNS "int8" 
	AS $BODY$ SELECT _st_count($1, 1, TRUE, $2) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxcount"(IN rast "public"."raster", IN sample_percent float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._st_count(text, text, int4, bool, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_count"(text, text, int4, bool, float8);
CREATE FUNCTION "public"."_st_count"(IN rastertable text, IN rastercolumn text, IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN sample_percent float8 DEFAULT 1) RETURNS "int8" 
	AS $BODY$
	DECLARE
		curs refcursor;

		ctable text;
		ccolumn text;
		rast raster;

		rtn bigint;
		tmp bigint;
	BEGIN
		-- nband
		IF nband < 1 THEN
			RAISE WARNING 'Invalid band index (must use 1-based). Returning NULL';
			RETURN NULL;
		END IF;

		-- sample percent
		IF sample_percent < 0 OR sample_percent > 1 THEN
			RAISE WARNING 'Invalid sample percentage (must be between 0 and 1). Returning NULL';
			RETURN NULL;
		END IF;

		-- exclude_nodata_value IS TRUE
		IF exclude_nodata_value IS TRUE THEN
			SELECT count INTO rtn FROM _st_summarystats($1, $2, $3, $4, $5);
			RETURN rtn;
		END IF;

		-- clean rastertable and rastercolumn
		ctable := quote_ident(rastertable);
		ccolumn := quote_ident(rastercolumn);

		BEGIN
			OPEN curs FOR EXECUTE 'SELECT '
					|| ccolumn
					|| ' FROM '
					|| ctable
					|| ' WHERE '
					|| ccolumn
					|| ' IS NOT NULL';
		EXCEPTION
			WHEN OTHERS THEN
				RAISE WARNING 'Invalid table or column name. Returning NULL';
				RETURN NULL;
		END;

		rtn := 0;
		LOOP
			FETCH curs INTO rast;
			EXIT WHEN NOT FOUND;

			SELECT (width * height) INTO tmp FROM ST_Metadata(rast);
			rtn := rtn + tmp;
		END LOOP;

		CLOSE curs;

		RETURN rtn;
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_st_count"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_count(text, text, int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_count"(text, text, int4, bool);
CREATE FUNCTION "public"."st_count"(IN rastertable text, IN rastercolumn text, IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true) RETURNS "int8" 
	AS $BODY$ SELECT _st_count($1, $2, $3, $4, 1) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_count"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_count"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool) IS 'args: rastertable, rastercolumn, nband=1, exclude_nodata_value=true - Returns the number of pixels in a given band of a raster or raster coverage. If no band is specified defaults to band 1. If exclude_nodata_value is set to true, will only count pixels that are not equal to the nodata value.';

-- ----------------------------
--  Function structure for public.st_count(text, text, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_count"(text, text, bool);
CREATE FUNCTION "public"."st_count"(IN rastertable text, IN rastercolumn text, IN exclude_nodata_value bool) RETURNS "int8" 
	AS $BODY$ SELECT _st_count($1, $2, 1, $3, 1) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_count"(IN rastertable text, IN rastercolumn text, IN exclude_nodata_value bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_count"(IN rastertable text, IN rastercolumn text, IN exclude_nodata_value bool) IS 'args: rastertable, rastercolumn, exclude_nodata_value - Returns the number of pixels in a given band of a raster or raster coverage. If no band is specified defaults to band 1. If exclude_nodata_value is set to true, will only count pixels that are not equal to the nodata value.';

-- ----------------------------
--  Function structure for public.st_approxcount(text, text, int4, bool, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxcount"(text, text, int4, bool, float8);
CREATE FUNCTION "public"."st_approxcount"(IN rastertable text, IN rastercolumn text, IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN sample_percent float8 DEFAULT 0.1) RETURNS "int8" 
	AS $BODY$ SELECT _st_count($1, $2, $3, $4, $5) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxcount"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_approxcount(text, text, int4, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxcount"(text, text, int4, float8);
CREATE FUNCTION "public"."st_approxcount"(IN rastertable text, IN rastercolumn text, IN nband int4, IN sample_percent float8) RETURNS "int8" 
	AS $BODY$ SELECT _st_count($1, $2, $3, TRUE, $4) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxcount"(IN rastertable text, IN rastercolumn text, IN nband int4, IN sample_percent float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_approxcount(text, text, bool, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxcount"(text, text, bool, float8);
CREATE FUNCTION "public"."st_approxcount"(IN rastertable text, IN rastercolumn text, IN exclude_nodata_value bool, IN sample_percent float8 DEFAULT 0.1) RETURNS "int8" 
	AS $BODY$ SELECT _st_count($1, $2, 1, $3, $4) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxcount"(IN rastertable text, IN rastercolumn text, IN exclude_nodata_value bool, IN sample_percent float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_approxcount(text, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxcount"(text, text, float8);
CREATE FUNCTION "public"."st_approxcount"(IN rastertable text, IN rastercolumn text, IN sample_percent float8) RETURNS "int8" 
	AS $BODY$ SELECT _st_count($1, $2, 1, TRUE, $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxcount"(IN rastertable text, IN rastercolumn text, IN sample_percent float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._st_histogram("public"."raster", int4, bool, float8, int4, _float8, bool, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_histogram"("public"."raster", int4, bool, float8, int4, _float8, bool, float8, float8);
CREATE FUNCTION "public"."_st_histogram"(IN rast "public"."raster", IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN sample_percent float8 DEFAULT 1, IN bins int4 DEFAULT 0, IN width _float8 DEFAULT NULL::double precision[], IN "right" bool DEFAULT false, IN "min" float8 DEFAULT NULL::double precision, IN "max" float8 DEFAULT NULL::double precision, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) RETURNS SETOF "record" 
	AS '$libdir/rtpostgis-2.1','RASTER_histogram'
	LANGUAGE c
	COST 1
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_histogram"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8, IN bins int4, IN width _float8, IN "right" bool, IN "min" float8, IN "max" float8, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_approxquantile(text, text, int4, bool, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxquantile"(text, text, int4, bool, float8, float8);
CREATE FUNCTION "public"."st_approxquantile"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8, IN quantile float8) RETURNS "float8" 
	AS $BODY$ SELECT (_st_quantile($1, $2, $3, $4, $5, ARRAY[$6]::double precision[])).value $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxquantile"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8, IN quantile float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_histogram("public"."raster", int4, bool, int4, _float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_histogram"("public"."raster", int4, bool, int4, _float8, bool);
CREATE FUNCTION "public"."st_histogram"(IN rast "public"."raster", IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN bins int4 DEFAULT 0, IN width _float8 DEFAULT NULL::double precision[], IN "right" bool DEFAULT false, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT min, max, count, percent FROM _st_histogram($1, $2, $3, 1, $4, $5, $6) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_histogram"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN bins int4, IN width _float8, IN "right" bool, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_histogram"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN bins int4, IN width _float8, IN "right" bool, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) IS 'args: rast, nband=1, exclude_nodata_value=true, bins=autocomputed, width=NULL, right=false - Returns a set of record summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.';

-- ----------------------------
--  Function structure for public.st_histogram("public"."raster", int4, bool, int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_histogram"("public"."raster", int4, bool, int4, bool);
CREATE FUNCTION "public"."st_histogram"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN bins int4, IN "right" bool, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT min, max, count, percent FROM _st_histogram($1, $2, $3, 1, $4, NULL, $5) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_histogram"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN bins int4, IN "right" bool, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_histogram"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN bins int4, IN "right" bool, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) IS 'args: rast, nband, exclude_nodata_value, bins, right - Returns a set of record summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.';

-- ----------------------------
--  Function structure for public.st_histogram("public"."raster", int4, int4, _float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_histogram"("public"."raster", int4, int4, _float8, bool);
CREATE FUNCTION "public"."st_histogram"(IN rast "public"."raster", IN nband int4, IN bins int4, IN width _float8 DEFAULT NULL::double precision[], IN "right" bool DEFAULT false, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT min, max, count, percent FROM _st_histogram($1, $2, TRUE, 1, $3, $4, $5) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_histogram"(IN rast "public"."raster", IN nband int4, IN bins int4, IN width _float8, IN "right" bool, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_histogram"(IN rast "public"."raster", IN nband int4, IN bins int4, IN width _float8, IN "right" bool, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) IS 'args: rast, nband, bins, width=NULL, right=false - Returns a set of record summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.';

-- ----------------------------
--  Function structure for public.st_histogram("public"."raster", int4, int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_histogram"("public"."raster", int4, int4, bool);
CREATE FUNCTION "public"."st_histogram"(IN rast "public"."raster", IN nband int4, IN bins int4, IN "right" bool, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT min, max, count, percent FROM _st_histogram($1, $2, TRUE, 1, $3, NULL, $4) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_histogram"(IN rast "public"."raster", IN nband int4, IN bins int4, IN "right" bool, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_histogram"(IN rast "public"."raster", IN nband int4, IN bins int4, IN "right" bool, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) IS 'args: rast, nband, bins, right - Returns a set of record summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.';

-- ----------------------------
--  Function structure for public.st_approxhistogram("public"."raster", int4, bool, float8, int4, _float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxhistogram"("public"."raster", int4, bool, float8, int4, _float8, bool);
CREATE FUNCTION "public"."st_approxhistogram"(IN rast "public"."raster", IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN sample_percent float8 DEFAULT 0.1, IN bins int4 DEFAULT 0, IN width _float8 DEFAULT NULL::double precision[], IN "right" bool DEFAULT false, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT min, max, count, percent FROM _st_histogram($1, $2, $3, $4, $5, $6, $7) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxhistogram"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8, IN bins int4, IN width _float8, IN "right" bool, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_approxhistogram("public"."raster", int4, bool, float8, int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxhistogram"("public"."raster", int4, bool, float8, int4, bool);
CREATE FUNCTION "public"."st_approxhistogram"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8, IN bins int4, IN "right" bool, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT min, max, count, percent FROM _st_histogram($1, $2, $3, $4, $5, NULL, $6) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxhistogram"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8, IN bins int4, IN "right" bool, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_approxhistogram("public"."raster", int4, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxhistogram"("public"."raster", int4, float8);
CREATE FUNCTION "public"."st_approxhistogram"(IN rast "public"."raster", IN nband int4, IN sample_percent float8, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT min, max, count, percent FROM _st_histogram($1, $2, TRUE, $3, 0, NULL, FALSE) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxhistogram"(IN rast "public"."raster", IN nband int4, IN sample_percent float8, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_approxhistogram("public"."raster", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxhistogram"("public"."raster", float8);
CREATE FUNCTION "public"."st_approxhistogram"(IN rast "public"."raster", IN sample_percent float8, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT min, max, count, percent FROM _st_histogram($1, 1, TRUE, $2, 0, NULL, FALSE) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxhistogram"(IN rast "public"."raster", IN sample_percent float8, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_approxhistogram("public"."raster", int4, float8, int4, _float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxhistogram"("public"."raster", int4, float8, int4, _float8, bool);
CREATE FUNCTION "public"."st_approxhistogram"(IN rast "public"."raster", IN nband int4, IN sample_percent float8, IN bins int4, IN width _float8 DEFAULT NULL::double precision[], IN "right" bool DEFAULT false, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT min, max, count, percent FROM _st_histogram($1, $2, TRUE, $3, $4, $5, $6) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxhistogram"(IN rast "public"."raster", IN nband int4, IN sample_percent float8, IN bins int4, IN width _float8, IN "right" bool, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_approxhistogram("public"."raster", int4, float8, int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxhistogram"("public"."raster", int4, float8, int4, bool);
CREATE FUNCTION "public"."st_approxhistogram"(IN rast "public"."raster", IN nband int4, IN sample_percent float8, IN bins int4, IN "right" bool, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT min, max, count, percent FROM _st_histogram($1, $2, TRUE, $3, $4, NULL, $5) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxhistogram"(IN rast "public"."raster", IN nband int4, IN sample_percent float8, IN bins int4, IN "right" bool, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_approxhistogram(text, text, int4, float8, int4, _float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxhistogram"(text, text, int4, float8, int4, _float8, bool);
CREATE FUNCTION "public"."st_approxhistogram"(IN rastertable text, IN rastercolumn text, IN nband int4, IN sample_percent float8, IN bins int4, IN width _float8 DEFAULT NULL::double precision[], IN "right" bool DEFAULT false, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT _st_histogram($1, $2, $3, TRUE, $4, $5, $6, $7) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxhistogram"(IN rastertable text, IN rastercolumn text, IN nband int4, IN sample_percent float8, IN bins int4, IN width _float8, IN "right" bool, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._st_histogram(text, text, int4, bool, float8, int4, _float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_histogram"(text, text, int4, bool, float8, int4, _float8, bool);
CREATE FUNCTION "public"."_st_histogram"(IN rastertable text, IN rastercolumn text, IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN sample_percent float8 DEFAULT 1, IN bins int4 DEFAULT 0, IN width _float8 DEFAULT NULL::double precision[], IN "right" bool DEFAULT false, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) RETURNS SETOF "record" 
	AS '$libdir/rtpostgis-2.1','RASTER_histogramCoverage'
	LANGUAGE c
	COST 1
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_histogram"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8, IN bins int4, IN width _float8, IN "right" bool, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_histogram(text, text, int4, bool, int4, _float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_histogram"(text, text, int4, bool, int4, _float8, bool);
CREATE FUNCTION "public"."st_histogram"(IN rastertable text, IN rastercolumn text, IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN bins int4 DEFAULT 0, IN width _float8 DEFAULT NULL::double precision[], IN "right" bool DEFAULT false, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT _st_histogram($1, $2, $3, $4, 1, $5, $6, $7) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_histogram"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN bins int4, IN width _float8, IN "right" bool, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_histogram"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN bins int4, IN width _float8, IN "right" bool, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) IS 'args: rastertable, rastercolumn, nband=1, exclude_nodata_value=true, bins=autocomputed, width=NULL, right=false - Returns a set of record summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.';

-- ----------------------------
--  Function structure for public.st_histogram(text, text, int4, bool, int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_histogram"(text, text, int4, bool, int4, bool);
CREATE FUNCTION "public"."st_histogram"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN bins int4, IN "right" bool, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT _st_histogram($1, $2, $3, $4, 1, $5, NULL, $6) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_histogram"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN bins int4, IN "right" bool, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_histogram"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN bins int4, IN "right" bool, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) IS 'args: rastertable, rastercolumn, nband, exclude_nodata_value, bins, right - Returns a set of record summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.';

-- ----------------------------
--  Function structure for public.st_histogram(text, text, int4, int4, _float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_histogram"(text, text, int4, int4, _float8, bool);
CREATE FUNCTION "public"."st_histogram"(IN rastertable text, IN rastercolumn text, IN nband int4, IN bins int4, IN width _float8 DEFAULT NULL::double precision[], IN "right" bool DEFAULT false, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT _st_histogram($1, $2, $3, TRUE, 1, $4, $5, $6) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_histogram"(IN rastertable text, IN rastercolumn text, IN nband int4, IN bins int4, IN width _float8, IN "right" bool, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_histogram"(IN rastertable text, IN rastercolumn text, IN nband int4, IN bins int4, IN width _float8, IN "right" bool, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) IS 'args: rastertable, rastercolumn, nband=1, bins, width=NULL, right=false - Returns a set of record summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.';

-- ----------------------------
--  Function structure for public.st_histogram(text, text, int4, int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_histogram"(text, text, int4, int4, bool);
CREATE FUNCTION "public"."st_histogram"(IN rastertable text, IN rastercolumn text, IN nband int4, IN bins int4, IN "right" bool, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT _st_histogram($1, $2, $3, TRUE, 1, $4, NULL, $5) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_histogram"(IN rastertable text, IN rastercolumn text, IN nband int4, IN bins int4, IN "right" bool, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_histogram"(IN rastertable text, IN rastercolumn text, IN nband int4, IN bins int4, IN "right" bool, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) IS 'args: rastertable, rastercolumn, nband, bins, right - Returns a set of record summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.';

-- ----------------------------
--  Function structure for public.st_approxhistogram(text, text, int4, bool, float8, int4, _float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxhistogram"(text, text, int4, bool, float8, int4, _float8, bool);
CREATE FUNCTION "public"."st_approxhistogram"(IN rastertable text, IN rastercolumn text, IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN sample_percent float8 DEFAULT 0.1, IN bins int4 DEFAULT 0, IN width _float8 DEFAULT NULL::double precision[], IN "right" bool DEFAULT false, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT _st_histogram($1, $2, $3, $4, $5, $6, $7, $8) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxhistogram"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8, IN bins int4, IN width _float8, IN "right" bool, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_approxhistogram(text, text, int4, bool, float8, int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxhistogram"(text, text, int4, bool, float8, int4, bool);
CREATE FUNCTION "public"."st_approxhistogram"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8, IN bins int4, IN "right" bool, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT _st_histogram($1, $2, $3, $4, $5, $6, NULL, $7) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxhistogram"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8, IN bins int4, IN "right" bool, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_approxhistogram(text, text, int4, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxhistogram"(text, text, int4, float8);
CREATE FUNCTION "public"."st_approxhistogram"(IN rastertable text, IN rastercolumn text, IN nband int4, IN sample_percent float8, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT _st_histogram($1, $2, $3, TRUE, $4, 0, NULL, FALSE) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxhistogram"(IN rastertable text, IN rastercolumn text, IN nband int4, IN sample_percent float8, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_approxhistogram(text, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxhistogram"(text, text, float8);
CREATE FUNCTION "public"."st_approxhistogram"(IN rastertable text, IN rastercolumn text, IN sample_percent float8, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT _st_histogram($1, $2, 1, TRUE, $3, 0, NULL, FALSE) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxhistogram"(IN rastertable text, IN rastercolumn text, IN sample_percent float8, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_approxhistogram(text, text, int4, float8, int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxhistogram"(text, text, int4, float8, int4, bool);
CREATE FUNCTION "public"."st_approxhistogram"(IN rastertable text, IN rastercolumn text, IN nband int4, IN sample_percent float8, IN bins int4, IN "right" bool, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT _st_histogram($1, $2, $3, TRUE, $4, $5, NULL, $6) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxhistogram"(IN rastertable text, IN rastercolumn text, IN nband int4, IN sample_percent float8, IN bins int4, IN "right" bool, OUT "min" float8, OUT "max" float8, OUT "count" int8, OUT percent float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._st_quantile("public"."raster", int4, bool, float8, _float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_quantile"("public"."raster", int4, bool, float8, _float8);
CREATE FUNCTION "public"."_st_quantile"(IN rast "public"."raster", IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN sample_percent float8 DEFAULT 1, IN quantiles _float8 DEFAULT NULL::double precision[], OUT quantile float8, OUT "value" float8) RETURNS SETOF "record" 
	AS '$libdir/rtpostgis-2.1','RASTER_quantile'
	LANGUAGE c
	COST 1
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_quantile"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8, IN quantiles _float8, OUT quantile float8, OUT "value" float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_quantile("public"."raster", int4, bool, _float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_quantile"("public"."raster", int4, bool, _float8);
CREATE FUNCTION "public"."st_quantile"(IN rast "public"."raster", IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN quantiles _float8 DEFAULT NULL::double precision[], OUT quantile float8, OUT "value" float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT _st_quantile($1, $2, $3, 1, $4) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_quantile"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN quantiles _float8, OUT quantile float8, OUT "value" float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_quantile"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN quantiles _float8, OUT quantile float8, OUT "value" float8) IS 'args: rast, nband=1, exclude_nodata_value=true, quantiles=NULL - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.';

-- ----------------------------
--  Function structure for public.st_quantile("public"."raster", int4, _float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_quantile"("public"."raster", int4, _float8);
CREATE FUNCTION "public"."st_quantile"(IN rast "public"."raster", IN nband int4, IN quantiles _float8, OUT quantile float8, OUT "value" float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT _st_quantile($1, $2, TRUE, 1, $3) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_quantile"(IN rast "public"."raster", IN nband int4, IN quantiles _float8, OUT quantile float8, OUT "value" float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_quantile"(IN rast "public"."raster", IN nband int4, IN quantiles _float8, OUT quantile float8, OUT "value" float8) IS 'args: rast, nband, quantiles - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.';

-- ----------------------------
--  Function structure for public.st_quantile("public"."raster", _float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_quantile"("public"."raster", _float8);
CREATE FUNCTION "public"."st_quantile"(IN rast "public"."raster", IN quantiles _float8, OUT quantile float8, OUT "value" float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT _st_quantile($1, 1, TRUE, 1, $2) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_quantile"(IN rast "public"."raster", IN quantiles _float8, OUT quantile float8, OUT "value" float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_quantile"(IN rast "public"."raster", IN quantiles _float8, OUT quantile float8, OUT "value" float8) IS 'args: rast, quantiles - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.';

-- ----------------------------
--  Function structure for public.st_quantile("public"."raster", int4, bool, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_quantile"("public"."raster", int4, bool, float8);
CREATE FUNCTION "public"."st_quantile"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN quantile float8) RETURNS "float8" 
	AS $BODY$ SELECT (_st_quantile($1, $2, $3, 1, ARRAY[$4]::double precision[])).value $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_quantile"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN quantile float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_quantile"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN quantile float8) IS 'args: rast, nband, exclude_nodata_value, quantile - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.';

-- ----------------------------
--  Function structure for public.st_quantile("public"."raster", int4, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_quantile"("public"."raster", int4, float8);
CREATE FUNCTION "public"."st_quantile"(IN rast "public"."raster", IN nband int4, IN quantile float8) RETURNS "float8" 
	AS $BODY$ SELECT (_st_quantile($1, $2, TRUE, 1, ARRAY[$3]::double precision[])).value $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_quantile"(IN rast "public"."raster", IN nband int4, IN quantile float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_quantile"(IN rast "public"."raster", IN nband int4, IN quantile float8) IS 'args: rast, nband, quantile - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.';

-- ----------------------------
--  Function structure for public.st_quantile("public"."raster", bool, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_quantile"("public"."raster", bool, float8);
CREATE FUNCTION "public"."st_quantile"(IN rast "public"."raster", IN exclude_nodata_value bool, IN quantile float8 DEFAULT NULL::double precision) RETURNS "float8" 
	AS $BODY$ SELECT (_st_quantile($1, 1, $2, 1, ARRAY[$3]::double precision[])).value $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_quantile"(IN rast "public"."raster", IN exclude_nodata_value bool, IN quantile float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_quantile"(IN rast "public"."raster", IN exclude_nodata_value bool, IN quantile float8) IS 'args: rast, exclude_nodata_value, quantile=NULL - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.';

-- ----------------------------
--  Function structure for public.st_quantile("public"."raster", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_quantile"("public"."raster", float8);
CREATE FUNCTION "public"."st_quantile"(IN rast "public"."raster", IN quantile float8) RETURNS "float8" 
	AS $BODY$ SELECT (_st_quantile($1, 1, TRUE, 1, ARRAY[$2]::double precision[])).value $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_quantile"(IN rast "public"."raster", IN quantile float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_quantile"(IN rast "public"."raster", IN quantile float8) IS 'args: rast, quantile - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.';

-- ----------------------------
--  Function structure for public.st_approxquantile("public"."raster", int4, bool, float8, _float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxquantile"("public"."raster", int4, bool, float8, _float8);
CREATE FUNCTION "public"."st_approxquantile"(IN rast "public"."raster", IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN sample_percent float8 DEFAULT 0.1, IN quantiles _float8 DEFAULT NULL::double precision[], OUT quantile float8, OUT "value" float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT _st_quantile($1, $2, $3, $4, $5) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxquantile"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8, IN quantiles _float8, OUT quantile float8, OUT "value" float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_approxquantile("public"."raster", int4, float8, _float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxquantile"("public"."raster", int4, float8, _float8);
CREATE FUNCTION "public"."st_approxquantile"(IN rast "public"."raster", IN nband int4, IN sample_percent float8, IN quantiles _float8 DEFAULT NULL::double precision[], OUT quantile float8, OUT "value" float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT _st_quantile($1, $2, TRUE, $3, $4) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxquantile"(IN rast "public"."raster", IN nband int4, IN sample_percent float8, IN quantiles _float8, OUT quantile float8, OUT "value" float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_approxquantile("public"."raster", float8, _float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxquantile"("public"."raster", float8, _float8);
CREATE FUNCTION "public"."st_approxquantile"(IN rast "public"."raster", IN sample_percent float8, IN quantiles _float8 DEFAULT NULL::double precision[], OUT quantile float8, OUT "value" float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT _st_quantile($1, 1, TRUE, $2, $3) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxquantile"(IN rast "public"."raster", IN sample_percent float8, IN quantiles _float8, OUT quantile float8, OUT "value" float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_approxquantile("public"."raster", _float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxquantile"("public"."raster", _float8);
CREATE FUNCTION "public"."st_approxquantile"(IN rast "public"."raster", IN quantiles _float8, OUT quantile float8, OUT "value" float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT _st_quantile($1, 1, TRUE, 0.1, $2) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxquantile"(IN rast "public"."raster", IN quantiles _float8, OUT quantile float8, OUT "value" float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_approxquantile("public"."raster", int4, bool, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxquantile"("public"."raster", int4, bool, float8, float8);
CREATE FUNCTION "public"."st_approxquantile"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8, IN quantile float8) RETURNS "float8" 
	AS $BODY$ SELECT (_st_quantile($1, $2, $3, $4, ARRAY[$5]::double precision[])).value $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxquantile"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8, IN quantile float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_approxquantile("public"."raster", int4, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxquantile"("public"."raster", int4, float8, float8);
CREATE FUNCTION "public"."st_approxquantile"(IN rast "public"."raster", IN nband int4, IN sample_percent float8, IN quantile float8) RETURNS "float8" 
	AS $BODY$ SELECT (_st_quantile($1, $2, TRUE, $3, ARRAY[$4]::double precision[])).value $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxquantile"(IN rast "public"."raster", IN nband int4, IN sample_percent float8, IN quantile float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_approxquantile("public"."raster", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxquantile"("public"."raster", float8, float8);
CREATE FUNCTION "public"."st_approxquantile"(IN rast "public"."raster", IN sample_percent float8, IN quantile float8) RETURNS "float8" 
	AS $BODY$ SELECT (_st_quantile($1, 1, TRUE, $2, ARRAY[$3]::double precision[])).value $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxquantile"(IN rast "public"."raster", IN sample_percent float8, IN quantile float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_setskew("public"."raster", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_setskew"("public"."raster", float8, float8);
CREATE FUNCTION "public"."st_setskew"(IN rast "public"."raster", IN skewx float8, IN skewy float8) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.1','RASTER_setSkewXY'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_setskew"(IN rast "public"."raster", IN skewx float8, IN skewy float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_setskew"(IN rast "public"."raster", IN skewx float8, IN skewy float8) IS 'args: rast, skewx, skewy - Sets the georeference X and Y skew (or rotation parameter). If only one is passed in, sets X and Y to the same value.';

-- ----------------------------
--  Function structure for public.st_approxquantile("public"."raster", bool, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxquantile"("public"."raster", bool, float8);
CREATE FUNCTION "public"."st_approxquantile"(IN rast "public"."raster", IN exclude_nodata_value bool, IN quantile float8 DEFAULT NULL::double precision) RETURNS "float8" 
	AS $BODY$ SELECT (_st_quantile($1, 1, $2, 0.1, ARRAY[$3]::double precision[])).value $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxquantile"(IN rast "public"."raster", IN exclude_nodata_value bool, IN quantile float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_approxquantile("public"."raster", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxquantile"("public"."raster", float8);
CREATE FUNCTION "public"."st_approxquantile"(IN rast "public"."raster", IN quantile float8) RETURNS "float8" 
	AS $BODY$ SELECT (_st_quantile($1, 1, TRUE, 0.1, ARRAY[$2]::double precision[])).value $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxquantile"(IN rast "public"."raster", IN quantile float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._st_quantile(text, text, int4, bool, float8, _float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_quantile"(text, text, int4, bool, float8, _float8);
CREATE FUNCTION "public"."_st_quantile"(IN rastertable text, IN rastercolumn text, IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN sample_percent float8 DEFAULT 1, IN quantiles _float8 DEFAULT NULL::double precision[], OUT quantile float8, OUT "value" float8) RETURNS SETOF "record" 
	AS '$libdir/rtpostgis-2.1','RASTER_quantileCoverage'
	LANGUAGE c
	COST 1
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_st_quantile"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8, IN quantiles _float8, OUT quantile float8, OUT "value" float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_quantile(text, text, int4, bool, _float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_quantile"(text, text, int4, bool, _float8);
CREATE FUNCTION "public"."st_quantile"(IN rastertable text, IN rastercolumn text, IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN quantiles _float8 DEFAULT NULL::double precision[], OUT quantile float8, OUT "value" float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT _st_quantile($1, $2, $3, $4, 1, $5) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_quantile"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN quantiles _float8, OUT quantile float8, OUT "value" float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_quantile"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN quantiles _float8, OUT quantile float8, OUT "value" float8) IS 'args: rastertable, rastercolumn, nband=1, exclude_nodata_value=true, quantiles=NULL - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.';

-- ----------------------------
--  Function structure for public.st_quantile(text, text, int4, _float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_quantile"(text, text, int4, _float8);
CREATE FUNCTION "public"."st_quantile"(IN rastertable text, IN rastercolumn text, IN nband int4, IN quantiles _float8, OUT quantile float8, OUT "value" float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT _st_quantile($1, $2, $3, TRUE, 1, $4) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_quantile"(IN rastertable text, IN rastercolumn text, IN nband int4, IN quantiles _float8, OUT quantile float8, OUT "value" float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_quantile"(IN rastertable text, IN rastercolumn text, IN nband int4, IN quantiles _float8, OUT quantile float8, OUT "value" float8) IS 'args: rastertable, rastercolumn, nband, quantiles - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.';

-- ----------------------------
--  Function structure for public.st_quantile(text, text, _float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_quantile"(text, text, _float8);
CREATE FUNCTION "public"."st_quantile"(IN rastertable text, IN rastercolumn text, IN quantiles _float8, OUT quantile float8, OUT "value" float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT _st_quantile($1, $2, 1, TRUE, 1, $3) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_quantile"(IN rastertable text, IN rastercolumn text, IN quantiles _float8, OUT quantile float8, OUT "value" float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_quantile(text, text, int4, bool, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_quantile"(text, text, int4, bool, float8);
CREATE FUNCTION "public"."st_quantile"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN quantile float8) RETURNS "float8" 
	AS $BODY$ SELECT (_st_quantile($1, $2, $3, $4, 1, ARRAY[$5]::double precision[])).value $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_quantile"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN quantile float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_quantile(text, text, int4, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_quantile"(text, text, int4, float8);
CREATE FUNCTION "public"."st_quantile"(IN rastertable text, IN rastercolumn text, IN nband int4, IN quantile float8) RETURNS "float8" 
	AS $BODY$ SELECT (_st_quantile($1, $2, $3, TRUE, 1, ARRAY[$4]::double precision[])).value $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_quantile"(IN rastertable text, IN rastercolumn text, IN nband int4, IN quantile float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_quantile(text, text, bool, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_quantile"(text, text, bool, float8);
CREATE FUNCTION "public"."st_quantile"(IN rastertable text, IN rastercolumn text, IN exclude_nodata_value bool, IN quantile float8 DEFAULT NULL::double precision) RETURNS "float8" 
	AS $BODY$ SELECT (_st_quantile($1, $2, 1, $3, 1, ARRAY[$4]::double precision[])).value $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_quantile"(IN rastertable text, IN rastercolumn text, IN exclude_nodata_value bool, IN quantile float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_quantile(text, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_quantile"(text, text, float8);
CREATE FUNCTION "public"."st_quantile"(IN rastertable text, IN rastercolumn text, IN quantile float8) RETURNS "float8" 
	AS $BODY$ SELECT (_st_quantile($1, $2, 1, TRUE, 1, ARRAY[$3]::double precision[])).value $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_quantile"(IN rastertable text, IN rastercolumn text, IN quantile float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_approxquantile(text, text, int4, bool, float8, _float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxquantile"(text, text, int4, bool, float8, _float8);
CREATE FUNCTION "public"."st_approxquantile"(IN rastertable text, IN rastercolumn text, IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN sample_percent float8 DEFAULT 0.1, IN quantiles _float8 DEFAULT NULL::double precision[], OUT quantile float8, OUT "value" float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT _st_quantile($1, $2, $3, $4, $5, $6) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxquantile"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8, IN quantiles _float8, OUT quantile float8, OUT "value" float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_approxquantile(text, text, int4, float8, _float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxquantile"(text, text, int4, float8, _float8);
CREATE FUNCTION "public"."st_approxquantile"(IN rastertable text, IN rastercolumn text, IN nband int4, IN sample_percent float8, IN quantiles _float8 DEFAULT NULL::double precision[], OUT quantile float8, OUT "value" float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT _st_quantile($1, $2, $3, TRUE, $4, $5) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxquantile"(IN rastertable text, IN rastercolumn text, IN nband int4, IN sample_percent float8, IN quantiles _float8, OUT quantile float8, OUT "value" float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_approxquantile(text, text, float8, _float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxquantile"(text, text, float8, _float8);
CREATE FUNCTION "public"."st_approxquantile"(IN rastertable text, IN rastercolumn text, IN sample_percent float8, IN quantiles _float8 DEFAULT NULL::double precision[], OUT quantile float8, OUT "value" float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT _st_quantile($1, $2, 1, TRUE, $3, $4) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxquantile"(IN rastertable text, IN rastercolumn text, IN sample_percent float8, IN quantiles _float8, OUT quantile float8, OUT "value" float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_approxquantile(text, text, _float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxquantile"(text, text, _float8);
CREATE FUNCTION "public"."st_approxquantile"(IN rastertable text, IN rastercolumn text, IN quantiles _float8, OUT quantile float8, OUT "value" float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT _st_quantile($1, $2, 1, TRUE, 0.1, $3) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxquantile"(IN rastertable text, IN rastercolumn text, IN quantiles _float8, OUT quantile float8, OUT "value" float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_approxquantile(text, text, int4, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxquantile"(text, text, int4, float8, float8);
CREATE FUNCTION "public"."st_approxquantile"(IN rastertable text, IN rastercolumn text, IN nband int4, IN sample_percent float8, IN quantile float8) RETURNS "float8" 
	AS $BODY$ SELECT (_st_quantile($1, $2, $3, TRUE, $4, ARRAY[$5]::double precision[])).value $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxquantile"(IN rastertable text, IN rastercolumn text, IN nband int4, IN sample_percent float8, IN quantile float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_approxquantile(text, text, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxquantile"(text, text, float8, float8);
CREATE FUNCTION "public"."st_approxquantile"(IN rastertable text, IN rastercolumn text, IN sample_percent float8, IN quantile float8) RETURNS "float8" 
	AS $BODY$ SELECT (_st_quantile($1, $2, 1, TRUE, $3, ARRAY[$4]::double precision[])).value $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxquantile"(IN rastertable text, IN rastercolumn text, IN sample_percent float8, IN quantile float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_approxquantile(text, text, bool, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxquantile"(text, text, bool, float8);
CREATE FUNCTION "public"."st_approxquantile"(IN rastertable text, IN rastercolumn text, IN exclude_nodata_value bool, IN quantile float8 DEFAULT NULL::double precision) RETURNS "float8" 
	AS $BODY$ SELECT (_st_quantile($1, $2, 1, $3, 0.1, ARRAY[$4]::double precision[])).value $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxquantile"(IN rastertable text, IN rastercolumn text, IN exclude_nodata_value bool, IN quantile float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_approxquantile(text, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxquantile"(text, text, float8);
CREATE FUNCTION "public"."st_approxquantile"(IN rastertable text, IN rastercolumn text, IN quantile float8) RETURNS "float8" 
	AS $BODY$ SELECT (_st_quantile($1, $2, 1, TRUE, 0.1, ARRAY[$3]::double precision[])).value $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxquantile"(IN rastertable text, IN rastercolumn text, IN quantile float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._st_valuecount("public"."raster", int4, bool, _float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_valuecount"("public"."raster", int4, bool, _float8, float8);
CREATE FUNCTION "public"."_st_valuecount"(IN rast "public"."raster", IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN searchvalues _float8 DEFAULT NULL::double precision[], IN roundto float8 DEFAULT 0, OUT "value" float8, OUT "count" int4, OUT percent float8) RETURNS SETOF "record" 
	AS '$libdir/rtpostgis-2.1','RASTER_valueCount'
	LANGUAGE c
	COST 1
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_valuecount"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN searchvalues _float8, IN roundto float8, OUT "value" float8, OUT "count" int4, OUT percent float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_valuecount("public"."raster", int4, bool, _float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuecount"("public"."raster", int4, bool, _float8, float8);
CREATE FUNCTION "public"."st_valuecount"(IN rast "public"."raster", IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN searchvalues _float8 DEFAULT NULL::double precision[], IN roundto float8 DEFAULT 0, OUT "value" float8, OUT "count" int4) RETURNS SETOF "record" 
	AS $BODY$ SELECT value, count FROM _st_valuecount($1, $2, $3, $4, $5) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_valuecount"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN searchvalues _float8, IN roundto float8, OUT "value" float8, OUT "count" int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_valuecount"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN searchvalues _float8, IN roundto float8, OUT "value" float8, OUT "count" int4) IS 'args: rast, nband=1, exclude_nodata_value=true, searchvalues=NULL, roundto=0, OUT value, OUT count - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.';

-- ----------------------------
--  Function structure for public.st_valuecount("public"."raster", int4, _float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuecount"("public"."raster", int4, _float8, float8);
CREATE FUNCTION "public"."st_valuecount"(IN rast "public"."raster", IN nband int4, IN searchvalues _float8, IN roundto float8 DEFAULT 0, OUT "value" float8, OUT "count" int4) RETURNS SETOF "record" 
	AS $BODY$ SELECT value, count FROM _st_valuecount($1, $2, TRUE, $3, $4) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_valuecount"(IN rast "public"."raster", IN nband int4, IN searchvalues _float8, IN roundto float8, OUT "value" float8, OUT "count" int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_valuecount"(IN rast "public"."raster", IN nband int4, IN searchvalues _float8, IN roundto float8, OUT "value" float8, OUT "count" int4) IS 'args: rast, nband, searchvalues, roundto=0, OUT value, OUT count - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.';

-- ----------------------------
--  Function structure for public.st_valuecount("public"."raster", _float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuecount"("public"."raster", _float8, float8);
CREATE FUNCTION "public"."st_valuecount"(IN rast "public"."raster", IN searchvalues _float8, IN roundto float8 DEFAULT 0, OUT "value" float8, OUT "count" int4) RETURNS SETOF "record" 
	AS $BODY$ SELECT value, count FROM _st_valuecount($1, 1, TRUE, $2, $3) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_valuecount"(IN rast "public"."raster", IN searchvalues _float8, IN roundto float8, OUT "value" float8, OUT "count" int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_valuecount"(IN rast "public"."raster", IN searchvalues _float8, IN roundto float8, OUT "value" float8, OUT "count" int4) IS 'args: rast, searchvalues, roundto=0, OUT value, OUT count - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.';

-- ----------------------------
--  Function structure for public.st_valuecount("public"."raster", int4, bool, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuecount"("public"."raster", int4, bool, float8, float8);
CREATE FUNCTION "public"."st_valuecount"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN searchvalue float8, IN roundto float8 DEFAULT 0) RETURNS "int4" 
	AS $BODY$ SELECT (_st_valuecount($1, $2, $3, ARRAY[$4]::double precision[], $5)).count $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_valuecount"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN searchvalue float8, IN roundto float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_valuecount"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN searchvalue float8, IN roundto float8) IS 'args: rast, nband, exclude_nodata_value, searchvalue, roundto=0 - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.';

-- ----------------------------
--  Function structure for public.st_valuecount("public"."raster", int4, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuecount"("public"."raster", int4, float8, float8);
CREATE FUNCTION "public"."st_valuecount"(IN rast "public"."raster", IN nband int4, IN searchvalue float8, IN roundto float8 DEFAULT 0) RETURNS "int4" 
	AS $BODY$ SELECT (_st_valuecount($1, $2, TRUE, ARRAY[$3]::double precision[], $4)).count $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_valuecount"(IN rast "public"."raster", IN nband int4, IN searchvalue float8, IN roundto float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_valuecount"(IN rast "public"."raster", IN nband int4, IN searchvalue float8, IN roundto float8) IS 'args: rast, nband, searchvalue, roundto=0 - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.';

-- ----------------------------
--  Function structure for public.st_valuecount("public"."raster", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuecount"("public"."raster", float8, float8);
CREATE FUNCTION "public"."st_valuecount"(IN rast "public"."raster", IN searchvalue float8, IN roundto float8 DEFAULT 0) RETURNS "int4" 
	AS $BODY$ SELECT (_st_valuecount($1, 1, TRUE, ARRAY[$2]::double precision[], $3)).count $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_valuecount"(IN rast "public"."raster", IN searchvalue float8, IN roundto float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_valuecount"(IN rast "public"."raster", IN searchvalue float8, IN roundto float8) IS 'args: rast, searchvalue, roundto=0 - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.';

-- ----------------------------
--  Function structure for public.st_valuecount(text, text, _float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuecount"(text, text, _float8, float8);
CREATE FUNCTION "public"."st_valuecount"(IN rastertable text, IN rastercolumn text, IN searchvalues _float8, IN roundto float8 DEFAULT 0, OUT "value" float8, OUT "count" int4) RETURNS SETOF "record" 
	AS $BODY$ SELECT value, count FROM _st_valuecount($1, $2, 1, TRUE, $3, $4) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_valuecount"(IN rastertable text, IN rastercolumn text, IN searchvalues _float8, IN roundto float8, OUT "value" float8, OUT "count" int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_valuecount"(IN rastertable text, IN rastercolumn text, IN searchvalues _float8, IN roundto float8, OUT "value" float8, OUT "count" int4) IS 'args: rastertable, rastercolumn, searchvalues, roundto=0, OUT value, OUT count - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.';

-- ----------------------------
--  Function structure for public.st_valuepercent("public"."raster", int4, bool, _float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuepercent"("public"."raster", int4, bool, _float8, float8);
CREATE FUNCTION "public"."st_valuepercent"(IN rast "public"."raster", IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN searchvalues _float8 DEFAULT NULL::double precision[], IN roundto float8 DEFAULT 0, OUT "value" float8, OUT percent float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT value, percent FROM _st_valuecount($1, $2, $3, $4, $5) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_valuepercent"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN searchvalues _float8, IN roundto float8, OUT "value" float8, OUT percent float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_valuepercent("public"."raster", int4, _float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuepercent"("public"."raster", int4, _float8, float8);
CREATE FUNCTION "public"."st_valuepercent"(IN rast "public"."raster", IN nband int4, IN searchvalues _float8, IN roundto float8 DEFAULT 0, OUT "value" float8, OUT percent float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT value, percent FROM _st_valuecount($1, $2, TRUE, $3, $4) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_valuepercent"(IN rast "public"."raster", IN nband int4, IN searchvalues _float8, IN roundto float8, OUT "value" float8, OUT percent float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_valuepercent("public"."raster", _float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuepercent"("public"."raster", _float8, float8);
CREATE FUNCTION "public"."st_valuepercent"(IN rast "public"."raster", IN searchvalues _float8, IN roundto float8 DEFAULT 0, OUT "value" float8, OUT percent float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT value, percent FROM _st_valuecount($1, 1, TRUE, $2, $3) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_valuepercent"(IN rast "public"."raster", IN searchvalues _float8, IN roundto float8, OUT "value" float8, OUT percent float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_valuepercent("public"."raster", int4, bool, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuepercent"("public"."raster", int4, bool, float8, float8);
CREATE FUNCTION "public"."st_valuepercent"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN searchvalue float8, IN roundto float8 DEFAULT 0) RETURNS "float8" 
	AS $BODY$ SELECT (_st_valuecount($1, $2, $3, ARRAY[$4]::double precision[], $5)).percent $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_valuepercent"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN searchvalue float8, IN roundto float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_valuepercent("public"."raster", int4, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuepercent"("public"."raster", int4, float8, float8);
CREATE FUNCTION "public"."st_valuepercent"(IN rast "public"."raster", IN nband int4, IN searchvalue float8, IN roundto float8 DEFAULT 0) RETURNS "float8" 
	AS $BODY$ SELECT (_st_valuecount($1, $2, TRUE, ARRAY[$3]::double precision[], $4)).percent $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_valuepercent"(IN rast "public"."raster", IN nband int4, IN searchvalue float8, IN roundto float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_valuepercent("public"."raster", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuepercent"("public"."raster", float8, float8);
CREATE FUNCTION "public"."st_valuepercent"(IN rast "public"."raster", IN searchvalue float8, IN roundto float8 DEFAULT 0) RETURNS "float8" 
	AS $BODY$ SELECT (_st_valuecount($1, 1, TRUE, ARRAY[$2]::double precision[], $3)).percent $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_valuepercent"(IN rast "public"."raster", IN searchvalue float8, IN roundto float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._st_valuecount(text, text, int4, bool, _float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_valuecount"(text, text, int4, bool, _float8, float8);
CREATE FUNCTION "public"."_st_valuecount"(IN rastertable text, IN rastercolumn text, IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN searchvalues _float8 DEFAULT NULL::double precision[], IN roundto float8 DEFAULT 0, OUT "value" float8, OUT "count" int4, OUT percent float8) RETURNS SETOF "record" 
	AS '$libdir/rtpostgis-2.1','RASTER_valueCountCoverage'
	LANGUAGE c
	COST 1
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_st_valuecount"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN searchvalues _float8, IN roundto float8, OUT "value" float8, OUT "count" int4, OUT percent float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_valuecount(text, text, int4, bool, _float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuecount"(text, text, int4, bool, _float8, float8);
CREATE FUNCTION "public"."st_valuecount"(IN rastertable text, IN rastercolumn text, IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN searchvalues _float8 DEFAULT NULL::double precision[], IN roundto float8 DEFAULT 0, OUT "value" float8, OUT "count" int4) RETURNS SETOF "record" 
	AS $BODY$ SELECT value, count FROM _st_valuecount($1, $2, $3, $4, $5, $6) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_valuecount"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN searchvalues _float8, IN roundto float8, OUT "value" float8, OUT "count" int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_valuecount"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN searchvalues _float8, IN roundto float8, OUT "value" float8, OUT "count" int4) IS 'args: rastertable, rastercolumn, nband=1, exclude_nodata_value=true, searchvalues=NULL, roundto=0, OUT value, OUT count - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.';

-- ----------------------------
--  Function structure for public.st_valuecount(text, text, int4, _float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuecount"(text, text, int4, _float8, float8);
CREATE FUNCTION "public"."st_valuecount"(IN rastertable text, IN rastercolumn text, IN nband int4, IN searchvalues _float8, IN roundto float8 DEFAULT 0, OUT "value" float8, OUT "count" int4) RETURNS SETOF "record" 
	AS $BODY$ SELECT value, count FROM _st_valuecount($1, $2, $3, TRUE, $4, $5) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_valuecount"(IN rastertable text, IN rastercolumn text, IN nband int4, IN searchvalues _float8, IN roundto float8, OUT "value" float8, OUT "count" int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_valuecount"(IN rastertable text, IN rastercolumn text, IN nband int4, IN searchvalues _float8, IN roundto float8, OUT "value" float8, OUT "count" int4) IS 'args: rastertable, rastercolumn, nband, searchvalues, roundto=0, OUT value, OUT count - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.';

-- ----------------------------
--  Function structure for public.st_setsrid("public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_setsrid"("public"."raster", int4);
CREATE FUNCTION "public"."st_setsrid"(IN rast "public"."raster", IN srid int4) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.1','RASTER_setSRID'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_setsrid"(IN rast "public"."raster", IN srid int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_setsrid"(IN rast "public"."raster", IN srid int4) IS 'args: rast, srid - Sets the SRID of a raster to a particular integer srid defined in the spatial_ref_sys table.';

-- ----------------------------
--  Function structure for public.st_valuecount(text, text, int4, bool, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuecount"(text, text, int4, bool, float8, float8);
CREATE FUNCTION "public"."st_valuecount"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN searchvalue float8, IN roundto float8 DEFAULT 0) RETURNS "int4" 
	AS $BODY$ SELECT (_st_valuecount($1, $2, $3, $4, ARRAY[$5]::double precision[], $6)).count $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_valuecount"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN searchvalue float8, IN roundto float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_valuecount"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN searchvalue float8, IN roundto float8) IS 'args: rastertable, rastercolumn, nband, exclude_nodata_value, searchvalue, roundto=0 - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.';

-- ----------------------------
--  Function structure for public.st_valuecount(text, text, int4, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuecount"(text, text, int4, float8, float8);
CREATE FUNCTION "public"."st_valuecount"(IN rastertable text, IN rastercolumn text, IN nband int4, IN searchvalue float8, IN roundto float8 DEFAULT 0) RETURNS "int4" 
	AS $BODY$ SELECT (_st_valuecount($1, $2, $3, TRUE, ARRAY[$4]::double precision[], $5)).count $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_valuecount"(IN rastertable text, IN rastercolumn text, IN nband int4, IN searchvalue float8, IN roundto float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_valuecount"(IN rastertable text, IN rastercolumn text, IN nband int4, IN searchvalue float8, IN roundto float8) IS 'args: rastertable, rastercolumn, nband, searchvalue, roundto=0 - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.';

-- ----------------------------
--  Function structure for public.st_valuecount(text, text, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuecount"(text, text, float8, float8);
CREATE FUNCTION "public"."st_valuecount"(IN rastertable text, IN rastercolumn text, IN searchvalue float8, IN roundto float8 DEFAULT 0) RETURNS "int4" 
	AS $BODY$ SELECT (_st_valuecount($1, $2, 1, TRUE, ARRAY[$3]::double precision[], $4)).count $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_valuecount"(IN rastertable text, IN rastercolumn text, IN searchvalue float8, IN roundto float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_valuecount"(IN rastertable text, IN rastercolumn text, IN searchvalue float8, IN roundto float8) IS 'args: rastertable, rastercolumn, searchvalue, roundto=0 - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.';

-- ----------------------------
--  Function structure for public.st_valuepercent(text, text, int4, bool, _float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuepercent"(text, text, int4, bool, _float8, float8);
CREATE FUNCTION "public"."st_valuepercent"(IN rastertable text, IN rastercolumn text, IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN searchvalues _float8 DEFAULT NULL::double precision[], IN roundto float8 DEFAULT 0, OUT "value" float8, OUT percent float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT value, percent FROM _st_valuecount($1, $2, $3, $4, $5, $6) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_valuepercent"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN searchvalues _float8, IN roundto float8, OUT "value" float8, OUT percent float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_valuepercent(text, text, int4, _float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuepercent"(text, text, int4, _float8, float8);
CREATE FUNCTION "public"."st_valuepercent"(IN rastertable text, IN rastercolumn text, IN nband int4, IN searchvalues _float8, IN roundto float8 DEFAULT 0, OUT "value" float8, OUT percent float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT value, percent FROM _st_valuecount($1, $2, $3, TRUE, $4, $5) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_valuepercent"(IN rastertable text, IN rastercolumn text, IN nband int4, IN searchvalues _float8, IN roundto float8, OUT "value" float8, OUT percent float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_valuepercent(text, text, _float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuepercent"(text, text, _float8, float8);
CREATE FUNCTION "public"."st_valuepercent"(IN rastertable text, IN rastercolumn text, IN searchvalues _float8, IN roundto float8 DEFAULT 0, OUT "value" float8, OUT percent float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT value, percent FROM _st_valuecount($1, $2, 1, TRUE, $3, $4) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_valuepercent"(IN rastertable text, IN rastercolumn text, IN searchvalues _float8, IN roundto float8, OUT "value" float8, OUT percent float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_valuepercent(text, text, int4, bool, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuepercent"(text, text, int4, bool, float8, float8);
CREATE FUNCTION "public"."st_valuepercent"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN searchvalue float8, IN roundto float8 DEFAULT 0) RETURNS "float8" 
	AS $BODY$ SELECT (_st_valuecount($1, $2, $3, $4, ARRAY[$5]::double precision[], $6)).percent $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_valuepercent"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN searchvalue float8, IN roundto float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_valuepercent(text, text, int4, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuepercent"(text, text, int4, float8, float8);
CREATE FUNCTION "public"."st_valuepercent"(IN rastertable text, IN rastercolumn text, IN nband int4, IN searchvalue float8, IN roundto float8 DEFAULT 0) RETURNS "float8" 
	AS $BODY$ SELECT (_st_valuecount($1, $2, $3, TRUE, ARRAY[$4]::double precision[], $5)).percent $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_valuepercent"(IN rastertable text, IN rastercolumn text, IN nband int4, IN searchvalue float8, IN roundto float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_valuepercent(text, text, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuepercent"(text, text, float8, float8);
CREATE FUNCTION "public"."st_valuepercent"(IN rastertable text, IN rastercolumn text, IN searchvalue float8, IN roundto float8 DEFAULT 0) RETURNS "float8" 
	AS $BODY$ SELECT (_st_valuecount($1, $2, 1, TRUE, ARRAY[$3]::double precision[], $4)).percent $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_valuepercent"(IN rastertable text, IN rastercolumn text, IN searchvalue float8, IN roundto float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._st_reclass("public"."raster", "public"."_reclassarg")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_reclass"("public"."raster", "public"."_reclassarg");
CREATE FUNCTION "public"."_st_reclass"(IN rast "public"."raster", INOUT reclassargset "public"."_reclassarg") RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.1','RASTER_reclass'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_reclass"(IN rast "public"."raster", INOUT reclassargset "public"."_reclassarg") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_reclass("public"."raster", "public"."_reclassarg")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_reclass"("public"."raster", "public"."_reclassarg");
CREATE FUNCTION "public"."st_reclass"(IN rast "public"."raster", INOUT reclassargset "public"."_reclassarg") RETURNS "public"."raster" 
	AS $BODY$
	DECLARE
		i int;
		expr text;
	BEGIN
		-- for each reclassarg, validate elements as all except nodataval cannot be NULL
		FOR i IN SELECT * FROM generate_subscripts($2, 1) LOOP
			IF $2[i].nband IS NULL OR $2[i].reclassexpr IS NULL OR $2[i].pixeltype IS NULL THEN
				RAISE WARNING 'Values are required for the nband, reclassexpr and pixeltype attributes.';
				RETURN rast;
			END IF;
		END LOOP;

		RETURN _st_reclass($1, VARIADIC $2);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_reclass"(IN rast "public"."raster", INOUT reclassargset "public"."_reclassarg") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_setupperleft("public"."raster", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_setupperleft"("public"."raster", float8, float8);
CREATE FUNCTION "public"."st_setupperleft"(IN rast "public"."raster", IN upperleftx float8, IN upperlefty float8) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.1','RASTER_setUpperLeftXY'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_setupperleft"(IN rast "public"."raster", IN upperleftx float8, IN upperlefty float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_setupperleft"(IN rast "public"."raster", IN upperleftx float8, IN upperlefty float8) IS 'args: rast, x, y - Sets the value of the upper left corner of the pixel to projected X and Y coordinates.';

-- ----------------------------
--  Function structure for public.st_reclass("public"."raster", int4, text, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_reclass"("public"."raster", int4, text, text, float8);
CREATE FUNCTION "public"."st_reclass"(IN rast "public"."raster", IN nband int4, IN reclassexpr text, IN pixeltype text, IN nodataval float8 DEFAULT NULL::double precision) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_reclass($1, ROW($2, $3, $4, $5)) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_reclass"(IN rast "public"."raster", IN nband int4, IN reclassexpr text, IN pixeltype text, IN nodataval float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_reclass("public"."raster", text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_reclass"("public"."raster", text, text);
CREATE FUNCTION "public"."st_reclass"(IN rast "public"."raster", IN reclassexpr text, IN pixeltype text) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_reclass($1, ROW(1, $2, $3, NULL)) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_reclass"(IN rast "public"."raster", IN reclassexpr text, IN pixeltype text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._st_colormap("public"."raster", int4, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_colormap"("public"."raster", int4, text, text);
CREATE FUNCTION "public"."_st_colormap"(IN rast "public"."raster", IN nband int4, IN colormap text, IN "method" text DEFAULT 'INTERPOLATE'::text) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.1','RASTER_colorMap'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_colormap"(IN rast "public"."raster", IN nband int4, IN colormap text, IN "method" text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_colormap("public"."raster", int4, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_colormap"("public"."raster", int4, text, text);
CREATE FUNCTION "public"."st_colormap"(IN rast "public"."raster", IN nband int4 DEFAULT 1, IN colormap text DEFAULT 'grayscale'::text, IN "method" text DEFAULT 'INTERPOLATE'::text) RETURNS "public"."raster" 
	AS $BODY$
	DECLARE
		_ismap boolean;
		_colormap text;
		_element text[];
	BEGIN
		_ismap := TRUE;

		-- clean colormap to see what it is
		_colormap := split_part(colormap, E'\n', 1);
		_colormap := regexp_replace(_colormap, E':+', ' ', 'g');
		_colormap := regexp_replace(_colormap, E',+', ' ', 'g');
		_colormap := regexp_replace(_colormap, E'\\t+', ' ', 'g');
		_colormap := regexp_replace(_colormap, E' +', ' ', 'g');
		_element := regexp_split_to_array(_colormap, ' ');

		-- treat as colormap
		IF (array_length(_element, 1) > 1) THEN
			_colormap := colormap;
		-- treat as keyword
		ELSE
			method := 'INTERPOLATE';
			CASE lower(trim(both from _colormap))
				WHEN 'grayscale', 'greyscale' THEN
					_colormap := '
100%   0
  0% 254
  nv 255 
					';
				WHEN 'pseudocolor' THEN
					_colormap := '
100% 255   0   0 255
 50%   0 255   0 255
  0%   0   0 255 255
  nv   0   0   0   0
					';
				WHEN 'fire' THEN
					_colormap := '
  100% 243 255 221 255
93.75% 242 255 178 255
 87.5% 255 255 135 255
81.25% 255 228  96 255
   75% 255 187  53 255
68.75% 255 131   7 255
 62.5% 255  84   0 255
56.25% 255  42   0 255
   50% 255   0   0 255
43.75% 255  42   0 255
 37.5% 224  74   0 255
31.25% 183  91   0 255
   25% 140  93   0 255
18.75%  99  82   0 255
 12.5%  58  58   1 255
 6.25%  12  15   0 255
    0%   0   0   0 255
    nv   0   0   0   0
					';
				WHEN 'bluered' THEN
					_colormap := '
100.00% 165   0  33 255
 94.12% 216  21  47 255
 88.24% 247  39  53 255
 82.35% 255  61  61 255
 76.47% 255 120  86 255
 70.59% 255 172 117 255
 64.71% 255 214 153 255
 58.82% 255 241 188 255
 52.94% 255 255 234 255
 47.06% 234 255 255 255
 41.18% 188 249 255 255
 35.29% 153 234 255 255
 29.41% 117 211 255 255
 23.53%  86 176 255 255
 17.65%  61 135 255 255
 11.76%  40  87 255 255
  5.88%  24  28 247 255
  0.00%  36   0 216 255
     nv   0   0   0   0
					';
				ELSE
					RAISE EXCEPTION 'Unknown colormap keyword: %', colormap;
			END CASE;
		END IF;

		RETURN _st_colormap($1, $2, _colormap, $4);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_colormap"(IN rast "public"."raster", IN nband int4, IN colormap text, IN "method" text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_colormap("public"."raster", text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_colormap"("public"."raster", text, text);
CREATE FUNCTION "public"."st_colormap"(IN rast "public"."raster", IN colormap text, IN "method" text DEFAULT 'INTERPOLATE'::text) RETURNS "public"."raster" 
	AS $BODY$ SELECT ST_ColorMap($1, 1, $2, $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_colormap"(IN rast "public"."raster", IN colormap text, IN "method" text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_fromgdalraster(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_fromgdalraster"(bytea, int4);
CREATE FUNCTION "public"."st_fromgdalraster"(IN gdaldata bytea, IN srid int4 DEFAULT NULL::integer) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.1','RASTER_fromGDALRaster'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_fromgdalraster"(IN gdaldata bytea, IN srid int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_fromgdalraster"(IN gdaldata bytea, IN srid int4) IS 'args: gdaldata, srid=NULL - Returns a raster from a supported GDAL raster file.';

-- ----------------------------
--  Function structure for public.st_gdaldrivers()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_gdaldrivers"();
CREATE FUNCTION "public"."st_gdaldrivers"(OUT idx int4, OUT short_name text, OUT long_name text, OUT create_options text) RETURNS SETOF "record" 
	AS '$libdir/rtpostgis-2.1','RASTER_getGDALDrivers'
	LANGUAGE c
	COST 1
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_gdaldrivers"(OUT idx int4, OUT short_name text, OUT long_name text, OUT create_options text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_gdaldrivers"(OUT idx int4, OUT short_name text, OUT long_name text, OUT create_options text) IS 'args: OUT idx, OUT short_name, OUT long_name, OUT create_options - Returns a list of raster formats supported by your lib gdal. These are the formats you can output your raster using ST_AsGDALRaster.';

-- ----------------------------
--  Function structure for public.st_asgdalraster("public"."raster", text, _text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asgdalraster"("public"."raster", text, _text, int4);
CREATE FUNCTION "public"."st_asgdalraster"(IN rast "public"."raster", IN format text, IN "options" _text DEFAULT NULL::text[], IN srid int4 DEFAULT NULL::integer) RETURNS "bytea" 
	AS '$libdir/rtpostgis-2.1','RASTER_asGDALRaster'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asgdalraster"(IN rast "public"."raster", IN format text, IN "options" _text, IN srid int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_asgdalraster"(IN rast "public"."raster", IN format text, IN "options" _text, IN srid int4) IS 'args: rast, format, options=NULL, srid=sameassource - Return the raster tile in the designated GDAL Raster format. Raster formats are one of those supported by your compiled library. Use ST_GDALRasters() to get a list of formats supported by your library.';

-- ----------------------------
--  Function structure for public.st_astiff("public"."raster", _text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_astiff"("public"."raster", _text, int4);
CREATE FUNCTION "public"."st_astiff"(IN rast "public"."raster", IN "options" _text DEFAULT NULL::text[], IN srid int4 DEFAULT NULL::integer) RETURNS "bytea" 
	AS $BODY$
	DECLARE
		i int;
		num_bands int;
		nodata double precision;
		last_nodata double precision;
	BEGIN
		num_bands := st_numbands($1);

		-- TIFF only allows one NODATA value for ALL bands
		FOR i IN 1..num_bands LOOP
			nodata := st_bandnodatavalue($1, i);
			IF last_nodata IS NULL THEN
				last_nodata := nodata;
			ELSEIF nodata != last_nodata THEN
				RAISE NOTICE 'The TIFF format only permits one NODATA value for all bands.  The value used will be the last band with a NODATA value.';
			END IF;
		END LOOP;

		RETURN st_asgdalraster($1, 'GTiff', $2, $3);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_astiff"(IN rast "public"."raster", IN "options" _text, IN srid int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_astiff"(IN rast "public"."raster", IN "options" _text, IN srid int4) IS 'args: rast, options='', srid=sameassource - Return the raster selected bands as a single TIFF image (byte array). If no band is specified, then will try to use all bands.';

-- ----------------------------
--  Function structure for public.st_astiff("public"."raster", _int4, _text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_astiff"("public"."raster", _int4, _text, int4);
CREATE FUNCTION "public"."st_astiff"(IN rast "public"."raster", IN nbands _int4, IN "options" _text DEFAULT NULL::text[], IN srid int4 DEFAULT NULL::integer) RETURNS "bytea" 
	AS $BODY$ SELECT st_astiff(st_band($1, $2), $3, $4) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_astiff"(IN rast "public"."raster", IN nbands _int4, IN "options" _text, IN srid int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_astiff"(IN rast "public"."raster", IN nbands _int4, IN "options" _text, IN srid int4) IS 'args: rast, nbands, options, srid=sameassource - Return the raster selected bands as a single TIFF image (byte array). If no band is specified, then will try to use all bands.';

-- ----------------------------
--  Function structure for public.st_astiff("public"."raster", text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_astiff"("public"."raster", text, int4);
CREATE FUNCTION "public"."st_astiff"(IN rast "public"."raster", IN compression text, IN srid int4 DEFAULT NULL::integer) RETURNS "bytea" 
	AS $BODY$
	DECLARE
		compression2 text;
		c_type text;
		c_level int;
		i int;
		num_bands int;
		options text[];
	BEGIN
		compression2 := trim(both from upper(compression));

		IF length(compression2) > 0 THEN
			-- JPEG
			IF position('JPEG' in compression2) != 0 THEN
				c_type := 'JPEG';
				c_level := substring(compression2 from '[0-9]+$');

				IF c_level IS NOT NULL THEN
					IF c_level > 100 THEN
						c_level := 100;
					ELSEIF c_level < 1 THEN
						c_level := 1;
					END IF;

					options := array_append(options, 'JPEG_QUALITY=' || c_level);
				END IF;

				-- per band pixel type check
				num_bands := st_numbands($1);
				FOR i IN 1..num_bands LOOP
					IF st_bandpixeltype($1, i) != '8BUI' THEN
						RAISE EXCEPTION 'The pixel type of band % in the raster is not 8BUI.  JPEG compression can only be used with the 8BUI pixel type.', i;
					END IF;
				END LOOP;

			-- DEFLATE
			ELSEIF position('DEFLATE' in compression2) != 0 THEN
				c_type := 'DEFLATE';
				c_level := substring(compression2 from '[0-9]+$');

				IF c_level IS NOT NULL THEN
					IF c_level > 9 THEN
						c_level := 9;
					ELSEIF c_level < 1 THEN
						c_level := 1;
					END IF;

					options := array_append(options, 'ZLEVEL=' || c_level);
				END IF;

			ELSE
				c_type := compression2;

				-- CCITT
				IF position('CCITT' in compression2) THEN
					-- per band pixel type check
					num_bands := st_numbands($1);
					FOR i IN 1..num_bands LOOP
						IF st_bandpixeltype($1, i) != '1BB' THEN
							RAISE EXCEPTION 'The pixel type of band % in the raster is not 1BB.  CCITT compression can only be used with the 1BB pixel type.', i;
						END IF;
					END LOOP;
				END IF;

			END IF;

			-- compression type check
			IF ARRAY[c_type] <@ ARRAY['JPEG', 'LZW', 'PACKBITS', 'DEFLATE', 'CCITTRLE', 'CCITTFAX3', 'CCITTFAX4', 'NONE'] THEN
				options := array_append(options, 'COMPRESS=' || c_type);
			ELSE
				RAISE NOTICE 'Unknown compression type: %.  The outputted TIFF will not be COMPRESSED.', c_type;
			END IF;
		END IF;

		RETURN st_astiff($1, options, $3);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_astiff"(IN rast "public"."raster", IN compression text, IN srid int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_astiff"(IN rast "public"."raster", IN compression text, IN srid int4) IS 'args: rast, compression='', srid=sameassource - Return the raster selected bands as a single TIFF image (byte array). If no band is specified, then will try to use all bands.';

-- ----------------------------
--  Function structure for public.st_setrotation("public"."raster", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_setrotation"("public"."raster", float8);
CREATE FUNCTION "public"."st_setrotation"(IN rast "public"."raster", IN rotation float8) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.1','RASTER_setRotation'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_setrotation"(IN rast "public"."raster", IN rotation float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_setrotation"(IN rast "public"."raster", IN rotation float8) IS 'args: rast, rotation - Set the rotation of the raster in radian.';

-- ----------------------------
--  Function structure for public.st_astiff("public"."raster", _int4, text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_astiff"("public"."raster", _int4, text, int4);
CREATE FUNCTION "public"."st_astiff"(IN rast "public"."raster", IN nbands _int4, IN compression text, IN srid int4 DEFAULT NULL::integer) RETURNS "bytea" 
	AS $BODY$ SELECT st_astiff(st_band($1, $2), $3, $4) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_astiff"(IN rast "public"."raster", IN nbands _int4, IN compression text, IN srid int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_astiff"(IN rast "public"."raster", IN nbands _int4, IN compression text, IN srid int4) IS 'args: rast, nbands, compression='', srid=sameassource - Return the raster selected bands as a single TIFF image (byte array). If no band is specified, then will try to use all bands.';

-- ----------------------------
--  Function structure for public.st_asjpeg("public"."raster", _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asjpeg"("public"."raster", _text);
CREATE FUNCTION "public"."st_asjpeg"(IN rast "public"."raster", IN "options" _text DEFAULT NULL::text[]) RETURNS "bytea" 
	AS $BODY$
	DECLARE
		rast2 raster;
		num_bands int;
		i int;
	BEGIN
		num_bands := st_numbands($1);

		-- JPEG allows 1 or 3 bands
		IF num_bands <> 1 AND num_bands <> 3 THEN
			RAISE NOTICE 'The JPEG format only permits one or three bands.  The first band will be used.';
			rast2 := st_band(rast, ARRAY[1]);
			num_bands := st_numbands(rast);
		ELSE
			rast2 := rast;
		END IF;

		-- JPEG only supports 8BUI pixeltype
		FOR i IN 1..num_bands LOOP
			IF st_bandpixeltype(rast, i) != '8BUI' THEN
				RAISE EXCEPTION 'The pixel type of band % in the raster is not 8BUI.  The JPEG format can only be used with the 8BUI pixel type.', i;
			END IF;
		END LOOP;

		RETURN st_asgdalraster(rast2, 'JPEG', $2, NULL);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asjpeg"(IN rast "public"."raster", IN "options" _text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_asjpeg"(IN rast "public"."raster", IN "options" _text) IS 'args: rast, options=NULL - Return the raster tile selected bands as a single Joint Photographic Exports Group (JPEG) image (byte array). If no band is specified and 1 or more than 3 bands, then only the first band is used. If only 3 bands then all 3 bands are used and mapped to RGB.';

-- ----------------------------
--  Function structure for public.st_asjpeg("public"."raster", _int4, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asjpeg"("public"."raster", _int4, _text);
CREATE FUNCTION "public"."st_asjpeg"(IN rast "public"."raster", IN nbands _int4, IN "options" _text DEFAULT NULL::text[]) RETURNS "bytea" 
	AS $BODY$ SELECT st_asjpeg(st_band($1, $2), $3) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asjpeg"(IN rast "public"."raster", IN nbands _int4, IN "options" _text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_asjpeg"(IN rast "public"."raster", IN nbands _int4, IN "options" _text) IS 'args: rast, nbands, options=NULL - Return the raster tile selected bands as a single Joint Photographic Exports Group (JPEG) image (byte array). If no band is specified and 1 or more than 3 bands, then only the first band is used. If only 3 bands then all 3 bands are used and mapped to RGB.';

-- ----------------------------
--  Function structure for public.st_asjpeg("public"."raster", _int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asjpeg"("public"."raster", _int4, int4);
CREATE FUNCTION "public"."st_asjpeg"(IN rast "public"."raster", IN nbands _int4, IN quality int4) RETURNS "bytea" 
	AS $BODY$
	DECLARE
		quality2 int;
		options text[];
	BEGIN
		IF quality IS NOT NULL THEN
			IF quality > 100 THEN
				quality2 := 100;
			ELSEIF quality < 10 THEN
				quality2 := 10;
			ELSE
				quality2 := quality;
			END IF;

			options := array_append(options, 'QUALITY=' || quality2);
		END IF;

		RETURN st_asjpeg(st_band($1, $2), options);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asjpeg"(IN rast "public"."raster", IN nbands _int4, IN quality int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_asjpeg"(IN rast "public"."raster", IN nbands _int4, IN quality int4) IS 'args: rast, nbands, quality - Return the raster tile selected bands as a single Joint Photographic Exports Group (JPEG) image (byte array). If no band is specified and 1 or more than 3 bands, then only the first band is used. If only 3 bands then all 3 bands are used and mapped to RGB.';

-- ----------------------------
--  Function structure for public.st_asjpeg("public"."raster", int4, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asjpeg"("public"."raster", int4, _text);
CREATE FUNCTION "public"."st_asjpeg"(IN rast "public"."raster", IN nband int4, IN "options" _text DEFAULT NULL::text[]) RETURNS "bytea" 
	AS $BODY$ SELECT st_asjpeg(st_band($1, $2), $3) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asjpeg"(IN rast "public"."raster", IN nband int4, IN "options" _text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_asjpeg"(IN rast "public"."raster", IN nband int4, IN "options" _text) IS 'args: rast, nband, options=NULL - Return the raster tile selected bands as a single Joint Photographic Exports Group (JPEG) image (byte array). If no band is specified and 1 or more than 3 bands, then only the first band is used. If only 3 bands then all 3 bands are used and mapped to RGB.';

-- ----------------------------
--  Function structure for public.st_asjpeg("public"."raster", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asjpeg"("public"."raster", int4, int4);
CREATE FUNCTION "public"."st_asjpeg"(IN rast "public"."raster", IN nband int4, IN quality int4) RETURNS "bytea" 
	AS $BODY$ SELECT st_asjpeg($1, ARRAY[$2], $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asjpeg"(IN rast "public"."raster", IN nband int4, IN quality int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_asjpeg"(IN rast "public"."raster", IN nband int4, IN quality int4) IS 'args: rast, nband, quality - Return the raster tile selected bands as a single Joint Photographic Exports Group (JPEG) image (byte array). If no band is specified and 1 or more than 3 bands, then only the first band is used. If only 3 bands then all 3 bands are used and mapped to RGB.';

-- ----------------------------
--  Function structure for public.st_aspng("public"."raster", _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_aspng"("public"."raster", _text);
CREATE FUNCTION "public"."st_aspng"(IN rast "public"."raster", IN "options" _text DEFAULT NULL::text[]) RETURNS "bytea" 
	AS $BODY$
	DECLARE
		rast2 raster;
		num_bands int;
		i int;
		pt text;
	BEGIN
		num_bands := st_numbands($1);

		-- PNG allows 1, 3 or 4 bands
		IF num_bands <> 1 AND num_bands <> 3 AND num_bands <> 4 THEN
			RAISE NOTICE 'The PNG format only permits one, three or four bands.  The first band will be used.';
			rast2 := st_band($1, ARRAY[1]);
			num_bands := st_numbands(rast2);
		ELSE
			rast2 := rast;
		END IF;

		-- PNG only supports 8BUI and 16BUI pixeltype
		FOR i IN 1..num_bands LOOP
			pt = st_bandpixeltype(rast, i);
			IF pt != '8BUI' AND pt != '16BUI' THEN
				RAISE EXCEPTION 'The pixel type of band % in the raster is not 8BUI or 16BUI.  The PNG format can only be used with 8BUI and 16BUI pixel types.', i;
			END IF;
		END LOOP;

		RETURN st_asgdalraster(rast2, 'PNG', $2, NULL);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_aspng"(IN rast "public"."raster", IN "options" _text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_aspng"(IN rast "public"."raster", IN "options" _text) IS 'args: rast, options=NULL - Return the raster tile selected bands as a single portable network graphics (PNG) image (byte array). If 1, 3, or 4 bands in raster and no bands are specified, then all bands are used. If more 2 or more than 4 bands and no bands specified, then only band 1 is used. Bands are mapped to RGB or RGBA space.';

-- ----------------------------
--  Function structure for public.st_aspng("public"."raster", _int4, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_aspng"("public"."raster", _int4, _text);
CREATE FUNCTION "public"."st_aspng"(IN rast "public"."raster", IN nbands _int4, IN "options" _text DEFAULT NULL::text[]) RETURNS "bytea" 
	AS $BODY$ SELECT st_aspng(st_band($1, $2), $3) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_aspng"(IN rast "public"."raster", IN nbands _int4, IN "options" _text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_aspng"(IN rast "public"."raster", IN nbands _int4, IN "options" _text) IS 'args: rast, nbands, options=NULL - Return the raster tile selected bands as a single portable network graphics (PNG) image (byte array). If 1, 3, or 4 bands in raster and no bands are specified, then all bands are used. If more 2 or more than 4 bands and no bands specified, then only band 1 is used. Bands are mapped to RGB or RGBA space.';

-- ----------------------------
--  Function structure for public.st_aspng("public"."raster", _int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_aspng"("public"."raster", _int4, int4);
CREATE FUNCTION "public"."st_aspng"(IN rast "public"."raster", IN nbands _int4, IN compression int4) RETURNS "bytea" 
	AS $BODY$
	DECLARE
		compression2 int;
		options text[];
	BEGIN
		IF compression IS NOT NULL THEN
			IF compression > 9 THEN
				compression2 := 9;
			ELSEIF compression < 1 THEN
				compression2 := 1;
			ELSE
				compression2 := compression;
			END IF;

			options := array_append(options, 'ZLEVEL=' || compression2);
		END IF;

		RETURN st_aspng(st_band($1, $2), options);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_aspng"(IN rast "public"."raster", IN nbands _int4, IN compression int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_aspng"(IN rast "public"."raster", IN nbands _int4, IN compression int4) IS 'args: rast, nbands, compression - Return the raster tile selected bands as a single portable network graphics (PNG) image (byte array). If 1, 3, or 4 bands in raster and no bands are specified, then all bands are used. If more 2 or more than 4 bands and no bands specified, then only band 1 is used. Bands are mapped to RGB or RGBA space.';

-- ----------------------------
--  Function structure for public.st_aspng("public"."raster", int4, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_aspng"("public"."raster", int4, _text);
CREATE FUNCTION "public"."st_aspng"(IN rast "public"."raster", IN nband int4, IN "options" _text DEFAULT NULL::text[]) RETURNS "bytea" 
	AS $BODY$ SELECT st_aspng(st_band($1, $2), $3) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_aspng"(IN rast "public"."raster", IN nband int4, IN "options" _text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_aspng"(IN rast "public"."raster", IN nband int4, IN "options" _text) IS 'args: rast, nband, options=NULL - Return the raster tile selected bands as a single portable network graphics (PNG) image (byte array). If 1, 3, or 4 bands in raster and no bands are specified, then all bands are used. If more 2 or more than 4 bands and no bands specified, then only band 1 is used. Bands are mapped to RGB or RGBA space.';

-- ----------------------------
--  Function structure for public.st_aspng("public"."raster", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_aspng"("public"."raster", int4, int4);
CREATE FUNCTION "public"."st_aspng"(IN rast "public"."raster", IN nband int4, IN compression int4) RETURNS "bytea" 
	AS $BODY$ SELECT st_aspng($1, ARRAY[$2], $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_aspng"(IN rast "public"."raster", IN nband int4, IN compression int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_aspng"(IN rast "public"."raster", IN nband int4, IN compression int4) IS 'args: rast, nband, compression - Return the raster tile selected bands as a single portable network graphics (PNG) image (byte array). If 1, 3, or 4 bands in raster and no bands are specified, then all bands are used. If more 2 or more than 4 bands and no bands specified, then only band 1 is used. Bands are mapped to RGB or RGBA space.';

-- ----------------------------
--  Function structure for public._st_asraster("public"."geometry", float8, float8, int4, int4, _text, _float8, _float8, float8, float8, float8, float8, float8, float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_asraster"("public"."geometry", float8, float8, int4, int4, _text, _float8, _float8, float8, float8, float8, float8, float8, float8, bool);
CREATE FUNCTION "public"."_st_asraster"(IN geom "public"."geometry", IN scalex float8 DEFAULT 0, IN scaley float8 DEFAULT 0, IN width int4 DEFAULT 0, IN height int4 DEFAULT 0, IN pixeltype _text DEFAULT ARRAY['8BUI'::text], IN "value" _float8 DEFAULT ARRAY[(1)::double precision], IN nodataval _float8 DEFAULT ARRAY[(0)::double precision], IN upperleftx float8 DEFAULT NULL::double precision, IN upperlefty float8 DEFAULT NULL::double precision, IN gridx float8 DEFAULT NULL::double precision, IN gridy float8 DEFAULT NULL::double precision, IN skewx float8 DEFAULT 0, IN skewy float8 DEFAULT 0, IN touched bool DEFAULT false) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.1','RASTER_asRaster'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_st_asraster"(IN geom "public"."geometry", IN scalex float8, IN scaley float8, IN width int4, IN height int4, IN pixeltype _text, IN "value" _float8, IN nodataval _float8, IN upperleftx float8, IN upperlefty float8, IN gridx float8, IN gridy float8, IN skewx float8, IN skewy float8, IN touched bool) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_asraster("public"."geometry", float8, float8, float8, float8, _text, _float8, _float8, float8, float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asraster"("public"."geometry", float8, float8, float8, float8, _text, _float8, _float8, float8, float8, bool);
CREATE FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN scalex float8, IN scaley float8, IN gridx float8 DEFAULT NULL::double precision, IN gridy float8 DEFAULT NULL::double precision, IN pixeltype _text DEFAULT ARRAY['8BUI'::text], IN "value" _float8 DEFAULT ARRAY[(1)::double precision], IN nodataval _float8 DEFAULT ARRAY[(0)::double precision], IN skewx float8 DEFAULT 0, IN skewy float8 DEFAULT 0, IN touched bool DEFAULT false) RETURNS "public"."raster" 
	AS $BODY$ SELECT _st_asraster($1, $2, $3, NULL, NULL, $6, $7, $8, NULL, NULL, $4, $5, $9, $10, $11) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN scalex float8, IN scaley float8, IN gridx float8, IN gridy float8, IN pixeltype _text, IN "value" _float8, IN nodataval _float8, IN skewx float8, IN skewy float8, IN touched bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN scalex float8, IN scaley float8, IN gridx float8, IN gridy float8, IN pixeltype _text, IN "value" _float8, IN nodataval _float8, IN skewx float8, IN skewy float8, IN touched bool) IS 'args: geom, scalex, scaley, gridx=NULL, gridy=NULL, pixeltype=ARRAY[''8BUI''], value=ARRAY[1], nodataval=ARRAY[0], skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.';

-- ----------------------------
--  Function structure for public.st_asraster("public"."geometry", float8, float8, _text, _float8, _float8, float8, float8, float8, float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asraster"("public"."geometry", float8, float8, _text, _float8, _float8, float8, float8, float8, float8, bool);
CREATE FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN scalex float8, IN scaley float8, IN pixeltype _text, IN "value" _float8 DEFAULT ARRAY[(1)::double precision], IN nodataval _float8 DEFAULT ARRAY[(0)::double precision], IN upperleftx float8 DEFAULT NULL::double precision, IN upperlefty float8 DEFAULT NULL::double precision, IN skewx float8 DEFAULT 0, IN skewy float8 DEFAULT 0, IN touched bool DEFAULT false) RETURNS "public"."raster" 
	AS $BODY$ SELECT _st_asraster($1, $2, $3, NULL, NULL, $4, $5, $6, $7, $8, NULL, NULL,	$9, $10, $11) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN scalex float8, IN scaley float8, IN pixeltype _text, IN "value" _float8, IN nodataval _float8, IN upperleftx float8, IN upperlefty float8, IN skewx float8, IN skewy float8, IN touched bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN scalex float8, IN scaley float8, IN pixeltype _text, IN "value" _float8, IN nodataval _float8, IN upperleftx float8, IN upperlefty float8, IN skewx float8, IN skewy float8, IN touched bool) IS 'args: geom, scalex, scaley, pixeltype, value=ARRAY[1], nodataval=ARRAY[0], upperleftx=NULL, upperlefty=NULL, skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.';

-- ----------------------------
--  Function structure for public.st_asraster("public"."geometry", int4, int4, float8, float8, _text, _float8, _float8, float8, float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asraster"("public"."geometry", int4, int4, float8, float8, _text, _float8, _float8, float8, float8, bool);
CREATE FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN width int4, IN height int4, IN gridx float8 DEFAULT NULL::double precision, IN gridy float8 DEFAULT NULL::double precision, IN pixeltype _text DEFAULT ARRAY['8BUI'::text], IN "value" _float8 DEFAULT ARRAY[(1)::double precision], IN nodataval _float8 DEFAULT ARRAY[(0)::double precision], IN skewx float8 DEFAULT 0, IN skewy float8 DEFAULT 0, IN touched bool DEFAULT false) RETURNS "public"."raster" 
	AS $BODY$ SELECT _st_asraster($1, NULL, NULL, $2, $3, $6, $7, $8, NULL, NULL, $4, $5, $9, $10, $11) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN width int4, IN height int4, IN gridx float8, IN gridy float8, IN pixeltype _text, IN "value" _float8, IN nodataval _float8, IN skewx float8, IN skewy float8, IN touched bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN width int4, IN height int4, IN gridx float8, IN gridy float8, IN pixeltype _text, IN "value" _float8, IN nodataval _float8, IN skewx float8, IN skewy float8, IN touched bool) IS 'args: geom, width, height, gridx=NULL, gridy=NULL, pixeltype=ARRAY[''8BUI''], value=ARRAY[1], nodataval=ARRAY[0], skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.';

-- ----------------------------
--  Function structure for public.st_asraster("public"."geometry", int4, int4, _text, _float8, _float8, float8, float8, float8, float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asraster"("public"."geometry", int4, int4, _text, _float8, _float8, float8, float8, float8, float8, bool);
CREATE FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN width int4, IN height int4, IN pixeltype _text, IN "value" _float8 DEFAULT ARRAY[(1)::double precision], IN nodataval _float8 DEFAULT ARRAY[(0)::double precision], IN upperleftx float8 DEFAULT NULL::double precision, IN upperlefty float8 DEFAULT NULL::double precision, IN skewx float8 DEFAULT 0, IN skewy float8 DEFAULT 0, IN touched bool DEFAULT false) RETURNS "public"."raster" 
	AS $BODY$ SELECT _st_asraster($1, NULL, NULL, $2, $3, $4, $5, $6, $7, $8, NULL, NULL,	$9, $10, $11) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN width int4, IN height int4, IN pixeltype _text, IN "value" _float8, IN nodataval _float8, IN upperleftx float8, IN upperlefty float8, IN skewx float8, IN skewy float8, IN touched bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN width int4, IN height int4, IN pixeltype _text, IN "value" _float8, IN nodataval _float8, IN upperleftx float8, IN upperlefty float8, IN skewx float8, IN skewy float8, IN touched bool) IS 'args: geom, width, height, pixeltype, value=ARRAY[1], nodataval=ARRAY[0], upperleftx=NULL, upperlefty=NULL, skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.';

-- ----------------------------
--  Function structure for public.st_asraster("public"."geometry", float8, float8, float8, float8, text, float8, float8, float8, float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asraster"("public"."geometry", float8, float8, float8, float8, text, float8, float8, float8, float8, bool);
CREATE FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN scalex float8, IN scaley float8, IN gridx float8, IN gridy float8, IN pixeltype text, IN "value" float8 DEFAULT 1, IN nodataval float8 DEFAULT 0, IN skewx float8 DEFAULT 0, IN skewy float8 DEFAULT 0, IN touched bool DEFAULT false) RETURNS "public"."raster" 
	AS $BODY$ SELECT _st_asraster($1, $2, $3, NULL, NULL, ARRAY[$6]::text[], ARRAY[$7]::double precision[], ARRAY[$8]::double precision[], NULL, NULL, $4, $5, $9, $10, $11) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN scalex float8, IN scaley float8, IN gridx float8, IN gridy float8, IN pixeltype text, IN "value" float8, IN nodataval float8, IN skewx float8, IN skewy float8, IN touched bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN scalex float8, IN scaley float8, IN gridx float8, IN gridy float8, IN pixeltype text, IN "value" float8, IN nodataval float8, IN skewx float8, IN skewy float8, IN touched bool) IS 'args: geom, scalex, scaley, gridx, gridy, pixeltype, value=1, nodataval=0, skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.';

-- ----------------------------
--  Function structure for public.st_asraster("public"."geometry", float8, float8, text, float8, float8, float8, float8, float8, float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asraster"("public"."geometry", float8, float8, text, float8, float8, float8, float8, float8, float8, bool);
CREATE FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN scalex float8, IN scaley float8, IN pixeltype text, IN "value" float8 DEFAULT 1, IN nodataval float8 DEFAULT 0, IN upperleftx float8 DEFAULT NULL::double precision, IN upperlefty float8 DEFAULT NULL::double precision, IN skewx float8 DEFAULT 0, IN skewy float8 DEFAULT 0, IN touched bool DEFAULT false) RETURNS "public"."raster" 
	AS $BODY$ SELECT _st_asraster($1, $2, $3, NULL, NULL, ARRAY[$4]::text[], ARRAY[$5]::double precision[], ARRAY[$6]::double precision[], $7, $8, NULL, NULL, $9, $10, $11) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN scalex float8, IN scaley float8, IN pixeltype text, IN "value" float8, IN nodataval float8, IN upperleftx float8, IN upperlefty float8, IN skewx float8, IN skewy float8, IN touched bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN scalex float8, IN scaley float8, IN pixeltype text, IN "value" float8, IN nodataval float8, IN upperleftx float8, IN upperlefty float8, IN skewx float8, IN skewy float8, IN touched bool) IS 'args: geom, scalex, scaley, pixeltype, value=1, nodataval=0, upperleftx=NULL, upperlefty=NULL, skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.';

-- ----------------------------
--  Function structure for public.st_asraster("public"."geometry", int4, int4, float8, float8, text, float8, float8, float8, float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asraster"("public"."geometry", int4, int4, float8, float8, text, float8, float8, float8, float8, bool);
CREATE FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN width int4, IN height int4, IN gridx float8, IN gridy float8, IN pixeltype text, IN "value" float8 DEFAULT 1, IN nodataval float8 DEFAULT 0, IN skewx float8 DEFAULT 0, IN skewy float8 DEFAULT 0, IN touched bool DEFAULT false) RETURNS "public"."raster" 
	AS $BODY$ SELECT _st_asraster($1, NULL, NULL, $2, $3, ARRAY[$6]::text[], ARRAY[$7]::double precision[], ARRAY[$8]::double precision[], NULL, NULL, $4, $5, $9, $10, $11) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN width int4, IN height int4, IN gridx float8, IN gridy float8, IN pixeltype text, IN "value" float8, IN nodataval float8, IN skewx float8, IN skewy float8, IN touched bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN width int4, IN height int4, IN gridx float8, IN gridy float8, IN pixeltype text, IN "value" float8, IN nodataval float8, IN skewx float8, IN skewy float8, IN touched bool) IS 'args: geom, width, height, gridx, gridy, pixeltype, value=1, nodataval=0, skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.';

-- ----------------------------
--  Function structure for public.st_asraster("public"."geometry", int4, int4, text, float8, float8, float8, float8, float8, float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asraster"("public"."geometry", int4, int4, text, float8, float8, float8, float8, float8, float8, bool);
CREATE FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN width int4, IN height int4, IN pixeltype text, IN "value" float8 DEFAULT 1, IN nodataval float8 DEFAULT 0, IN upperleftx float8 DEFAULT NULL::double precision, IN upperlefty float8 DEFAULT NULL::double precision, IN skewx float8 DEFAULT 0, IN skewy float8 DEFAULT 0, IN touched bool DEFAULT false) RETURNS "public"."raster" 
	AS $BODY$ SELECT _st_asraster($1, NULL, NULL, $2, $3, ARRAY[$4]::text[], ARRAY[$5]::double precision[], ARRAY[$6]::double precision[], $7, $8, NULL, NULL,$9, $10, $11) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN width int4, IN height int4, IN pixeltype text, IN "value" float8, IN nodataval float8, IN upperleftx float8, IN upperlefty float8, IN skewx float8, IN skewy float8, IN touched bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN width int4, IN height int4, IN pixeltype text, IN "value" float8, IN nodataval float8, IN upperleftx float8, IN upperlefty float8, IN skewx float8, IN skewy float8, IN touched bool) IS 'args: geom, width, height, pixeltype, value=1, nodataval=0, upperleftx=NULL, upperlefty=NULL, skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.';

-- ----------------------------
--  Function structure for public.st_asraster("public"."geometry", "public"."raster", _text, _float8, _float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asraster"("public"."geometry", "public"."raster", _text, _float8, _float8, bool);
CREATE FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN "ref" "public"."raster", IN pixeltype _text DEFAULT ARRAY['8BUI'::text], IN "value" _float8 DEFAULT ARRAY[(1)::double precision], IN nodataval _float8 DEFAULT ARRAY[(0)::double precision], IN touched bool DEFAULT false) RETURNS "public"."raster" 
	AS $BODY$
	DECLARE
		g geometry;
		g_srid integer;

		ul_x double precision;
		ul_y double precision;
		scale_x double precision;
		scale_y double precision;
		skew_x double precision;
		skew_y double precision;
		sr_id integer;
	BEGIN
		SELECT upperleftx, upperlefty, scalex, scaley, skewx, skewy, srid INTO ul_x, ul_y, scale_x, scale_y, skew_x, skew_y, sr_id FROM ST_Metadata(ref);
		--RAISE NOTICE '%, %, %, %, %, %, %', ul_x, ul_y, scale_x, scale_y, skew_x, skew_y, sr_id;

		-- geometry and raster has different SRID
		g_srid := ST_SRID(geom);
		IF g_srid != sr_id THEN
			RAISE NOTICE 'The geometry''s SRID (%) is not the same as the raster''s SRID (%).  The geometry will be transformed to the raster''s projection', g_srid, sr_id;
			g := ST_Transform(geom, sr_id);
		ELSE
			g := geom;
		END IF;

		RETURN _st_asraster(g, scale_x, scale_y, NULL, NULL, $3, $4, $5, NULL, NULL, ul_x, ul_y, skew_x, skew_y, $6);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN "ref" "public"."raster", IN pixeltype _text, IN "value" _float8, IN nodataval _float8, IN touched bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN "ref" "public"."raster", IN pixeltype _text, IN "value" _float8, IN nodataval _float8, IN touched bool) IS 'args: geom, ref, pixeltype=ARRAY[''8BUI''], value=ARRAY[1], nodataval=ARRAY[0], touched=false - Converts a PostGIS geometry to a PostGIS raster.';

-- ----------------------------
--  Function structure for public.st_asraster("public"."geometry", "public"."raster", text, float8, float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asraster"("public"."geometry", "public"."raster", text, float8, float8, bool);
CREATE FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN "ref" "public"."raster", IN pixeltype text, IN "value" float8 DEFAULT 1, IN nodataval float8 DEFAULT 0, IN touched bool DEFAULT false) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_asraster($1, $2, ARRAY[$3]::text[], ARRAY[$4]::double precision[], ARRAY[$5]::double precision[], $6) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN "ref" "public"."raster", IN pixeltype text, IN "value" float8, IN nodataval float8, IN touched bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN "ref" "public"."raster", IN pixeltype text, IN "value" float8, IN nodataval float8, IN touched bool) IS 'args: geom, ref, pixeltype, value=1, nodataval=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.';

-- ----------------------------
--  Function structure for public._st_gdalwarp("public"."raster", text, float8, int4, float8, float8, float8, float8, float8, float8, int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_gdalwarp"("public"."raster", text, float8, int4, float8, float8, float8, float8, float8, float8, int4, int4);
CREATE FUNCTION "public"."_st_gdalwarp"(IN rast "public"."raster", IN algorithm text DEFAULT 'NearestNeighbour'::text, IN maxerr float8 DEFAULT 0.125, IN srid int4 DEFAULT NULL::integer, IN scalex float8 DEFAULT 0, IN scaley float8 DEFAULT 0, IN gridx float8 DEFAULT NULL::double precision, IN gridy float8 DEFAULT NULL::double precision, IN skewx float8 DEFAULT 0, IN skewy float8 DEFAULT 0, IN width int4 DEFAULT NULL::integer, IN height int4 DEFAULT NULL::integer) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.1','RASTER_GDALWarp'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_st_gdalwarp"(IN rast "public"."raster", IN algorithm text, IN maxerr float8, IN srid int4, IN scalex float8, IN scaley float8, IN gridx float8, IN gridy float8, IN skewx float8, IN skewy float8, IN width int4, IN height int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_resample("public"."raster", float8, float8, float8, float8, float8, float8, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_resample"("public"."raster", float8, float8, float8, float8, float8, float8, text, float8);
CREATE FUNCTION "public"."st_resample"(IN rast "public"."raster", IN scalex float8 DEFAULT 0, IN scaley float8 DEFAULT 0, IN gridx float8 DEFAULT NULL::double precision, IN gridy float8 DEFAULT NULL::double precision, IN skewx float8 DEFAULT 0, IN skewy float8 DEFAULT 0, IN algorithm text DEFAULT 'NearestNeighbour'::text, IN maxerr float8 DEFAULT 0.125) RETURNS "public"."raster" 
	AS $BODY$ SELECT _st_gdalwarp($1, $8,	$9, NULL, $2, $3, $4, $5, $6, $7) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_resample"(IN rast "public"."raster", IN scalex float8, IN scaley float8, IN gridx float8, IN gridy float8, IN skewx float8, IN skewy float8, IN algorithm text, IN maxerr float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_resample"(IN rast "public"."raster", IN scalex float8, IN scaley float8, IN gridx float8, IN gridy float8, IN skewx float8, IN skewy float8, IN algorithm text, IN maxerr float8) IS 'args: rast, scalex=0, scaley=0, gridx=NULL, gridy=NULL, skewx=0, skewy=0, algorithm=NearestNeighbor, maxerr=0.125 - Resample a raster using a specified resampling algorithm, new dimensions, an arbitrary grid corner and a set of raster georeferencing attributes defined or borrowed from another raster.';

-- ----------------------------
--  Function structure for public.st_resample("public"."raster", int4, int4, float8, float8, float8, float8, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_resample"("public"."raster", int4, int4, float8, float8, float8, float8, text, float8);
CREATE FUNCTION "public"."st_resample"(IN rast "public"."raster", IN width int4, IN height int4, IN gridx float8 DEFAULT NULL::double precision, IN gridy float8 DEFAULT NULL::double precision, IN skewx float8 DEFAULT 0, IN skewy float8 DEFAULT 0, IN algorithm text DEFAULT 'NearestNeighbour'::text, IN maxerr float8 DEFAULT 0.125) RETURNS "public"."raster" 
	AS $BODY$ SELECT _st_gdalwarp($1, $8,	$9, NULL, NULL, NULL, $4, $5, $6, $7, $2, $3) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_resample"(IN rast "public"."raster", IN width int4, IN height int4, IN gridx float8, IN gridy float8, IN skewx float8, IN skewy float8, IN algorithm text, IN maxerr float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_resample"(IN rast "public"."raster", IN width int4, IN height int4, IN gridx float8, IN gridy float8, IN skewx float8, IN skewy float8, IN algorithm text, IN maxerr float8) IS 'args: rast, width, height, gridx=NULL, gridy=NULL, skewx=0, skewy=0, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster using a specified resampling algorithm, new dimensions, an arbitrary grid corner and a set of raster georeferencing attributes defined or borrowed from another raster.';

-- ----------------------------
--  Function structure for public.st_resample("public"."raster", "public"."raster", text, float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_resample"("public"."raster", "public"."raster", text, float8, bool);
CREATE FUNCTION "public"."st_resample"(IN rast "public"."raster", IN "ref" "public"."raster", IN algorithm text DEFAULT 'NearestNeighbour'::text, IN maxerr float8 DEFAULT 0.125, IN usescale bool DEFAULT true) RETURNS "public"."raster" 
	AS $BODY$
	DECLARE
		rastsrid int;

		_srid int;
		_dimx int;
		_dimy int;
		_scalex double precision;
		_scaley double precision;
		_gridx double precision;
		_gridy double precision;
		_skewx double precision;
		_skewy double precision;
	BEGIN
		SELECT srid, width, height, scalex, scaley, upperleftx, upperlefty, skewx, skewy INTO _srid, _dimx, _dimy, _scalex, _scaley, _gridx, _gridy, _skewx, _skewy FROM st_metadata($2);

		rastsrid := ST_SRID($1);

		-- both rasters must have the same SRID
		IF (rastsrid != _srid) THEN
			RAISE EXCEPTION 'The raster to be resampled has a different SRID from the reference raster';
			RETURN NULL;
		END IF;

		IF usescale IS TRUE THEN
			_dimx := NULL;
			_dimy := NULL;
		ELSE
			_scalex := NULL;
			_scaley := NULL;
		END IF;

		RETURN _st_gdalwarp($1, $3, $4, NULL, _scalex, _scaley, _gridx, _gridy, _skewx, _skewy, _dimx, _dimy);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_resample"(IN rast "public"."raster", IN "ref" "public"."raster", IN algorithm text, IN maxerr float8, IN usescale bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_resample"(IN rast "public"."raster", IN "ref" "public"."raster", IN algorithm text, IN maxerr float8, IN usescale bool) IS 'args: rast, ref, algorithm=NearestNeighbour, maxerr=0.125, usescale=true - Resample a raster using a specified resampling algorithm, new dimensions, an arbitrary grid corner and a set of raster georeferencing attributes defined or borrowed from another raster.';

-- ----------------------------
--  Function structure for public.st_resample("public"."raster", "public"."raster", bool, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_resample"("public"."raster", "public"."raster", bool, text, float8);
CREATE FUNCTION "public"."st_resample"(IN rast "public"."raster", IN "ref" "public"."raster", IN usescale bool, IN algorithm text DEFAULT 'NearestNeighbour'::text, IN maxerr float8 DEFAULT 0.125) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_resample($1, $2, $4, $5, $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_resample"(IN rast "public"."raster", IN "ref" "public"."raster", IN usescale bool, IN algorithm text, IN maxerr float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_resample"(IN rast "public"."raster", IN "ref" "public"."raster", IN usescale bool, IN algorithm text, IN maxerr float8) IS 'args: rast, ref, usescale, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster using a specified resampling algorithm, new dimensions, an arbitrary grid corner and a set of raster georeferencing attributes defined or borrowed from another raster.';

-- ----------------------------
--  Function structure for public.st_transform("public"."raster", int4, text, float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_transform"("public"."raster", int4, text, float8, float8, float8);
CREATE FUNCTION "public"."st_transform"(IN rast "public"."raster", IN srid int4, IN algorithm text DEFAULT 'NearestNeighbour'::text, IN maxerr float8 DEFAULT 0.125, IN scalex float8 DEFAULT 0, IN scaley float8 DEFAULT 0) RETURNS "public"."raster" 
	AS $BODY$ SELECT _st_gdalwarp($1, $3, $4, $2, $5, $6) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_transform"(IN rast "public"."raster", IN srid int4, IN algorithm text, IN maxerr float8, IN scalex float8, IN scaley float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_transform"(IN rast "public"."raster", IN srid int4, IN algorithm text, IN maxerr float8, IN scalex float8, IN scaley float8) IS 'args: rast, srid, algorithm=NearestNeighbor, maxerr=0.125, scalex, scaley - Reprojects a raster in a known spatial reference system to another known spatial reference system using specified resampling algorithm. Options are NearestNeighbor, Bilinear, Cubic, CubicSpline, Lanczos defaulting to NearestNeighbor.';

-- ----------------------------
--  Function structure for public.st_transform("public"."raster", int4, float8, float8, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_transform"("public"."raster", int4, float8, float8, text, float8);
CREATE FUNCTION "public"."st_transform"(IN rast "public"."raster", IN srid int4, IN scalex float8, IN scaley float8, IN algorithm text DEFAULT 'NearestNeighbour'::text, IN maxerr float8 DEFAULT 0.125) RETURNS "public"."raster" 
	AS $BODY$ SELECT _st_gdalwarp($1, $5, $6, $2, $3, $4) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_transform"(IN rast "public"."raster", IN srid int4, IN scalex float8, IN scaley float8, IN algorithm text, IN maxerr float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_transform"(IN rast "public"."raster", IN srid int4, IN scalex float8, IN scaley float8, IN algorithm text, IN maxerr float8) IS 'args: rast, srid, scalex, scaley, algorithm=NearestNeighbor, maxerr=0.125 - Reprojects a raster in a known spatial reference system to another known spatial reference system using specified resampling algorithm. Options are NearestNeighbor, Bilinear, Cubic, CubicSpline, Lanczos defaulting to NearestNeighbor.';

-- ----------------------------
--  Function structure for public.st_transform("public"."raster", int4, float8, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_transform"("public"."raster", int4, float8, text, float8);
CREATE FUNCTION "public"."st_transform"(IN rast "public"."raster", IN srid int4, IN scalexy float8, IN algorithm text DEFAULT 'NearestNeighbour'::text, IN maxerr float8 DEFAULT 0.125) RETURNS "public"."raster" 
	AS $BODY$ SELECT _st_gdalwarp($1, $4, $5, $2, $3, $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_transform"(IN rast "public"."raster", IN srid int4, IN scalexy float8, IN algorithm text, IN maxerr float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_transform("public"."raster", "public"."raster", text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_transform"("public"."raster", "public"."raster", text, float8);
CREATE FUNCTION "public"."st_transform"(IN rast "public"."raster", IN alignto "public"."raster", IN algorithm text DEFAULT 'NearestNeighbour'::text, IN maxerr float8 DEFAULT 0.125) RETURNS "public"."raster" 
	AS $BODY$
	DECLARE
		_srid integer;
		_scalex double precision;
		_scaley double precision;
		_gridx double precision;
		_gridy double precision;
		_skewx double precision;
		_skewy double precision;
	BEGIN
		SELECT srid, scalex, scaley, upperleftx, upperlefty, skewx, skewy INTO _srid, _scalex, _scaley, _gridx, _gridy, _skewx, _skewy FROM st_metadata($2);

		RETURN _st_gdalwarp($1, $3, $4, _srid, _scalex, _scaley, _gridx, _gridy, _skewx, _skewy, NULL, NULL);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_transform"(IN rast "public"."raster", IN alignto "public"."raster", IN algorithm text, IN maxerr float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_transform"(IN rast "public"."raster", IN alignto "public"."raster", IN algorithm text, IN maxerr float8) IS 'args: rast, alignto, algorithm=NearestNeighbor, maxerr=0.125 - Reprojects a raster in a known spatial reference system to another known spatial reference system using specified resampling algorithm. Options are NearestNeighbor, Bilinear, Cubic, CubicSpline, Lanczos defaulting to NearestNeighbor.';

-- ----------------------------
--  Function structure for public.st_rescale("public"."raster", float8, float8, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_rescale"("public"."raster", float8, float8, text, float8);
CREATE FUNCTION "public"."st_rescale"(IN rast "public"."raster", IN scalex float8, IN scaley float8, IN algorithm text DEFAULT 'NearestNeighbour'::text, IN maxerr float8 DEFAULT 0.125) RETURNS "public"."raster" 
	AS $BODY$ SELECT _st_gdalwarp($1, $4, $5, NULL, $2, $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_rescale"(IN rast "public"."raster", IN scalex float8, IN scaley float8, IN algorithm text, IN maxerr float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_rescale"(IN rast "public"."raster", IN scalex float8, IN scaley float8, IN algorithm text, IN maxerr float8) IS 'args: rast, scalex, scaley, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster by adjusting only its scale (or pixel size). New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.';

-- ----------------------------
--  Function structure for public.st_rescale("public"."raster", float8, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_rescale"("public"."raster", float8, text, float8);
CREATE FUNCTION "public"."st_rescale"(IN rast "public"."raster", IN scalexy float8, IN algorithm text DEFAULT 'NearestNeighbour'::text, IN maxerr float8 DEFAULT 0.125) RETURNS "public"."raster" 
	AS $BODY$ SELECT _st_gdalwarp($1, $3, $4, NULL, $2, $2) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_rescale"(IN rast "public"."raster", IN scalexy float8, IN algorithm text, IN maxerr float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_rescale"(IN rast "public"."raster", IN scalexy float8, IN algorithm text, IN maxerr float8) IS 'args: rast, scalexy, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster by adjusting only its scale (or pixel size). New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.';

-- ----------------------------
--  Function structure for public.st_reskew("public"."raster", float8, float8, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_reskew"("public"."raster", float8, float8, text, float8);
CREATE FUNCTION "public"."st_reskew"(IN rast "public"."raster", IN skewx float8, IN skewy float8, IN algorithm text DEFAULT 'NearestNeighbour'::text, IN maxerr float8 DEFAULT 0.125) RETURNS "public"."raster" 
	AS $BODY$ SELECT _st_gdalwarp($1, $4, $5, NULL, 0, 0, NULL, NULL, $2, $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_reskew"(IN rast "public"."raster", IN skewx float8, IN skewy float8, IN algorithm text, IN maxerr float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_reskew"(IN rast "public"."raster", IN skewx float8, IN skewy float8, IN algorithm text, IN maxerr float8) IS 'args: rast, skewx, skewy, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster by adjusting only its skew (or rotation parameters). New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.';

-- ----------------------------
--  Function structure for public.st_setgeotransform("public"."raster", float8, float8, float8, float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_setgeotransform"("public"."raster", float8, float8, float8, float8, float8, float8);
CREATE FUNCTION "public"."st_setgeotransform"(IN rast "public"."raster", IN imag float8, IN jmag float8, IN theta_i float8, IN theta_ij float8, IN xoffset float8, IN yoffset float8) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.1','RASTER_setGeotransform'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_setgeotransform"(IN rast "public"."raster", IN imag float8, IN jmag float8, IN theta_i float8, IN theta_ij float8, IN xoffset float8, IN yoffset float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_reskew("public"."raster", float8, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_reskew"("public"."raster", float8, text, float8);
CREATE FUNCTION "public"."st_reskew"(IN rast "public"."raster", IN skewxy float8, IN algorithm text DEFAULT 'NearestNeighbour'::text, IN maxerr float8 DEFAULT 0.125) RETURNS "public"."raster" 
	AS $BODY$ SELECT _st_gdalwarp($1, $3, $4, NULL, 0, 0, NULL, NULL, $2, $2) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_reskew"(IN rast "public"."raster", IN skewxy float8, IN algorithm text, IN maxerr float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_reskew"(IN rast "public"."raster", IN skewxy float8, IN algorithm text, IN maxerr float8) IS 'args: rast, skewxy, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster by adjusting only its skew (or rotation parameters). New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.';

-- ----------------------------
--  Function structure for public.st_snaptogrid("public"."raster", float8, float8, text, float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_snaptogrid"("public"."raster", float8, float8, text, float8, float8, float8);
CREATE FUNCTION "public"."st_snaptogrid"(IN rast "public"."raster", IN gridx float8, IN gridy float8, IN algorithm text DEFAULT 'NearestNeighbour'::text, IN maxerr float8 DEFAULT 0.125, IN scalex float8 DEFAULT 0, IN scaley float8 DEFAULT 0) RETURNS "public"."raster" 
	AS $BODY$ SELECT _st_gdalwarp($1, $4, $5, NULL, $6, $7, $2, $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_snaptogrid"(IN rast "public"."raster", IN gridx float8, IN gridy float8, IN algorithm text, IN maxerr float8, IN scalex float8, IN scaley float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_snaptogrid"(IN rast "public"."raster", IN gridx float8, IN gridy float8, IN algorithm text, IN maxerr float8, IN scalex float8, IN scaley float8) IS 'args: rast, gridx, gridy, algorithm=NearestNeighbour, maxerr=0.125, scalex=DEFAULT 0, scaley=DEFAULT 0 - Resample a raster by snapping it to a grid. New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.';

-- ----------------------------
--  Function structure for public.st_snaptogrid("public"."raster", float8, float8, float8, float8, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_snaptogrid"("public"."raster", float8, float8, float8, float8, text, float8);
CREATE FUNCTION "public"."st_snaptogrid"(IN rast "public"."raster", IN gridx float8, IN gridy float8, IN scalex float8, IN scaley float8, IN algorithm text DEFAULT 'NearestNeighbour'::text, IN maxerr float8 DEFAULT 0.125) RETURNS "public"."raster" 
	AS $BODY$ SELECT _st_gdalwarp($1, $6, $7, NULL, $4, $5, $2, $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_snaptogrid"(IN rast "public"."raster", IN gridx float8, IN gridy float8, IN scalex float8, IN scaley float8, IN algorithm text, IN maxerr float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_snaptogrid"(IN rast "public"."raster", IN gridx float8, IN gridy float8, IN scalex float8, IN scaley float8, IN algorithm text, IN maxerr float8) IS 'args: rast, gridx, gridy, scalex, scaley, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster by snapping it to a grid. New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.';

-- ----------------------------
--  Function structure for public.st_snaptogrid("public"."raster", float8, float8, float8, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_snaptogrid"("public"."raster", float8, float8, float8, text, float8);
CREATE FUNCTION "public"."st_snaptogrid"(IN rast "public"."raster", IN gridx float8, IN gridy float8, IN scalexy float8, IN algorithm text DEFAULT 'NearestNeighbour'::text, IN maxerr float8 DEFAULT 0.125) RETURNS "public"."raster" 
	AS $BODY$ SELECT _st_gdalwarp($1, $5, $6, NULL, $4, $4, $2, $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_snaptogrid"(IN rast "public"."raster", IN gridx float8, IN gridy float8, IN scalexy float8, IN algorithm text, IN maxerr float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_snaptogrid"(IN rast "public"."raster", IN gridx float8, IN gridy float8, IN scalexy float8, IN algorithm text, IN maxerr float8) IS 'args: rast, gridx, gridy, scalexy, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster by snapping it to a grid. New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.';

-- ----------------------------
--  Function structure for public.st_resize("public"."raster", text, text, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_resize"("public"."raster", text, text, text, float8);
CREATE FUNCTION "public"."st_resize"(IN rast "public"."raster", IN width text, IN height text, IN algorithm text DEFAULT 'NearestNeighbour'::text, IN maxerr float8 DEFAULT 0.125) RETURNS "public"."raster" 
	AS $BODY$
	DECLARE
		i integer;

		wh text[2];

		whi integer[2];
		whd double precision[2];

		_width integer;
		_height integer;
	BEGIN
		wh[1] := trim(both from $2);
		wh[2] := trim(both from $3);

		-- see if width and height are percentages
		FOR i IN 1..2 LOOP
			IF position('%' in wh[i]) > 0 THEN
				BEGIN
					wh[i] := (regexp_matches(wh[i], E'^(\\d*.?\\d*)%{1}$'))[1];
					IF length(wh[i]) < 1 THEN
						RAISE invalid_parameter_value;
					END IF;

					whd[i] := wh[i]::double precision * 0.01;
				EXCEPTION WHEN OTHERS THEN
					RAISE EXCEPTION 'Invalid percentage value provided for width/height';
					RETURN NULL;
				END;
			ELSE
				BEGIN
					whi[i] := abs(wh[i]::integer);
				EXCEPTION WHEN OTHERS THEN
					RAISE EXCEPTION 'Non-integer value provided for width/height';
					RETURN NULL;
				END;
			END IF;
		END LOOP;

		IF whd[1] IS NOT NULL OR whd[2] IS NOT NULL THEN
			SELECT foo.width, foo.height INTO _width, _height FROM ST_Metadata($1) AS foo;

			IF whd[1] IS NOT NULL THEN
				whi[1] := round(_width::double precision * whd[1])::integer;
			END IF;

			IF whd[2] IS NOT NULL THEN
				whi[2] := round(_height::double precision * whd[2])::integer;
			END IF;

		END IF;

		-- should NEVER be here
		IF whi[1] IS NULL OR whi[2] IS NULL THEN
			RAISE EXCEPTION 'Unable to determine appropriate width or height';
			RETURN NULL;
		END IF;

		FOR i IN 1..2 LOOP
			IF whi[i] < 1 THEN
				whi[i] = 1;
			END IF;
		END LOOP;

		RETURN _st_gdalwarp(
			$1,
			$4, $5,
			NULL,
			NULL, NULL,
			NULL, NULL,
			NULL, NULL,
			whi[1], whi[2]
		);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_resize"(IN rast "public"."raster", IN width text, IN height text, IN algorithm text, IN maxerr float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_resize"(IN rast "public"."raster", IN width text, IN height text, IN algorithm text, IN maxerr float8) IS 'args: rast, width, height, algorithm=NearestNeighbor, maxerr=0.125 - Resize a raster to a new width/height';

-- ----------------------------
--  Function structure for public.st_resize("public"."raster", int4, int4, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_resize"("public"."raster", int4, int4, text, float8);
CREATE FUNCTION "public"."st_resize"(IN rast "public"."raster", IN width int4, IN height int4, IN algorithm text DEFAULT 'NearestNeighbour'::text, IN maxerr float8 DEFAULT 0.125) RETURNS "public"."raster" 
	AS $BODY$ SELECT _st_gdalwarp($1, $4, $5, NULL, NULL, NULL, NULL, NULL, NULL, NULL, abs($2), abs($3)) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_resize"(IN rast "public"."raster", IN width int4, IN height int4, IN algorithm text, IN maxerr float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_resize"(IN rast "public"."raster", IN width int4, IN height int4, IN algorithm text, IN maxerr float8) IS 'args: rast, width, height, algorithm=NearestNeighbor, maxerr=0.125 - Resize a raster to a new width/height';

-- ----------------------------
--  Function structure for public.st_resize("public"."raster", float8, float8, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_resize"("public"."raster", float8, float8, text, float8);
CREATE FUNCTION "public"."st_resize"(IN rast "public"."raster", IN percentwidth float8, IN percentheight float8, IN algorithm text DEFAULT 'NearestNeighbour'::text, IN maxerr float8 DEFAULT 0.125) RETURNS "public"."raster" 
	AS $BODY$
	DECLARE
		_width integer;
		_height integer;
	BEGIN
		-- range check
		IF $2 <= 0. OR $2 > 1. OR $3 <= 0. OR $3 > 1. THEN
			RAISE EXCEPTION 'Percentages must be a value greater than zero and less than or equal to one, e.g. 0.5 for 50%%';
		END IF;

		SELECT width, height INTO _width, _height FROM ST_Metadata($1);

		_width := round(_width::double precision * $2)::integer;
		_height:= round(_height::double precision * $3)::integer;

		IF _width < 1 THEN
			_width := 1;
		END IF;
		IF _height < 1 THEN
			_height := 1;
		END IF;

		RETURN _st_gdalwarp(
			$1,
			$4, $5,
			NULL,
			NULL, NULL,
			NULL, NULL,
			NULL, NULL,
			_width, _height
		);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_resize"(IN rast "public"."raster", IN percentwidth float8, IN percentheight float8, IN algorithm text, IN maxerr float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_resize"(IN rast "public"."raster", IN percentwidth float8, IN percentheight float8, IN algorithm text, IN maxerr float8) IS 'args: rast, percentwidth, percentheight, algorithm=NearestNeighbor, maxerr=0.125 - Resize a raster to a new width/height';

-- ----------------------------
--  Function structure for public.st_mapalgebraexpr("public"."raster", int4, text, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mapalgebraexpr"("public"."raster", int4, text, text, float8);
CREATE FUNCTION "public"."st_mapalgebraexpr"(IN rast "public"."raster", IN band int4, IN pixeltype text, IN expression text, IN nodataval float8 DEFAULT NULL::double precision) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.1','RASTER_mapAlgebraExpr'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_mapalgebraexpr"(IN rast "public"."raster", IN band int4, IN pixeltype text, IN expression text, IN nodataval float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_mapalgebraexpr("public"."raster", text, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mapalgebraexpr"("public"."raster", text, text, float8);
CREATE FUNCTION "public"."st_mapalgebraexpr"(IN rast "public"."raster", IN pixeltype text, IN expression text, IN nodataval float8 DEFAULT NULL::double precision) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_mapalgebraexpr($1, 1, $2, $3, $4) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."st_mapalgebraexpr"(IN rast "public"."raster", IN pixeltype text, IN expression text, IN nodataval float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_mapalgebrafct("public"."raster", int4, text, regprocedure, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mapalgebrafct"("public"."raster", int4, text, regprocedure, _text);
CREATE FUNCTION "public"."st_mapalgebrafct"(IN rast "public"."raster", IN band int4, IN pixeltype text, IN onerastuserfunc regprocedure, INOUT args _text) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.1','RASTER_mapAlgebraFct'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_mapalgebrafct"(IN rast "public"."raster", IN band int4, IN pixeltype text, IN onerastuserfunc regprocedure, INOUT args _text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_mapalgebrafct("public"."raster", int4, text, regprocedure)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mapalgebrafct"("public"."raster", int4, text, regprocedure);
CREATE FUNCTION "public"."st_mapalgebrafct"(IN rast "public"."raster", IN band int4, IN pixeltype text, IN onerastuserfunc regprocedure) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_mapalgebrafct($1, $2, $3, $4, NULL) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."st_mapalgebrafct"(IN rast "public"."raster", IN band int4, IN pixeltype text, IN onerastuserfunc regprocedure) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_mapalgebrafct("public"."raster", int4, regprocedure, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mapalgebrafct"("public"."raster", int4, regprocedure, _text);
CREATE FUNCTION "public"."st_mapalgebrafct"(IN rast "public"."raster", IN band int4, IN onerastuserfunc regprocedure, INOUT args _text) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_mapalgebrafct($1, $2, NULL, $3, VARIADIC $4) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."st_mapalgebrafct"(IN rast "public"."raster", IN band int4, IN onerastuserfunc regprocedure, INOUT args _text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_mapalgebrafct("public"."raster", int4, regprocedure)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mapalgebrafct"("public"."raster", int4, regprocedure);
CREATE FUNCTION "public"."st_mapalgebrafct"(IN rast "public"."raster", IN band int4, IN onerastuserfunc regprocedure) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_mapalgebrafct($1, $2, NULL, $3, NULL) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."st_mapalgebrafct"(IN rast "public"."raster", IN band int4, IN onerastuserfunc regprocedure) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_mapalgebrafct("public"."raster", text, regprocedure, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mapalgebrafct"("public"."raster", text, regprocedure, _text);
CREATE FUNCTION "public"."st_mapalgebrafct"(IN rast "public"."raster", IN pixeltype text, IN onerastuserfunc regprocedure, INOUT args _text) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_mapalgebrafct($1, 1, $2, $3, VARIADIC $4) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."st_mapalgebrafct"(IN rast "public"."raster", IN pixeltype text, IN onerastuserfunc regprocedure, INOUT args _text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_mapalgebrafct("public"."raster", text, regprocedure)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mapalgebrafct"("public"."raster", text, regprocedure);
CREATE FUNCTION "public"."st_mapalgebrafct"(IN rast "public"."raster", IN pixeltype text, IN onerastuserfunc regprocedure) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_mapalgebrafct($1, 1, $2, $3, NULL) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."st_mapalgebrafct"(IN rast "public"."raster", IN pixeltype text, IN onerastuserfunc regprocedure) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_mapalgebrafct("public"."raster", regprocedure, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mapalgebrafct"("public"."raster", regprocedure, _text);
CREATE FUNCTION "public"."st_mapalgebrafct"(IN rast "public"."raster", IN onerastuserfunc regprocedure, INOUT args _text) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_mapalgebrafct($1, 1, NULL, $2, VARIADIC $3) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."st_mapalgebrafct"(IN rast "public"."raster", IN onerastuserfunc regprocedure, INOUT args _text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_mapalgebrafct("public"."raster", regprocedure)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mapalgebrafct"("public"."raster", regprocedure);
CREATE FUNCTION "public"."st_mapalgebrafct"(IN rast "public"."raster", IN onerastuserfunc regprocedure) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_mapalgebrafct($1, 1, NULL, $2, NULL) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."st_mapalgebrafct"(IN rast "public"."raster", IN onerastuserfunc regprocedure) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_mapalgebraexpr("public"."raster", int4, "public"."raster", int4, text, text, text, text, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mapalgebraexpr"("public"."raster", int4, "public"."raster", int4, text, text, text, text, text, float8);
CREATE FUNCTION "public"."st_mapalgebraexpr"(IN rast1 "public"."raster", IN band1 int4, IN rast2 "public"."raster", IN band2 int4, IN expression text, IN pixeltype text DEFAULT NULL::text, IN extenttype text DEFAULT 'INTERSECTION'::text, IN nodata1expr text DEFAULT NULL::text, IN nodata2expr text DEFAULT NULL::text, IN nodatanodataval float8 DEFAULT NULL::double precision) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.1','RASTER_mapAlgebra2'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_mapalgebraexpr"(IN rast1 "public"."raster", IN band1 int4, IN rast2 "public"."raster", IN band2 int4, IN expression text, IN pixeltype text, IN extenttype text, IN nodata1expr text, IN nodata2expr text, IN nodatanodataval float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_mapalgebraexpr("public"."raster", "public"."raster", text, text, text, text, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mapalgebraexpr"("public"."raster", "public"."raster", text, text, text, text, text, float8);
CREATE FUNCTION "public"."st_mapalgebraexpr"(IN rast1 "public"."raster", IN rast2 "public"."raster", IN expression text, IN pixeltype text DEFAULT NULL::text, IN extenttype text DEFAULT 'INTERSECTION'::text, IN nodata1expr text DEFAULT NULL::text, IN nodata2expr text DEFAULT NULL::text, IN nodatanodataval float8 DEFAULT NULL::double precision) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_mapalgebraexpr($1, 1, $2, 1, $3, $4, $5, $6, $7, $8) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_mapalgebraexpr"(IN rast1 "public"."raster", IN rast2 "public"."raster", IN expression text, IN pixeltype text, IN extenttype text, IN nodata1expr text, IN nodata2expr text, IN nodatanodataval float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_mapalgebrafct("public"."raster", int4, "public"."raster", int4, regprocedure, text, text, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mapalgebrafct"("public"."raster", int4, "public"."raster", int4, regprocedure, text, text, _text);
CREATE FUNCTION "public"."st_mapalgebrafct"(IN rast1 "public"."raster", IN band1 int4, IN rast2 "public"."raster", IN band2 int4, IN tworastuserfunc regprocedure DEFAULT NULL::text, IN pixeltype text DEFAULT 'INTERSECTION'::text, IN extenttype text DEFAULT NULL::text[], INOUT userargs _text DEFAULT (null)) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.1','RASTER_mapAlgebra2'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_mapalgebrafct"(IN rast1 "public"."raster", IN band1 int4, IN rast2 "public"."raster", IN band2 int4, IN tworastuserfunc regprocedure, IN pixeltype text, IN extenttype text, INOUT userargs _text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_mapalgebrafct("public"."raster", "public"."raster", regprocedure, text, text, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mapalgebrafct"("public"."raster", "public"."raster", regprocedure, text, text, _text);
CREATE FUNCTION "public"."st_mapalgebrafct"(IN rast1 "public"."raster", IN rast2 "public"."raster", IN tworastuserfunc regprocedure DEFAULT NULL::text, IN pixeltype text DEFAULT 'INTERSECTION'::text, IN extenttype text DEFAULT NULL::text[], INOUT userargs _text DEFAULT (null)) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_mapalgebrafct($1, 1, $2, 1, $3, $4, $5, VARIADIC $6) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_mapalgebrafct"(IN rast1 "public"."raster", IN rast2 "public"."raster", IN tworastuserfunc regprocedure, IN pixeltype text, IN extenttype text, INOUT userargs _text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_mapalgebra("public"."raster", text, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mapalgebra"("public"."raster", text, text, float8);
CREATE FUNCTION "public"."st_mapalgebra"(IN rast "public"."raster", IN pixeltype text, IN expression text, IN nodataval float8 DEFAULT NULL::double precision) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_mapalgebra($1, 1, $2, $3, $4) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_mapalgebra"(IN rast "public"."raster", IN pixeltype text, IN expression text, IN nodataval float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_mapalgebrafctngb("public"."raster", int4, text, int4, int4, regprocedure, text, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mapalgebrafctngb"("public"."raster", int4, text, int4, int4, regprocedure, text, _text);
CREATE FUNCTION "public"."st_mapalgebrafctngb"(IN rast "public"."raster", IN band int4, IN pixeltype text, IN ngbwidth int4, IN ngbheight int4, IN onerastngbuserfunc regprocedure, IN nodatamode text, INOUT args _text) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.1','RASTER_mapAlgebraFctNgb'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_mapalgebrafctngb"(IN rast "public"."raster", IN band int4, IN pixeltype text, IN ngbwidth int4, IN ngbheight int4, IN onerastngbuserfunc regprocedure, IN nodatamode text, INOUT args _text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_max4ma(_float8, text, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_max4ma"(_float8, text, _text);
CREATE FUNCTION "public"."st_max4ma"(IN matrix _float8, IN nodatamode text, INOUT args _text) RETURNS "float8" 
	AS $BODY$
    DECLARE
        _matrix float[][];
        max float;
    BEGIN
        _matrix := matrix;
        max := '-Infinity'::float;
        FOR x in array_lower(_matrix, 1)..array_upper(_matrix, 1) LOOP
            FOR y in array_lower(_matrix, 2)..array_upper(_matrix, 2) LOOP
                IF _matrix[x][y] IS NULL THEN
                    IF NOT nodatamode = 'ignore' THEN
                        _matrix[x][y] := nodatamode::float;
                    END IF;
                END IF;
                IF max < _matrix[x][y] THEN
                    max := _matrix[x][y];
                END IF;
            END LOOP;
        END LOOP;
        RETURN max;
    END;
    $BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_max4ma"(IN matrix _float8, IN nodatamode text, INOUT args _text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_min4ma(_float8, text, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_min4ma"(_float8, text, _text);
CREATE FUNCTION "public"."st_min4ma"(IN matrix _float8, IN nodatamode text, INOUT args _text) RETURNS "float8" 
	AS $BODY$
    DECLARE
        _matrix float[][];
        min float;
    BEGIN
        _matrix := matrix;
        min := 'Infinity'::float;
        FOR x in array_lower(_matrix, 1)..array_upper(_matrix, 1) LOOP
            FOR y in array_lower(_matrix, 2)..array_upper(_matrix, 2) LOOP
                IF _matrix[x][y] IS NULL THEN
                    IF NOT nodatamode = 'ignore' THEN
                        _matrix[x][y] := nodatamode::float;
                    END IF;
                END IF;
                IF min > _matrix[x][y] THEN
                    min := _matrix[x][y];
                END IF;
            END LOOP;
        END LOOP;
        RETURN min;
    END;
    $BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_min4ma"(IN matrix _float8, IN nodatamode text, INOUT args _text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_sum4ma(_float8, text, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_sum4ma"(_float8, text, _text);
CREATE FUNCTION "public"."st_sum4ma"(IN matrix _float8, IN nodatamode text, INOUT args _text) RETURNS "float8" 
	AS $BODY$
    DECLARE
        _matrix float[][];
        sum float;
    BEGIN
        _matrix := matrix;
        sum := 0;
        FOR x in array_lower(matrix, 1)..array_upper(matrix, 1) LOOP
            FOR y in array_lower(matrix, 2)..array_upper(matrix, 2) LOOP
                IF _matrix[x][y] IS NULL THEN
                    IF nodatamode = 'ignore' THEN
                        _matrix[x][y] := 0;
                    ELSE
                        _matrix[x][y] := nodatamode::float;
                    END IF;
                END IF;
                sum := sum + _matrix[x][y];
            END LOOP;
        END LOOP;
        RETURN sum;
    END;
    $BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_sum4ma"(IN matrix _float8, IN nodatamode text, INOUT args _text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_mean4ma(_float8, text, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mean4ma"(_float8, text, _text);
CREATE FUNCTION "public"."st_mean4ma"(IN matrix _float8, IN nodatamode text, INOUT args _text) RETURNS "float8" 
	AS $BODY$
    DECLARE
        _matrix float[][];
        sum float;
        count float;
    BEGIN
        _matrix := matrix;
        sum := 0;
        count := 0;
        FOR x in array_lower(matrix, 1)..array_upper(matrix, 1) LOOP
            FOR y in array_lower(matrix, 2)..array_upper(matrix, 2) LOOP
                IF _matrix[x][y] IS NULL THEN
                    IF nodatamode = 'ignore' THEN
                        _matrix[x][y] := 0;
                    ELSE
                        _matrix[x][y] := nodatamode::float;
                        count := count + 1;
                    END IF;
                ELSE
                    count := count + 1;
                END IF;
                sum := sum + _matrix[x][y];
            END LOOP;
        END LOOP;
        IF count = 0 THEN
            RETURN NULL;
        END IF;
        RETURN sum / count;
    END;
    $BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_mean4ma"(IN matrix _float8, IN nodatamode text, INOUT args _text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_range4ma(_float8, text, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_range4ma"(_float8, text, _text);
CREATE FUNCTION "public"."st_range4ma"(IN matrix _float8, IN nodatamode text, INOUT args _text) RETURNS "float8" 
	AS $BODY$
    DECLARE
        _matrix float[][];
        min float;
        max float;
    BEGIN
        _matrix := matrix;
        min := 'Infinity'::float;
        max := '-Infinity'::float;
        FOR x in array_lower(matrix, 1)..array_upper(matrix, 1) LOOP
            FOR y in array_lower(matrix, 2)..array_upper(matrix, 2) LOOP
                IF _matrix[x][y] IS NULL THEN
                    IF NOT nodatamode = 'ignore' THEN
                        _matrix[x][y] := nodatamode::float;
                    END IF;
                END IF;
                IF min > _matrix[x][y] THEN
                    min = _matrix[x][y];
                END IF;
                IF max < _matrix[x][y] THEN
                    max = _matrix[x][y];
                END IF;
            END LOOP;
        END LOOP;
        IF max = '-Infinity'::float OR min = 'Infinity'::float THEN
            RETURN NULL;
        END IF;
        RETURN max - min;
    END;
    $BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_range4ma"(IN matrix _float8, IN nodatamode text, INOUT args _text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_distinct4ma(_float8, text, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_distinct4ma"(_float8, text, _text);
CREATE FUNCTION "public"."st_distinct4ma"(IN matrix _float8, IN nodatamode text, INOUT args _text) RETURNS "float8" 
	AS $BODY$ SELECT COUNT(DISTINCT unnest)::float FROM unnest($1) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_distinct4ma"(IN matrix _float8, IN nodatamode text, INOUT args _text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_stddev4ma(_float8, text, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_stddev4ma"(_float8, text, _text);
CREATE FUNCTION "public"."st_stddev4ma"(IN matrix _float8, IN nodatamode text, INOUT args _text) RETURNS "float8" 
	AS $BODY$ SELECT stddev(unnest) FROM unnest($1) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_stddev4ma"(IN matrix _float8, IN nodatamode text, INOUT args _text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._st_mapalgebra("public"."_rastbandarg", regprocedure, text, int4, int4, text, "public"."raster", _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_mapalgebra"("public"."_rastbandarg", regprocedure, text, int4, int4, text, "public"."raster", _text);
CREATE FUNCTION "public"."_st_mapalgebra"(IN rastbandargset "public"."_rastbandarg", IN callbackfunc regprocedure DEFAULT NULL::text, IN pixeltype text DEFAULT 0, IN distancex int4 DEFAULT 0, IN distancey int4 DEFAULT 'INTERSECTION'::text, IN extenttype text DEFAULT NULL::raster, IN customextent "public"."raster" DEFAULT NULL::text[], INOUT userargs _text DEFAULT (null)) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.1','RASTER_nMapAlgebra'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_st_mapalgebra"(IN rastbandargset "public"."_rastbandarg", IN callbackfunc regprocedure, IN pixeltype text, IN distancex int4, IN distancey int4, IN extenttype text, IN customextent "public"."raster", INOUT userargs _text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.bytea("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."bytea"("public"."raster");
CREATE FUNCTION "public"."bytea"(IN "public"."raster") RETURNS "bytea" 
	AS '$libdir/rtpostgis-2.1','RASTER_to_bytea'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."bytea"(IN "public"."raster") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_mapalgebra("public"."_rastbandarg", regprocedure, text, text, "public"."raster", int4, int4, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mapalgebra"("public"."_rastbandarg", regprocedure, text, text, "public"."raster", int4, int4, _text);
CREATE FUNCTION "public"."st_mapalgebra"(IN rastbandargset "public"."_rastbandarg", IN callbackfunc regprocedure DEFAULT NULL::text, IN pixeltype text DEFAULT 'INTERSECTION'::text, IN extenttype text DEFAULT NULL::raster, IN customextent "public"."raster" DEFAULT 0, IN distancex int4 DEFAULT 0, IN distancey int4 DEFAULT NULL::text[], INOUT userargs _text DEFAULT (null)) RETURNS "public"."raster" 
	AS $BODY$ SELECT _ST_MapAlgebra($1, $2, $3, $6, $7, $4, $5, VARIADIC $8) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_mapalgebra"(IN rastbandargset "public"."_rastbandarg", IN callbackfunc regprocedure, IN pixeltype text, IN extenttype text, IN customextent "public"."raster", IN distancex int4, IN distancey int4, INOUT userargs _text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_mapalgebra("public"."raster", _int4, regprocedure, text, text, "public"."raster", int4, int4, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mapalgebra"("public"."raster", _int4, regprocedure, text, text, "public"."raster", int4, int4, _text);
CREATE FUNCTION "public"."st_mapalgebra"(IN rast "public"."raster", IN nband _int4, IN callbackfunc regprocedure DEFAULT NULL::text, IN pixeltype text DEFAULT 'FIRST'::text, IN extenttype text DEFAULT NULL::raster, IN customextent "public"."raster" DEFAULT 0, IN distancex int4 DEFAULT 0, IN distancey int4 DEFAULT NULL::text[], INOUT userargs _text DEFAULT (null)) RETURNS "public"."raster" 
	AS $BODY$
	DECLARE
		x int;
		argset rastbandarg[];
	BEGIN
		IF $2 IS NULL OR array_ndims($2) < 1 OR array_length($2, 1) < 1 THEN
			RAISE EXCEPTION 'Populated 1D array must be provided for nband';
			RETURN NULL;
		END IF;

		FOR x IN array_lower($2, 1)..array_upper($2, 1) LOOP
			IF $2[x] IS NULL THEN
				CONTINUE;
			END IF;

			argset := argset || ROW($1, $2[x])::rastbandarg;
		END LOOP;

		IF array_length(argset, 1) < 1 THEN
			RAISE EXCEPTION 'Populated 1D array must be provided for nband';
			RETURN NULL;
		END IF;

		RETURN _ST_MapAlgebra(argset, $3, $4, $7, $8, $5, $6, VARIADIC $9);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_mapalgebra"(IN rast "public"."raster", IN nband _int4, IN callbackfunc regprocedure, IN pixeltype text, IN extenttype text, IN customextent "public"."raster", IN distancex int4, IN distancey int4, INOUT userargs _text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_mapalgebra("public"."raster", int4, regprocedure, text, text, "public"."raster", int4, int4, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mapalgebra"("public"."raster", int4, regprocedure, text, text, "public"."raster", int4, int4, _text);
CREATE FUNCTION "public"."st_mapalgebra"(IN rast "public"."raster", IN nband int4, IN callbackfunc regprocedure DEFAULT NULL::text, IN pixeltype text DEFAULT 'FIRST'::text, IN extenttype text DEFAULT NULL::raster, IN customextent "public"."raster" DEFAULT 0, IN distancex int4 DEFAULT 0, IN distancey int4 DEFAULT NULL::text[], INOUT userargs _text DEFAULT (null)) RETURNS "public"."raster" 
	AS $BODY$ SELECT _ST_MapAlgebra(ARRAY[ROW($1, $2)]::rastbandarg[], $3, $4, $7, $8, $5, $6, VARIADIC $9) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_mapalgebra"(IN rast "public"."raster", IN nband int4, IN callbackfunc regprocedure, IN pixeltype text, IN extenttype text, IN customextent "public"."raster", IN distancex int4, IN distancey int4, INOUT userargs _text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_mapalgebra("public"."raster", int4, "public"."raster", int4, regprocedure, text, text, "public"."raster", int4, int4, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mapalgebra"("public"."raster", int4, "public"."raster", int4, regprocedure, text, text, "public"."raster", int4, int4, _text);
CREATE FUNCTION "public"."st_mapalgebra"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4, IN callbackfunc regprocedure DEFAULT NULL::text, IN pixeltype text DEFAULT 'INTERSECTION'::text, IN extenttype text DEFAULT NULL::raster, IN customextent "public"."raster" DEFAULT 0, IN distancex int4 DEFAULT 0, IN distancey int4 DEFAULT NULL::text[], INOUT userargs _text DEFAULT (null)) RETURNS "public"."raster" 
	AS $BODY$ SELECT _ST_MapAlgebra(ARRAY[ROW($1, $2), ROW($3, $4)]::rastbandarg[], $5, $6, $9, $10, $7, $8, VARIADIC $11) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_mapalgebra"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4, IN callbackfunc regprocedure, IN pixeltype text, IN extenttype text, IN customextent "public"."raster", IN distancex int4, IN distancey int4, INOUT userargs _text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._st_mapalgebra("public"."_rastbandarg", text, text, text, text, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_mapalgebra"("public"."_rastbandarg", text, text, text, text, text, float8);
CREATE FUNCTION "public"."_st_mapalgebra"(IN rastbandargset "public"."_rastbandarg", IN expression text, IN pixeltype text DEFAULT NULL::text, IN extenttype text DEFAULT 'INTERSECTION'::text, IN nodata1expr text DEFAULT NULL::text, IN nodata2expr text DEFAULT NULL::text, IN nodatanodataval float8 DEFAULT NULL::double precision) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.1','RASTER_nMapAlgebraExpr'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_st_mapalgebra"(IN rastbandargset "public"."_rastbandarg", IN expression text, IN pixeltype text, IN extenttype text, IN nodata1expr text, IN nodata2expr text, IN nodatanodataval float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_mapalgebra("public"."raster", int4, text, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mapalgebra"("public"."raster", int4, text, text, float8);
CREATE FUNCTION "public"."st_mapalgebra"(IN rast "public"."raster", IN nband int4, IN pixeltype text, IN expression text, IN nodataval float8 DEFAULT NULL::double precision) RETURNS "public"."raster" 
	AS $BODY$ SELECT _st_mapalgebra(ARRAY[ROW($1, $2)]::rastbandarg[], $4, $3, 'FIRST', $5::text) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_mapalgebra"(IN rast "public"."raster", IN nband int4, IN pixeltype text, IN expression text, IN nodataval float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.raster_hash("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."raster_hash"("public"."raster");
CREATE FUNCTION "public"."raster_hash"(IN "public"."raster") RETURNS "int4" 
	AS $BODY$hashvarlena$BODY$
	LANGUAGE internal
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."raster_hash"(IN "public"."raster") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_mapalgebra("public"."raster", int4, "public"."raster", int4, text, text, text, text, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mapalgebra"("public"."raster", int4, "public"."raster", int4, text, text, text, text, text, float8);
CREATE FUNCTION "public"."st_mapalgebra"(IN rast1 "public"."raster", IN band1 int4, IN rast2 "public"."raster", IN band2 int4, IN expression text, IN pixeltype text DEFAULT NULL::text, IN extenttype text DEFAULT 'INTERSECTION'::text, IN nodata1expr text DEFAULT NULL::text, IN nodata2expr text DEFAULT NULL::text, IN nodatanodataval float8 DEFAULT NULL::double precision) RETURNS "public"."raster" 
	AS $BODY$ SELECT _st_mapalgebra(ARRAY[ROW($1, $2), ROW($3, $4)]::rastbandarg[], $5, $6, $7, $8, $9, $10) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_mapalgebra"(IN rast1 "public"."raster", IN band1 int4, IN rast2 "public"."raster", IN band2 int4, IN expression text, IN pixeltype text, IN extenttype text, IN nodata1expr text, IN nodata2expr text, IN nodatanodataval float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_mapalgebra("public"."raster", "public"."raster", text, text, text, text, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mapalgebra"("public"."raster", "public"."raster", text, text, text, text, text, float8);
CREATE FUNCTION "public"."st_mapalgebra"(IN rast1 "public"."raster", IN rast2 "public"."raster", IN expression text, IN pixeltype text DEFAULT NULL::text, IN extenttype text DEFAULT 'INTERSECTION'::text, IN nodata1expr text DEFAULT NULL::text, IN nodata2expr text DEFAULT NULL::text, IN nodatanodataval float8 DEFAULT NULL::double precision) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_mapalgebra($1, 1, $2, 1, $3, $4, $5, $6, $7, $8) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_mapalgebra"(IN rast1 "public"."raster", IN rast2 "public"."raster", IN expression text, IN pixeltype text, IN extenttype text, IN nodata1expr text, IN nodata2expr text, IN nodatanodataval float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._st_convertarray4ma(_float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_convertarray4ma"(_float8);
CREATE FUNCTION "public"."_st_convertarray4ma"(IN "value" _float8) RETURNS "_float8" 
	AS $BODY$
	DECLARE
		_value double precision[][][];
		x int;
		y int;
	BEGIN
		IF array_ndims(value) != 2 THEN
			RAISE EXCEPTION 'Function parameter must be a 2-dimension array';
		END IF;

		_value := array_fill(NULL::double precision, ARRAY[1, array_length(value, 1), array_length(value, 2)]::int[], ARRAY[1, array_lower(value, 1), array_lower(value, 2)]::int[]);

		-- row
		FOR y IN array_lower(value, 1)..array_upper(value, 1) LOOP
			-- column
			FOR x IN array_lower(value, 2)..array_upper(value, 2) LOOP
				_value[1][y][x] = value[y][x];
			END LOOP;
		END LOOP;

		RETURN _value;
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_convertarray4ma"(IN "value" _float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_max4ma(_float8, _int4, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_max4ma"(_float8, _int4, _text);
CREATE FUNCTION "public"."st_max4ma"(IN "value" _float8, IN pos _int4 DEFAULT NULL::text[], INOUT userargs _text DEFAULT (null)) RETURNS "float8" 
	AS $BODY$
	DECLARE
		_value double precision[][][];
		max double precision;
		x int;
		y int;
		z int;
		ndims int;
	BEGIN
		max := '-Infinity'::double precision;

		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := _st_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;

		-- raster
		FOR z IN array_lower(_value, 1)..array_upper(_value, 1) LOOP
			-- row
			FOR y IN array_lower(_value, 2)..array_upper(_value, 2) LOOP
				-- column
				FOR x IN array_lower(_value, 3)..array_upper(_value, 3) LOOP
					IF _value[z][y][x] IS NULL THEN
						IF array_length(userargs, 1) > 0 THEN
							_value[z][y][x] = userargs[array_lower(userargs, 1)]::double precision;
						ELSE
							CONTINUE;
						END IF;
					END IF;

					IF _value[z][y][x] > max THEN
						max := _value[z][y][x];
					END IF;
				END LOOP;
			END LOOP;
		END LOOP;

		IF max = '-Infinity'::double precision THEN
			RETURN NULL;
		END IF;

		RETURN max;
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_max4ma"(IN "value" _float8, IN pos _int4, INOUT userargs _text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_min4ma(_float8, _int4, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_min4ma"(_float8, _int4, _text);
CREATE FUNCTION "public"."st_min4ma"(IN "value" _float8, IN pos _int4 DEFAULT NULL::text[], INOUT userargs _text DEFAULT (null)) RETURNS "float8" 
	AS $BODY$
	DECLARE
		_value double precision[][][];
		min double precision;
		x int;
		y int;
		z int;
		ndims int;
	BEGIN
		min := 'Infinity'::double precision;

		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := _st_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;

		-- raster
		FOR z IN array_lower(_value, 1)..array_upper(_value, 1) LOOP
			-- row
			FOR y IN array_lower(_value, 2)..array_upper(_value, 2) LOOP
				-- column
				FOR x IN array_lower(_value, 3)..array_upper(_value, 3) LOOP
					IF _value[z][y][x] IS NULL THEN
						IF array_length(userargs, 1) > 0 THEN
							_value[z][y][x] = userargs[array_lower(userargs, 1)]::double precision;
						ELSE
							CONTINUE;
						END IF;
					END IF;

					IF _value[z][y][x] < min THEN
						min := _value[z][y][x];
					END IF;
				END LOOP;
			END LOOP;
		END LOOP;

		IF min = 'Infinity'::double precision THEN
			RETURN NULL;
		END IF;

		RETURN min;
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_min4ma"(IN "value" _float8, IN pos _int4, INOUT userargs _text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_sum4ma(_float8, _int4, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_sum4ma"(_float8, _int4, _text);
CREATE FUNCTION "public"."st_sum4ma"(IN "value" _float8, IN pos _int4 DEFAULT NULL::text[], INOUT userargs _text DEFAULT (null)) RETURNS "float8" 
	AS $BODY$
	DECLARE
		_value double precision[][][];
		sum double precision;
		x int;
		y int;
		z int;
		ndims int;
	BEGIN
		sum := 0;

		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := _st_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;

		-- raster
		FOR z IN array_lower(_value, 1)..array_upper(_value, 1) LOOP
			-- row
			FOR y IN array_lower(_value, 2)..array_upper(_value, 2) LOOP
				-- column
				FOR x IN array_lower(_value, 3)..array_upper(_value, 3) LOOP
					IF _value[z][y][x] IS NULL THEN
						IF array_length(userargs, 1) > 0 THEN
							_value[z][y][x] = userargs[array_lower(userargs, 1)]::double precision;
						ELSE
							CONTINUE;
						END IF;
					END IF;

					sum := sum + _value[z][y][x];
				END LOOP;
			END LOOP;
		END LOOP;

		RETURN sum;
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_sum4ma"(IN "value" _float8, IN pos _int4, INOUT userargs _text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_bandpath("public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_bandpath"("public"."raster", int4);
CREATE FUNCTION "public"."st_bandpath"(IN rast "public"."raster", IN band int4 DEFAULT 1) RETURNS "text" 
	AS '$libdir/rtpostgis-2.1','RASTER_getBandPath'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_bandpath"(IN rast "public"."raster", IN band int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_bandpath"(IN rast "public"."raster", IN band int4) IS 'args: rast, bandnum=1 - Returns system file path to a band stored in file system. If no bandnum specified, 1 is assumed.';

-- ----------------------------
--  Function structure for public.st_mean4ma(_float8, _int4, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mean4ma"(_float8, _int4, _text);
CREATE FUNCTION "public"."st_mean4ma"(IN "value" _float8, IN pos _int4 DEFAULT NULL::text[], INOUT userargs _text DEFAULT (null)) RETURNS "float8" 
	AS $BODY$
	DECLARE
		_value double precision[][][];
		sum double precision;
		count int;
		x int;
		y int;
		z int;
		ndims int;
	BEGIN
		sum := 0;
		count := 0;

		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := _st_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;

		-- raster
		FOR z IN array_lower(_value, 1)..array_upper(_value, 1) LOOP
			-- row
			FOR y IN array_lower(_value, 2)..array_upper(_value, 2) LOOP
				-- column
				FOR x IN array_lower(_value, 3)..array_upper(_value, 3) LOOP
					IF _value[z][y][x] IS NULL THEN
						IF array_length(userargs, 1) > 0 THEN
							_value[z][y][x] = userargs[array_lower(userargs, 1)]::double precision;
						ELSE
							CONTINUE;
						END IF;
					END IF;

					sum := sum + _value[z][y][x];
					count := count + 1;
				END LOOP;
			END LOOP;
		END LOOP;

		IF count < 1 THEN
			RETURN NULL;
		END IF;

		RETURN sum / count::double precision;
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_mean4ma"(IN "value" _float8, IN pos _int4, INOUT userargs _text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_range4ma(_float8, _int4, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_range4ma"(_float8, _int4, _text);
CREATE FUNCTION "public"."st_range4ma"(IN "value" _float8, IN pos _int4 DEFAULT NULL::text[], INOUT userargs _text DEFAULT (null)) RETURNS "float8" 
	AS $BODY$
	DECLARE
		_value double precision[][][];
		min double precision;
		max double precision;
		x int;
		y int;
		z int;
		ndims int;
	BEGIN
		min := 'Infinity'::double precision;
		max := '-Infinity'::double precision;

		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := _st_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;

		-- raster
		FOR z IN array_lower(_value, 1)..array_upper(_value, 1) LOOP
			-- row
			FOR y IN array_lower(_value, 2)..array_upper(_value, 2) LOOP
				-- column
				FOR x IN array_lower(_value, 3)..array_upper(_value, 3) LOOP
					IF _value[z][y][x] IS NULL THEN
						IF array_length(userargs, 1) > 0 THEN
							_value[z][y][x] = userargs[array_lower(userargs, 1)]::double precision;
						ELSE
							CONTINUE;
						END IF;
					END IF;

					IF _value[z][y][x] < min THEN
						min := _value[z][y][x];
					END IF;
					IF _value[z][y][x] > max THEN
						max := _value[z][y][x];
					END IF;
				END LOOP;
			END LOOP;
		END LOOP;

		IF max = '-Infinity'::double precision OR min = 'Infinity'::double precision THEN
			RETURN NULL;
		END IF;

		RETURN max - min;
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_range4ma"(IN "value" _float8, IN pos _int4, INOUT userargs _text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_distinct4ma(_float8, _int4, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_distinct4ma"(_float8, _int4, _text);
CREATE FUNCTION "public"."st_distinct4ma"(IN "value" _float8, IN pos _int4 DEFAULT NULL::text[], INOUT userargs _text DEFAULT (null)) RETURNS "float8" 
	AS $BODY$ SELECT COUNT(DISTINCT unnest)::double precision FROM unnest($1) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_distinct4ma"(IN "value" _float8, IN pos _int4, INOUT userargs _text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_stddev4ma(_float8, _int4, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_stddev4ma"(_float8, _int4, _text);
CREATE FUNCTION "public"."st_stddev4ma"(IN "value" _float8, IN pos _int4 DEFAULT NULL::text[], INOUT userargs _text DEFAULT (null)) RETURNS "float8" 
	AS $BODY$ SELECT stddev(unnest) FROM unnest($1) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_stddev4ma"(IN "value" _float8, IN pos _int4, INOUT userargs _text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_invdistweight4ma(_float8, _int4, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_invdistweight4ma"(_float8, _int4, _text);
CREATE FUNCTION "public"."st_invdistweight4ma"(IN "value" _float8, IN pos _int4 DEFAULT NULL::text[], INOUT userargs _text DEFAULT (null)) RETURNS "float8" 
	AS $BODY$
	DECLARE
		_value double precision[][][];
		ndims int;

		k double precision DEFAULT 1.;
		_k double precision DEFAULT 1.;
		z double precision[];
		d double precision[];
		_d double precision;
		z0 double precision;

		_z integer;
		x integer;
		y integer;

		cx integer;
		cy integer;
		cv double precision;
		cw double precision DEFAULT NULL;

		w integer;
		h integer;
		max_dx double precision;
		max_dy double precision;
	BEGIN
--		RAISE NOTICE 'value = %', value;
--		RAISE NOTICE 'userargs = %', userargs;

		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := _st_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;

		-- only use the first raster passed to this function
		IF array_length(_value, 1) > 1 THEN
			RAISE NOTICE 'Only using the values from the first raster';
		END IF;
		_z := array_lower(_value, 1);

		-- width and height (0-based)
		h := array_upper(_value, 2) - array_lower(_value, 2);
		w := array_upper(_value, 3) - array_lower(_value, 3);

		-- max distance from center pixel
		max_dx := w / 2;
		max_dy := h / 2;
--		RAISE NOTICE 'max_dx, max_dy = %, %', max_dx, max_dy;

		-- correct width and height (1-based)
		w := w + 1;
		h := h + 1;
--		RAISE NOTICE 'w, h = %, %', w, h;

		-- width and height should be odd numbers
		IF w % 2. != 1 THEN
			RAISE EXCEPTION 'Width of neighborhood array does not permit for a center pixel';
		END IF;
		IF h % 2. != 1 THEN
			RAISE EXCEPTION 'Height of neighborhood array does not permit for a center pixel';
		END IF;

		-- center pixel's coordinates
		cy := max_dy + array_lower(_value, 2);
		cx := max_dx + array_lower(_value, 3);
--		RAISE NOTICE 'cx, cy = %, %', cx, cy;

		-- if userargs provided, only use the first two args
		IF userargs IS NOT NULL AND array_ndims(userargs) = 1 THEN
			-- first arg is power factor
			k := userargs[array_lower(userargs, 1)]::double precision;
			IF k IS NULL THEN
				k := _k;
			ELSEIF k < 0. THEN
				RAISE NOTICE 'Power factor (< 0) must be between 0 and 1.  Defaulting to 0';
				k := 0.;
			ELSEIF k > 1. THEN
				RAISE NOTICE 'Power factor (> 1) must be between 0 and 1.  Defaulting to 1';
				k := 1.;
			END IF;

			-- second arg is what to do if center pixel has a value
			-- this will be a weight to apply for the center pixel
			IF array_length(userargs, 1) > 1 THEN
				cw := abs(userargs[array_lower(userargs, 1) + 1]::double precision);
				IF cw IS NOT NULL THEN
					IF cw < 0. THEN
						RAISE NOTICE 'Weight (< 0) of center pixel value must be between 0 and 1.  Defaulting to 0';
						cw := 0.;
					ELSEIF cw > 1 THEN
						RAISE NOTICE 'Weight (> 1) of center pixel value must be between 0 and 1.  Defaulting to 1';
						cw := 1.;
					END IF;
				END IF;
			END IF;
		END IF;
--		RAISE NOTICE 'k = %', k;
		k = abs(k) * -1;

		-- center pixel value
		cv := _value[_z][cy][cx];

		-- check to see if center pixel has value
--		RAISE NOTICE 'cw = %', cw;
		IF cw IS NULL AND cv IS NOT NULL THEN
			RETURN cv;
		END IF;

		FOR y IN array_lower(_value, 2)..array_upper(_value, 2) LOOP
			FOR x IN array_lower(_value, 3)..array_upper(_value, 3) LOOP
--				RAISE NOTICE 'value[%][%][%] = %', _z, y, x, _value[_z][y][x];

				-- skip NODATA values and center pixel
				IF _value[_z][y][x] IS NULL OR (x = cx AND y = cy) THEN
					CONTINUE;
				END IF;

				z := z || _value[_z][y][x];

				-- use pythagorean theorem
				_d := sqrt(power(cx - x, 2) + power(cy - y, 2));
--				RAISE NOTICE 'distance = %', _d;

				d := d || _d;
			END LOOP;
		END LOOP;
--		RAISE NOTICE 'z = %', z;
--		RAISE NOTICE 'd = %', d;

		-- neighborhood is NODATA
		IF z IS NULL OR array_length(z, 1) < 1 THEN
			-- center pixel has value
			IF cv IS NOT NULL THEN
				RETURN cv;
			ELSE
				RETURN NULL;
			END IF;
		END IF;

		z0 := 0;
		_d := 0;
		FOR x IN array_lower(z, 1)..array_upper(z, 1) LOOP
			d[x] := power(d[x], k);
			z[x] := z[x] * d[x];
			_d := _d + d[x];
			z0 := z0 + z[x];
		END LOOP;
		z0 := z0 / _d;
--		RAISE NOTICE 'z0 = %', z0;

		-- apply weight for center pixel if center pixel has value
		IF cv IS NOT NULL THEN
			z0 := (cw * cv) + ((1 - cw) * z0);
--			RAISE NOTICE '*z0 = %', z0;
		END IF;

		RETURN z0;
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_invdistweight4ma"(IN "value" _float8, IN pos _int4, INOUT userargs _text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_mindist4ma(_float8, _int4, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mindist4ma"(_float8, _int4, _text);
CREATE FUNCTION "public"."st_mindist4ma"(IN "value" _float8, IN pos _int4 DEFAULT NULL::text[], INOUT userargs _text DEFAULT (null)) RETURNS "float8" 
	AS $BODY$
	DECLARE
		_value double precision[][][];
		ndims int;

		d double precision DEFAULT NULL;
		_d double precision;

		z integer;
		x integer;
		y integer;

		cx integer;
		cy integer;
		cv double precision;

		w integer;
		h integer;
		max_dx double precision;
		max_dy double precision;
	BEGIN

		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := _st_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;

		-- only use the first raster passed to this function
		IF array_length(_value, 1) > 1 THEN
			RAISE NOTICE 'Only using the values from the first raster';
		END IF;
		z := array_lower(_value, 1);

		-- width and height (0-based)
		h := array_upper(_value, 2) - array_lower(_value, 2);
		w := array_upper(_value, 3) - array_lower(_value, 3);

		-- max distance from center pixel
		max_dx := w / 2;
		max_dy := h / 2;

		-- correct width and height (1-based)
		w := w + 1;
		h := h + 1;

		-- width and height should be odd numbers
		IF w % 2. != 1 THEN
			RAISE EXCEPTION 'Width of neighborhood array does not permit for a center pixel';
		END IF;
		IF h % 2. != 1 THEN
			RAISE EXCEPTION 'Height of neighborhood array does not permit for a center pixel';
		END IF;

		-- center pixel's coordinates
		cy := max_dy + array_lower(_value, 2);
		cx := max_dx + array_lower(_value, 3);

		-- center pixel value
		cv := _value[z][cy][cx];

		-- check to see if center pixel has value
		IF cv IS NOT NULL THEN
			RETURN 0.;
		END IF;

		FOR y IN array_lower(_value, 2)..array_upper(_value, 2) LOOP
			FOR x IN array_lower(_value, 3)..array_upper(_value, 3) LOOP

				-- skip NODATA values and center pixel
				IF _value[z][y][x] IS NULL OR (x = cx AND y = cy) THEN
					CONTINUE;
				END IF;

				-- use pythagorean theorem
				_d := sqrt(power(cx - x, 2) + power(cy - y, 2));
--				RAISE NOTICE 'distance = %', _d;

				IF d IS NULL OR _d < d THEN
					d := _d;
				END IF;
			END LOOP;
		END LOOP;
--		RAISE NOTICE 'd = %', d;

		RETURN d;
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_mindist4ma"(IN "value" _float8, IN pos _int4, INOUT userargs _text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._st_slope4ma(_float8, _int4, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_slope4ma"(_float8, _int4, _text);
CREATE FUNCTION "public"."_st_slope4ma"(IN "value" _float8, IN pos _int4 DEFAULT NULL::text[], INOUT userargs _text DEFAULT (null)) RETURNS "float8" 
	AS $BODY$
	DECLARE
		x integer;
		y integer;
		z integer;

		_pixwidth double precision;
		_pixheight double precision;
		_width double precision;
		_height double precision;
		_units text;
		_scale double precision;

		dz_dx double precision;
		dz_dy double precision;

		slope double precision;

		_value double precision[][][];
		ndims int;
	BEGIN

		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := _st_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;

		-- only use the first raster passed to this function
		IF array_length(_value, 1) > 1 THEN
			RAISE NOTICE 'Only using the values from the first raster';
		END IF;
		z := array_lower(_value, 1);

		IF (
			array_lower(_value, 2) != 1 OR array_upper(_value, 2) != 3 OR
			array_lower(_value, 3) != 1 OR array_upper(_value, 3) != 3
		) THEN
			RAISE EXCEPTION 'First parameter of function must be a 1x3x3 array with each of the lower bounds starting from 1';
		END IF;

		IF array_length(userargs, 1) < 6 THEN
			RAISE EXCEPTION 'At least six elements must be provided for the third parameter';
		END IF;

		_pixwidth := userargs[1]::double precision;
		_pixheight := userargs[2]::double precision;
		_width := userargs[3]::double precision;
		_height := userargs[4]::double precision;
		_units := userargs[5];
		_scale := userargs[6]::double precision;

		
		-- check that center pixel isn't NODATA
		IF _value[z][2][2] IS NULL THEN
			RETURN NULL;
		-- substitute center pixel for any neighbor pixels that are NODATA
		ELSE
			FOR y IN 1..3 LOOP
				FOR x IN 1..3 LOOP
					IF _value[z][y][x] IS NULL THEN
						_value[z][y][x] = _value[z][2][2];
					END IF;
				END LOOP;
			END LOOP;
		END IF;

		dz_dy := ((_value[z][3][1] + _value[z][3][2] + _value[z][3][2] + _value[z][3][3]) -
			(_value[z][1][1] + _value[z][1][2] + _value[z][1][2] + _value[z][1][3])) / _pixheight;
		dz_dx := ((_value[z][1][3] + _value[z][2][3] + _value[z][2][3] + _value[z][3][3]) -
			(_value[z][1][1] + _value[z][2][1] + _value[z][2][1] + _value[z][3][1])) / _pixwidth;

		slope := sqrt(dz_dx * dz_dx + dz_dy * dz_dy) / (8 * _scale);

		-- output depends on user preference
		CASE substring(upper(trim(leading from _units)) for 3)
			-- percentages
			WHEN 'PER' THEN
				slope := 100.0 * slope;
			-- radians
			WHEN 'rad' THEN
				slope := atan(slope);
			-- degrees (default)
			ELSE
				slope := degrees(atan(slope));
		END CASE;

		RETURN slope;
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_slope4ma"(IN "value" _float8, IN pos _int4, INOUT userargs _text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_setscale("public"."raster", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_setscale"("public"."raster", float8, float8);
CREATE FUNCTION "public"."st_setscale"(IN rast "public"."raster", IN scalex float8, IN scaley float8) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.1','RASTER_setScaleXY'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_setscale"(IN rast "public"."raster", IN scalex float8, IN scaley float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_setscale"(IN rast "public"."raster", IN scalex float8, IN scaley float8) IS 'args: rast, x, y - Sets the X and Y size of pixels in units of coordinate reference system. Number units/pixel width/height.';

-- ----------------------------
--  Function structure for public.st_slope("public"."raster", int4, "public"."raster", text, text, float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_slope"("public"."raster", int4, "public"."raster", text, text, float8, bool);
CREATE FUNCTION "public"."st_slope"(IN rast "public"."raster", IN nband int4, IN customextent "public"."raster", IN pixeltype text DEFAULT '32BF'::text, IN units text DEFAULT 'DEGREES'::text, IN "scale" float8 DEFAULT 1.0, IN interpolate_nodata bool DEFAULT false) RETURNS "public"."raster" 
	AS $BODY$
	DECLARE
		_rast raster;
		_nband integer;
		_pixtype text;
		_pixwidth double precision;
		_pixheight double precision;
		_width integer;
		_height integer;
		_customextent raster;
		_extenttype text;
	BEGIN
		_customextent := customextent;
		IF _customextent IS NULL THEN
			_extenttype := 'FIRST';
		ELSE
			_extenttype := 'CUSTOM';
		END IF;

		IF interpolate_nodata IS TRUE THEN
			_rast := ST_MapAlgebra(
				ARRAY[ROW(rast, nband)]::rastbandarg[],
				'st_invdistweight4ma(double precision[][][], integer[][], text[])'::regprocedure,
				pixeltype,
				'FIRST', NULL,
				1, 1
			);
			_nband := 1;
			_pixtype := NULL;
		ELSE
			_rast := rast;
			_nband := nband;
			_pixtype := pixeltype;
		END IF;

		-- get properties
		_pixwidth := ST_PixelWidth(_rast);
		_pixheight := ST_PixelHeight(_rast);
		SELECT width, height INTO _width, _height FROM ST_Metadata(_rast);

		RETURN ST_MapAlgebra(
			ARRAY[ROW(_rast, _nband)]::rastbandarg[],
			'_st_slope4ma(double precision[][][], integer[][], text[])'::regprocedure,
			_pixtype,
			_extenttype, _customextent,
			1, 1,
			_pixwidth::text, _pixheight::text,
			_width::text, _height::text,
			units::text, scale::text
		);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_slope"(IN rast "public"."raster", IN nband int4, IN customextent "public"."raster", IN pixeltype text, IN units text, IN "scale" float8, IN interpolate_nodata bool) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_slope("public"."raster", int4, text, text, float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_slope"("public"."raster", int4, text, text, float8, bool);
CREATE FUNCTION "public"."st_slope"(IN rast "public"."raster", IN nband int4 DEFAULT 1, IN pixeltype text DEFAULT '32BF'::text, IN units text DEFAULT 'DEGREES'::text, IN "scale" float8 DEFAULT 1.0, IN interpolate_nodata bool DEFAULT false) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_slope($1, $2, NULL::raster, $3, $4, $5, $6) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_slope"(IN rast "public"."raster", IN nband int4, IN pixeltype text, IN units text, IN "scale" float8, IN interpolate_nodata bool) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._st_aspect4ma(_float8, _int4, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_aspect4ma"(_float8, _int4, _text);
CREATE FUNCTION "public"."_st_aspect4ma"(IN "value" _float8, IN pos _int4 DEFAULT NULL::text[], INOUT userargs _text DEFAULT (null)) RETURNS "float8" 
	AS $BODY$
	DECLARE
		x integer;
		y integer;
		z integer;

		_width double precision;
		_height double precision;
		_units text;

		dz_dx double precision;
		dz_dy double precision;
		aspect double precision;
		halfpi double precision;

		_value double precision[][][];
		ndims int;
	BEGIN
		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := _st_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;

		IF (
			array_lower(_value, 2) != 1 OR array_upper(_value, 2) != 3 OR
			array_lower(_value, 3) != 1 OR array_upper(_value, 3) != 3
		) THEN
			RAISE EXCEPTION 'First parameter of function must be a 1x3x3 array with each of the lower bounds starting from 1';
		END IF;

		IF array_length(userargs, 1) < 3 THEN
			RAISE EXCEPTION 'At least three elements must be provided for the third parameter';
		END IF;

		-- only use the first raster passed to this function
		IF array_length(_value, 1) > 1 THEN
			RAISE NOTICE 'Only using the values from the first raster';
		END IF;
		z := array_lower(_value, 1);

		_width := userargs[1]::double precision;
		_height := userargs[2]::double precision;
		_units := userargs[3];

		

		-- check that center pixel isn't NODATA
		IF _value[z][2][2] IS NULL THEN
			RETURN NULL;
		-- substitute center pixel for any neighbor pixels that are NODATA
		ELSE
			FOR y IN 1..3 LOOP
				FOR x IN 1..3 LOOP
					IF _value[z][y][x] IS NULL THEN
						_value[z][y][x] = _value[z][2][2];
					END IF;
				END LOOP;
			END LOOP;
		END IF;

		dz_dy := ((_value[z][3][1] + _value[z][3][2] + _value[z][3][2] + _value[z][3][3]) -
			(_value[z][1][1] + _value[z][1][2] + _value[z][1][2] + _value[z][1][3]));
		dz_dx := ((_value[z][1][3] + _value[z][2][3] + _value[z][2][3] + _value[z][3][3]) -
			(_value[z][1][1] + _value[z][2][1] + _value[z][2][1] + _value[z][3][1]));

		-- aspect is flat
		IF abs(dz_dx) = 0::double precision AND abs(dz_dy) = 0::double precision THEN
			RETURN -1;
		END IF;

		-- aspect is in radians
		aspect := atan2(dz_dy, -dz_dx);

		-- north = 0, pi/2 = east, 3pi/2 = west
		halfpi := pi() / 2.0;
		IF aspect > halfpi THEN
			aspect := (5.0 * halfpi) - aspect;
		ELSE
			aspect := halfpi - aspect;
		END IF;

		IF aspect = 2 * pi() THEN
			aspect := 0.;
		END IF;

		-- output depends on user preference
		CASE substring(upper(trim(leading from _units)) for 3)
			-- radians
			WHEN 'rad' THEN
				RETURN aspect;
			-- degrees (default)
			ELSE
				RETURN degrees(aspect);
		END CASE;

	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_aspect4ma"(IN "value" _float8, IN pos _int4, INOUT userargs _text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_aspect("public"."raster", int4, "public"."raster", text, text, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_aspect"("public"."raster", int4, "public"."raster", text, text, bool);
CREATE FUNCTION "public"."st_aspect"(IN rast "public"."raster", IN nband int4, IN customextent "public"."raster", IN pixeltype text DEFAULT '32BF'::text, IN units text DEFAULT 'DEGREES'::text, IN interpolate_nodata bool DEFAULT false) RETURNS "public"."raster" 
	AS $BODY$
	DECLARE
		_rast raster;
		_nband integer;
		_pixtype text;
		_width integer;
		_height integer;
		_customextent raster;
		_extenttype text;
	BEGIN
		_customextent := customextent;
		IF _customextent IS NULL THEN
			_extenttype := 'FIRST';
		ELSE
			_extenttype := 'CUSTOM';
		END IF;

		IF interpolate_nodata IS TRUE THEN
			_rast := ST_MapAlgebra(
				ARRAY[ROW(rast, nband)]::rastbandarg[],
				'st_invdistweight4ma(double precision[][][], integer[][], text[])'::regprocedure,
				pixeltype,
				'FIRST', NULL,
				1, 1
			);
			_nband := 1;
			_pixtype := NULL;
		ELSE
			_rast := rast;
			_nband := nband;
			_pixtype := pixeltype;
		END IF;

		-- get properties
		SELECT width, height INTO _width, _height FROM ST_Metadata(_rast);

		RETURN ST_MapAlgebra(
			ARRAY[ROW(_rast, _nband)]::rastbandarg[],
			'_st_aspect4ma(double precision[][][], integer[][], text[])'::regprocedure,
			_pixtype,
			_extenttype, _customextent,
			1, 1,
			_width::text, _height::text,
			units::text
		);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_aspect"(IN rast "public"."raster", IN nband int4, IN customextent "public"."raster", IN pixeltype text, IN units text, IN interpolate_nodata bool) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_aspect("public"."raster", int4, text, text, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_aspect"("public"."raster", int4, text, text, bool);
CREATE FUNCTION "public"."st_aspect"(IN rast "public"."raster", IN nband int4 DEFAULT 1, IN pixeltype text DEFAULT '32BF'::text, IN units text DEFAULT 'DEGREES'::text, IN interpolate_nodata bool DEFAULT false) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_aspect($1, $2, NULL::raster, $3, $4, $5) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_aspect"(IN rast "public"."raster", IN nband int4, IN pixeltype text, IN units text, IN interpolate_nodata bool) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_bandisnodata("public"."raster", int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_bandisnodata"("public"."raster", int4, bool);
CREATE FUNCTION "public"."st_bandisnodata"(IN rast "public"."raster", IN band int4 DEFAULT 1, IN forcechecking bool DEFAULT false) RETURNS "bool" 
	AS '$libdir/rtpostgis-2.1','RASTER_bandIsNoData'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_bandisnodata"(IN rast "public"."raster", IN band int4, IN forcechecking bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_bandisnodata"(IN rast "public"."raster", IN band int4, IN forcechecking bool) IS 'args: rast, band, forceChecking=true - Returns true if the band is filled with only nodata values.';

-- ----------------------------
--  Function structure for public._st_hillshade4ma(_float8, _int4, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_hillshade4ma"(_float8, _int4, _text);
CREATE FUNCTION "public"."_st_hillshade4ma"(IN "value" _float8, IN pos _int4 DEFAULT NULL::text[], INOUT userargs _text DEFAULT (null)) RETURNS "float8" 
	AS $BODY$
	DECLARE
		_pixwidth double precision;
		_pixheight double precision;
		_width double precision;
		_height double precision;
		_azimuth double precision;
		_altitude double precision;
		_bright double precision;
		_scale double precision;

		dz_dx double precision;
		dz_dy double precision;
		azimuth double precision;
		zenith double precision;
		slope double precision;
		aspect double precision;
		shade double precision;

		_value double precision[][][];
		ndims int;
		z int;
	BEGIN
		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := _st_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;

		IF (
			array_lower(_value, 2) != 1 OR array_upper(_value, 2) != 3 OR
			array_lower(_value, 3) != 1 OR array_upper(_value, 3) != 3
		) THEN
			RAISE EXCEPTION 'First parameter of function must be a 1x3x3 array with each of the lower bounds starting from 1';
		END IF;

		IF array_length(userargs, 1) < 8 THEN
			RAISE EXCEPTION 'At least eight elements must be provided for the third parameter';
		END IF;

		-- only use the first raster passed to this function
		IF array_length(_value, 1) > 1 THEN
			RAISE NOTICE 'Only using the values from the first raster';
		END IF;
		z := array_lower(_value, 1);

		_pixwidth := userargs[1]::double precision;
		_pixheight := userargs[2]::double precision;
		_width := userargs[3]::double precision;
		_height := userargs[4]::double precision;
		_azimuth := userargs[5]::double precision;
		_altitude := userargs[6]::double precision;
		_bright := userargs[7]::double precision;
		_scale := userargs[8]::double precision;

		-- check that pixel is not edge pixel
		IF (pos[1][1] = 1 OR pos[1][2] = 1) OR (pos[1][1] = _width OR pos[1][2] = _height) THEN
			RETURN NULL;
		END IF;

		-- clamp azimuth
		IF _azimuth < 0. THEN
			RAISE NOTICE 'Clamping provided azimuth value % to 0', _azimuth;
			_azimuth := 0.;
		ELSEIF _azimuth >= 360. THEN
			RAISE NOTICE 'Converting provided azimuth value % to be between 0 and 360', _azimuth;
			_azimuth := _azimuth - (360. * floor(_azimuth / 360.));
		END IF;
		azimuth := 360. - _azimuth + 90.;
		IF azimuth >= 360. THEN
			azimuth := azimuth - 360.;
		END IF;
		azimuth := radians(azimuth);
		--RAISE NOTICE 'azimuth = %', azimuth;

		-- clamp altitude
		IF _altitude < 0. THEN
			RAISE NOTICE 'Clamping provided altitude value % to 0', _altitude;
			_altitude := 0.;
		ELSEIF _altitude > 90. THEN
			RAISE NOTICE 'Clamping provided altitude value % to 90', _altitude;
			_altitude := 90.;
		END IF;
		zenith := radians(90. - _altitude);
		--RAISE NOTICE 'zenith = %', zenith;

		-- clamp bright
		IF _bright < 0. THEN
			RAISE NOTICE 'Clamping provided bright value % to 0', _bright;
			_bright := 0.;
		ELSEIF _bright > 255. THEN
			RAISE NOTICE 'Clamping provided bright value % to 255', _bright;
			_bright := 255.;
		END IF;

		dz_dy := ((_value[z][3][1] + _value[z][3][2] + _value[z][3][2] + _value[z][3][3]) -
			(_value[z][1][1] + _value[z][1][2] + _value[z][1][2] + _value[z][1][3])) / (8 * _pixheight);
		dz_dx := ((_value[z][1][3] + _value[z][2][3] + _value[z][2][3] + _value[z][3][3]) -
			(_value[z][1][1] + _value[z][2][1] + _value[z][2][1] + _value[z][3][1])) / (8 * _pixwidth);

		slope := atan(sqrt(dz_dx * dz_dx + dz_dy * dz_dy) / _scale);

		IF dz_dx != 0. THEN
			aspect := atan2(dz_dy, -dz_dx);

			IF aspect < 0. THEN
				aspect := aspect + (2.0 * pi());
			END IF;
		ELSE
			IF dz_dy > 0. THEN
				aspect := pi() / 2.;
			ELSEIF dz_dy < 0. THEN
				aspect := (2. * pi()) - (pi() / 2.);
			-- set to pi as that is the expected PostgreSQL answer in Linux
			ELSE
				aspect := pi();
			END IF;
		END IF;

		shade := _bright * ((cos(zenith) * cos(slope)) + (sin(zenith) * sin(slope) * cos(azimuth - aspect)));

		IF shade < 0. THEN
			shade := 0;
		END IF;

		RETURN shade;
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_hillshade4ma"(IN "value" _float8, IN pos _int4, INOUT userargs _text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_hillshade("public"."raster", int4, "public"."raster", text, float8, float8, float8, float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_hillshade"("public"."raster", int4, "public"."raster", text, float8, float8, float8, float8, bool);
CREATE FUNCTION "public"."st_hillshade"(IN rast "public"."raster", IN nband int4, IN customextent "public"."raster", IN pixeltype text DEFAULT '32BF'::text, IN azimuth float8 DEFAULT 315.0, IN altitude float8 DEFAULT 45.0, IN max_bright float8 DEFAULT 255.0, IN "scale" float8 DEFAULT 1.0, IN interpolate_nodata bool DEFAULT false) RETURNS "public"."raster" 
	AS $BODY$
	DECLARE
		_rast raster;
		_nband integer;
		_pixtype text;
		_pixwidth double precision;
		_pixheight double precision;
		_width integer;
		_height integer;
		_customextent raster;
		_extenttype text;
	BEGIN
		_customextent := customextent;
		IF _customextent IS NULL THEN
			_extenttype := 'FIRST';
		ELSE
			_extenttype := 'CUSTOM';
		END IF;

		IF interpolate_nodata IS TRUE THEN
			_rast := ST_MapAlgebra(
				ARRAY[ROW(rast, nband)]::rastbandarg[],
				'st_invdistweight4ma(double precision[][][], integer[][], text[])'::regprocedure,
				pixeltype,
				'FIRST', NULL,
				1, 1
			);
			_nband := 1;
			_pixtype := NULL;
		ELSE
			_rast := rast;
			_nband := nband;
			_pixtype := pixeltype;
		END IF;

		-- get properties
		_pixwidth := ST_PixelWidth(_rast);
		_pixheight := ST_PixelHeight(_rast);
		SELECT width, height, scalex INTO _width, _height FROM ST_Metadata(_rast);

		RETURN ST_MapAlgebra(
			ARRAY[ROW(_rast, _nband)]::rastbandarg[],
			'_st_hillshade4ma(double precision[][][], integer[][], text[])'::regprocedure,
			_pixtype,
			_extenttype, _customextent,
			1, 1,
			_pixwidth::text, _pixheight::text,
			_width::text, _height::text,
			$5::text, $6::text,
			$7::text, $8::text
		);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_hillshade"(IN rast "public"."raster", IN nband int4, IN customextent "public"."raster", IN pixeltype text, IN azimuth float8, IN altitude float8, IN max_bright float8, IN "scale" float8, IN interpolate_nodata bool) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_hillshade("public"."raster", int4, text, float8, float8, float8, float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_hillshade"("public"."raster", int4, text, float8, float8, float8, float8, bool);
CREATE FUNCTION "public"."st_hillshade"(IN rast "public"."raster", IN nband int4 DEFAULT 1, IN pixeltype text DEFAULT '32BF'::text, IN azimuth float8 DEFAULT 315.0, IN altitude float8 DEFAULT 45.0, IN max_bright float8 DEFAULT 255.0, IN "scale" float8 DEFAULT 1.0, IN interpolate_nodata bool DEFAULT false) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_hillshade($1, $2, NULL::raster, $3, $4, $5, $6, $7, $8) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_hillshade"(IN rast "public"."raster", IN nband int4, IN pixeltype text, IN azimuth float8, IN altitude float8, IN max_bright float8, IN "scale" float8, IN interpolate_nodata bool) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._st_tpi4ma(_float8, _int4, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_tpi4ma"(_float8, _int4, _text);
CREATE FUNCTION "public"."_st_tpi4ma"(IN "value" _float8, IN pos _int4 DEFAULT NULL::text[], INOUT userargs _text DEFAULT (null)) RETURNS "float8" 
	AS $BODY$
	DECLARE
		x integer;
		y integer;
		z integer;

		Z1 double precision;
		Z2 double precision;
		Z3 double precision;
		Z4 double precision;
		Z5 double precision;
		Z6 double precision;
		Z7 double precision;
		Z8 double precision;
		Z9 double precision;

		tpi double precision;
		mean double precision;
		_value double precision[][][];
		ndims int;
	BEGIN
		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := _st_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;

		-- only use the first raster passed to this function
		IF array_length(_value, 1) > 1 THEN
			RAISE NOTICE 'Only using the values from the first raster';
		END IF;
		z := array_lower(_value, 1);

		IF (
			array_lower(_value, 2) != 1 OR array_upper(_value, 2) != 3 OR
			array_lower(_value, 3) != 1 OR array_upper(_value, 3) != 3
		) THEN
			RAISE EXCEPTION 'First parameter of function must be a 1x3x3 array with each of the lower bounds starting from 1';
		END IF;

		-- check that center pixel isn't NODATA
		IF _value[z][2][2] IS NULL THEN
			RETURN NULL;
		-- substitute center pixel for any neighbor pixels that are NODATA
		ELSE
			FOR y IN 1..3 LOOP
				FOR x IN 1..3 LOOP
					IF _value[z][y][x] IS NULL THEN
						_value[z][y][x] = _value[z][2][2];
					END IF;
				END LOOP;
			END LOOP;
		END IF;

		-------------------------------------------------
		--|   Z1= Z(-1,1) |  Z2= Z(0,1)	| Z3= Z(1,1)  |--
		-------------------------------------------------
		--|   Z4= Z(-1,0) |  Z5= Z(0,0) | Z6= Z(1,0)  |--
		-------------------------------------------------
		--|   Z7= Z(-1,-1)|  Z8= Z(0,-1)|  Z9= Z(1,-1)|--
		-------------------------------------------------

		Z1 := _value[z][1][1];
		Z2 := _value[z][2][1];
		Z3 := _value[z][3][1];
		Z4 := _value[z][1][2];
		Z5 := _value[z][2][2];
		Z6 := _value[z][3][2];
		Z7 := _value[z][1][3];
		Z8 := _value[z][2][3];
		Z9 := _value[z][3][3];

		mean := (Z1 + Z2 + Z3 + Z4 + Z6 + Z7 + Z8 + Z9)/8;
		tpi := Z5-mean;
		
		return tpi;
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_tpi4ma"(IN "value" _float8, IN pos _int4, INOUT userargs _text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_tpi("public"."raster", int4, "public"."raster", text, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_tpi"("public"."raster", int4, "public"."raster", text, bool);
CREATE FUNCTION "public"."st_tpi"(IN rast "public"."raster", IN nband int4, IN customextent "public"."raster", IN pixeltype text DEFAULT '32BF'::text, IN interpolate_nodata bool DEFAULT false) RETURNS "public"."raster" 
	AS $BODY$
	DECLARE
		_rast raster;
		_nband integer;
		_pixtype text;
		_pixwidth double precision;
		_pixheight double precision;
		_width integer;
		_height integer;
		_customextent raster;
		_extenttype text;
	BEGIN
		_customextent := customextent;
		IF _customextent IS NULL THEN
			_extenttype := 'FIRST';
		ELSE
			_extenttype := 'CUSTOM';
		END IF;

		IF interpolate_nodata IS TRUE THEN
			_rast := ST_MapAlgebra(
				ARRAY[ROW(rast, nband)]::rastbandarg[],
				'st_invdistweight4ma(double precision[][][], integer[][], text[])'::regprocedure,
				pixeltype,
				'FIRST', NULL,
				1, 1
			);
			_nband := 1;
			_pixtype := NULL;
		ELSE
			_rast := rast;
			_nband := nband;
			_pixtype := pixeltype;
		END IF;

		-- get properties
		_pixwidth := ST_PixelWidth(_rast);
		_pixheight := ST_PixelHeight(_rast);
		SELECT width, height INTO _width, _height FROM ST_Metadata(_rast);

		RETURN ST_MapAlgebra(
			ARRAY[ROW(_rast, _nband)]::rastbandarg[],
			'_st_tpi4ma(double precision[][][], integer[][], text[])'::regprocedure,
			_pixtype,
			_extenttype, _customextent,
			1, 1);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_tpi"(IN rast "public"."raster", IN nband int4, IN customextent "public"."raster", IN pixeltype text, IN interpolate_nodata bool) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_bandisnodata("public"."raster", bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_bandisnodata"("public"."raster", bool);
CREATE FUNCTION "public"."st_bandisnodata"(IN rast "public"."raster", IN forcechecking bool) RETURNS "bool" 
	AS $BODY$ SELECT st_bandisnodata($1, 1, $2) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_bandisnodata"(IN rast "public"."raster", IN forcechecking bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_bandisnodata"(IN rast "public"."raster", IN forcechecking bool) IS 'args: rast, forceChecking=true - Returns true if the band is filled with only nodata values.';

-- ----------------------------
--  Function structure for public._st_roughness4ma(_float8, _int4, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_roughness4ma"(_float8, _int4, _text);
CREATE FUNCTION "public"."_st_roughness4ma"(IN "value" _float8, IN pos _int4 DEFAULT NULL::text[], INOUT userargs _text DEFAULT (null)) RETURNS "float8" 
	AS $BODY$
	DECLARE
		x integer;
		y integer;
		z integer;

		minimum double precision;
		maximum double precision;

		_value double precision[][][];
		ndims int;
	BEGIN

		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := _st_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;

		-- only use the first raster passed to this function
		IF array_length(_value, 1) > 1 THEN
			RAISE NOTICE 'Only using the values from the first raster';
		END IF;
		z := array_lower(_value, 1);

		IF (
			array_lower(_value, 2) != 1 OR array_upper(_value, 2) != 3 OR
			array_lower(_value, 3) != 1 OR array_upper(_value, 3) != 3
		) THEN
			RAISE EXCEPTION 'First parameter of function must be a 1x3x3 array with each of the lower bounds starting from 1';
		END IF;

		-- check that center pixel isn't NODATA
		IF _value[z][2][2] IS NULL THEN
			RETURN NULL;
		-- substitute center pixel for any neighbor pixels that are NODATA
		ELSE
			FOR y IN 1..3 LOOP
				FOR x IN 1..3 LOOP
					IF _value[z][y][x] IS NULL THEN
						_value[z][y][x] = _value[z][2][2];
					END IF;
				END LOOP;
			END LOOP;
		END IF;

		minimum := _value[z][1][1];
		maximum := _value[z][1][1];

		FOR Y IN 1..3 LOOP
		    FOR X IN 1..3 LOOP
		    	 IF _value[z][y][x] < minimum THEN
			    minimum := _value[z][y][x];
			 ELSIF _value[z][y][x] > maximum THEN
			    maximum := _value[z][y][x];
			 END IF;
		    END LOOP;
		END LOOP;

		RETURN maximum - minimum;
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_roughness4ma"(IN "value" _float8, IN pos _int4, INOUT userargs _text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_roughness("public"."raster", int4, "public"."raster", text, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_roughness"("public"."raster", int4, "public"."raster", text, bool);
CREATE FUNCTION "public"."st_roughness"(IN rast "public"."raster", IN nband int4, IN customextent "public"."raster", IN pixeltype text DEFAULT '32BF'::text, IN interpolate_nodata bool DEFAULT false) RETURNS "public"."raster" 
	AS $BODY$
	DECLARE
		_rast raster;
		_nband integer;
		_pixtype text;
		_pixwidth double precision;
		_pixheight double precision;
		_width integer;
		_height integer;
		_customextent raster;
		_extenttype text;
	BEGIN
		_customextent := customextent;
		IF _customextent IS NULL THEN
			_extenttype := 'FIRST';
		ELSE
			_extenttype := 'CUSTOM';
		END IF;

		IF interpolate_nodata IS TRUE THEN
			_rast := ST_MapAlgebra(
				ARRAY[ROW(rast, nband)]::rastbandarg[],
				'st_invdistweight4ma(double precision[][][], integer[][], text[])'::regprocedure,
				pixeltype,
				'FIRST', NULL,
				1, 1
			);
			_nband := 1;
			_pixtype := NULL;
		ELSE
			_rast := rast;
			_nband := nband;
			_pixtype := pixeltype;
		END IF;

		RETURN ST_MapAlgebra(
			ARRAY[ROW(_rast, _nband)]::rastbandarg[],
			'_st_roughness4ma(double precision[][][], integer[][], text[])'::regprocedure,
			_pixtype,
			_extenttype, _customextent,
			1, 1);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_roughness"(IN rast "public"."raster", IN nband int4, IN customextent "public"."raster", IN pixeltype text, IN interpolate_nodata bool) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._st_tri4ma(_float8, _int4, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_tri4ma"(_float8, _int4, _text);
CREATE FUNCTION "public"."_st_tri4ma"(IN "value" _float8, IN pos _int4 DEFAULT NULL::text[], INOUT userargs _text DEFAULT (null)) RETURNS "float8" 
	AS $BODY$
	DECLARE
		x integer;
		y integer;
		z integer;

		Z1 double precision;
		Z2 double precision;
		Z3 double precision;
		Z4 double precision;
		Z5 double precision;
		Z6 double precision;
		Z7 double precision;
		Z8 double precision;
		Z9 double precision;

		tri double precision;
		_value double precision[][][];
		ndims int;
	BEGIN
		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := _st_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;

		-- only use the first raster passed to this function
		IF array_length(_value, 1) > 1 THEN
			RAISE NOTICE 'Only using the values from the first raster';
		END IF;
		z := array_lower(_value, 1);

		IF (
			array_lower(_value, 2) != 1 OR array_upper(_value, 2) != 3 OR
			array_lower(_value, 3) != 1 OR array_upper(_value, 3) != 3
		) THEN
			RAISE EXCEPTION 'First parameter of function must be a 1x3x3 array with each of the lower bounds starting from 1';
		END IF;

		-- check that center pixel isn't NODATA
		IF _value[z][2][2] IS NULL THEN
			RETURN NULL;
		-- substitute center pixel for any neighbor pixels that are NODATA
		ELSE
			FOR y IN 1..3 LOOP
				FOR x IN 1..3 LOOP
					IF _value[z][y][x] IS NULL THEN
						_value[z][y][x] = _value[z][2][2];
					END IF;
				END LOOP;
			END LOOP;
		END IF;

		-------------------------------------------------
		--|   Z1= Z(-1,1) |  Z2= Z(0,1)	| Z3= Z(1,1)  |--
		-------------------------------------------------
		--|   Z4= Z(-1,0) |  Z5= Z(0,0) | Z6= Z(1,0)  |--
		-------------------------------------------------
		--|   Z7= Z(-1,-1)|  Z8= Z(0,-1)|  Z9= Z(1,-1)|--
		-------------------------------------------------

		-- _scale width and height units / z units to make z units equal to height width units
		Z1 := _value[z][1][1];
		Z2 := _value[z][2][1];
		Z3 := _value[z][3][1];
		Z4 := _value[z][1][2];
		Z5 := _value[z][2][2];
		Z6 := _value[z][3][2];
		Z7 := _value[z][1][3];
		Z8 := _value[z][2][3];
		Z9 := _value[z][3][3];

		tri := ( abs(Z1 - Z5 ) + abs( Z2 - Z5 ) + abs( Z3 - Z5 ) + abs( Z4 - Z5 ) + abs( Z6 - Z5 ) + abs( Z7 - Z5 ) + abs( Z8 - Z5 ) + abs ( Z9 - Z5 )) / 8;
		
		return tri;  
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_tri4ma"(IN "value" _float8, IN pos _int4, INOUT userargs _text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_tri("public"."raster", int4, "public"."raster", text, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_tri"("public"."raster", int4, "public"."raster", text, bool);
CREATE FUNCTION "public"."st_tri"(IN rast "public"."raster", IN nband int4, IN customextent "public"."raster", IN pixeltype text DEFAULT '32BF'::text, IN interpolate_nodata bool DEFAULT false) RETURNS "public"."raster" 
	AS $BODY$
	DECLARE
		_rast raster;
		_nband integer;
		_pixtype text;
		_pixwidth double precision;
		_pixheight double precision;
		_width integer;
		_height integer;
		_customextent raster;
		_extenttype text;
	BEGIN
		_customextent := customextent;
		IF _customextent IS NULL THEN
			_extenttype := 'FIRST';
		ELSE
			_extenttype := 'CUSTOM';
		END IF;

		IF interpolate_nodata IS TRUE THEN
			_rast := ST_MapAlgebra(
				ARRAY[ROW(rast, nband)]::rastbandarg[],
				'st_invdistweight4ma(double precision[][][], integer[][], text[])'::regprocedure,
				pixeltype,
				'FIRST', NULL,
				1, 1
			);
			_nband := 1;
			_pixtype := NULL;
		ELSE
			_rast := rast;
			_nband := nband;
			_pixtype := pixeltype;
		END IF;

		-- get properties
		_pixwidth := ST_PixelWidth(_rast);
		_pixheight := ST_PixelHeight(_rast);
		SELECT width, height INTO _width, _height FROM ST_Metadata(_rast);

		RETURN ST_MapAlgebra(
			ARRAY[ROW(_rast, _nband)]::rastbandarg[],
			'_st_tri4ma(double precision[][][], integer[][], text[])'::regprocedure,
			_pixtype,
			_extenttype, _customextent,
			1, 1);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_tri"(IN rast "public"."raster", IN nband int4, IN customextent "public"."raster", IN pixeltype text, IN interpolate_nodata bool) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_isempty("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_isempty"("public"."raster");
CREATE FUNCTION "public"."st_isempty"(IN rast "public"."raster") RETURNS "bool" 
	AS '$libdir/rtpostgis-2.1','RASTER_isEmpty'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_isempty"(IN rast "public"."raster") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_isempty"(IN rast "public"."raster") IS 'args: rast - Returns true if the raster is empty (width = 0 and height = 0). Otherwise, returns false.';

-- ----------------------------
--  Function structure for public.st_hasnoband("public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_hasnoband"("public"."raster", int4);
CREATE FUNCTION "public"."st_hasnoband"(IN rast "public"."raster", IN nband int4 DEFAULT 1) RETURNS "bool" 
	AS '$libdir/rtpostgis-2.1','RASTER_hasNoBand'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_hasnoband"(IN rast "public"."raster", IN nband int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_hasnoband"(IN rast "public"."raster", IN nband int4) IS 'args: rast, bandnum=1 - Returns true if there is no band with given band number. If no band number is specified, then band number 1 is assumed.';

-- ----------------------------
--  Function structure for public.st_bandnodatavalue("public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_bandnodatavalue"("public"."raster", int4);
CREATE FUNCTION "public"."st_bandnodatavalue"(IN rast "public"."raster", IN band int4 DEFAULT 1) RETURNS "float8" 
	AS '$libdir/rtpostgis-2.1','RASTER_getBandNoDataValue'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_bandnodatavalue"(IN rast "public"."raster", IN band int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_bandnodatavalue"(IN rast "public"."raster", IN band int4) IS 'args: rast, bandnum=1 - Returns the value in a given band that represents no data. If no band num 1 is assumed.';

-- ----------------------------
--  Function structure for public.st_setskew("public"."raster", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_setskew"("public"."raster", float8);
CREATE FUNCTION "public"."st_setskew"(IN rast "public"."raster", IN skew float8) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.1','RASTER_setSkew'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_setskew"(IN rast "public"."raster", IN skew float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_setskew"(IN rast "public"."raster", IN skew float8) IS 'args: rast, skewxy - Sets the georeference X and Y skew (or rotation parameter). If only one is passed in, sets X and Y to the same value.';

-- ----------------------------
--  Function structure for public.st_bandpixeltype("public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_bandpixeltype"("public"."raster", int4);
CREATE FUNCTION "public"."st_bandpixeltype"(IN rast "public"."raster", IN band int4 DEFAULT 1) RETURNS "text" 
	AS '$libdir/rtpostgis-2.1','RASTER_getBandPixelTypeName'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_bandpixeltype"(IN rast "public"."raster", IN band int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_bandpixeltype"(IN rast "public"."raster", IN band int4) IS 'args: rast, bandnum=1 - Returns the type of pixel for given band. If no bandnum specified, 1 is assumed.';

-- ----------------------------
--  Function structure for public.st_bandmetadata("public"."raster", _int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_bandmetadata"("public"."raster", _int4);
CREATE FUNCTION "public"."st_bandmetadata"(IN rast "public"."raster", IN band _int4, OUT bandnum int4, OUT pixeltype text, OUT nodatavalue float8, OUT isoutdb bool, OUT "path" text) RETURNS "record" 
	AS '$libdir/rtpostgis-2.1','RASTER_bandmetadata'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_bandmetadata"(IN rast "public"."raster", IN band _int4, OUT bandnum int4, OUT pixeltype text, OUT nodatavalue float8, OUT isoutdb bool, OUT "path" text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_bandmetadata("public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_bandmetadata"("public"."raster", int4);
CREATE FUNCTION "public"."st_bandmetadata"(IN rast "public"."raster", IN band int4 DEFAULT 1, OUT pixeltype text, OUT nodatavalue float8, OUT isoutdb bool, OUT "path" text) RETURNS "record" 
	AS $BODY$ SELECT pixeltype, nodatavalue, isoutdb, path FROM st_bandmetadata($1, ARRAY[$2]::int[]) LIMIT 1 $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_bandmetadata"(IN rast "public"."raster", IN band int4, OUT pixeltype text, OUT nodatavalue float8, OUT isoutdb bool, OUT "path" text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_bandmetadata"(IN rast "public"."raster", IN band int4, OUT pixeltype text, OUT nodatavalue float8, OUT isoutdb bool, OUT "path" text) IS 'args: rast, bandnum=1 - Returns basic meta data for a specific raster band. band num 1 is assumed if none-specified.';

-- ----------------------------
--  Function structure for public.st_value("public"."raster", int4, int4, int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_value"("public"."raster", int4, int4, int4, bool);
CREATE FUNCTION "public"."st_value"(IN rast "public"."raster", IN band int4, IN x int4, IN y int4, IN exclude_nodata_value bool DEFAULT true) RETURNS "float8" 
	AS '$libdir/rtpostgis-2.1','RASTER_getPixelValue'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_value"(IN rast "public"."raster", IN band int4, IN x int4, IN y int4, IN exclude_nodata_value bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_value"(IN rast "public"."raster", IN band int4, IN x int4, IN y int4, IN exclude_nodata_value bool) IS 'args: rast, bandnum, columnx, rowy, exclude_nodata_value=true - Returns the value of a given band in a given columnx, rowy pixel or at a particular geometric point. Band numbers start at 1 and assumed to be 1 if not specified. If exclude_nodata_value is set to false, then all pixels include nodata pixels are considered to intersect and return value. If exclude_nodata_value is not passed in then reads it from metadata of raster.';

-- ----------------------------
--  Function structure for public.st_value("public"."raster", int4, int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_value"("public"."raster", int4, int4, bool);
CREATE FUNCTION "public"."st_value"(IN rast "public"."raster", IN x int4, IN y int4, IN exclude_nodata_value bool DEFAULT true) RETURNS "float8" 
	AS $BODY$ SELECT st_value($1, 1, $2, $3, $4) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_value"(IN rast "public"."raster", IN x int4, IN y int4, IN exclude_nodata_value bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_value"(IN rast "public"."raster", IN x int4, IN y int4, IN exclude_nodata_value bool) IS 'args: rast, columnx, rowy, exclude_nodata_value=true - Returns the value of a given band in a given columnx, rowy pixel or at a particular geometric point. Band numbers start at 1 and assumed to be 1 if not specified. If exclude_nodata_value is set to false, then all pixels include nodata pixels are considered to intersect and return value. If exclude_nodata_value is not passed in then reads it from metadata of raster.';

-- ----------------------------
--  Function structure for public.st_value("public"."raster", int4, "public"."geometry", bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_value"("public"."raster", int4, "public"."geometry", bool);
CREATE FUNCTION "public"."st_value"(IN rast "public"."raster", IN band int4, IN pt "public"."geometry", IN exclude_nodata_value bool DEFAULT true) RETURNS "float8" 
	AS $BODY$
    DECLARE
        x float8;
        y float8;
        gtype text;
    BEGIN
        gtype := st_geometrytype(pt);
        IF ( gtype != 'ST_Point' ) THEN
            RAISE EXCEPTION 'Attempting to get the value of a pixel with a non-point geometry';
        END IF;

				IF ST_SRID(pt) != ST_SRID(rast) THEN
            RAISE EXCEPTION 'Raster and geometry do not have the same SRID';
				END IF;

        x := st_x(pt);
        y := st_y(pt);
        RETURN st_value(rast,
                        band,
                        st_worldtorastercoordx(rast, x, y),
                        st_worldtorastercoordy(rast, x, y),
                        exclude_nodata_value);
    END;
    $BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_value"(IN rast "public"."raster", IN band int4, IN pt "public"."geometry", IN exclude_nodata_value bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_value"(IN rast "public"."raster", IN band int4, IN pt "public"."geometry", IN exclude_nodata_value bool) IS 'args: rast, bandnum, pt, exclude_nodata_value=true - Returns the value of a given band in a given columnx, rowy pixel or at a particular geometric point. Band numbers start at 1 and assumed to be 1 if not specified. If exclude_nodata_value is set to false, then all pixels include nodata pixels are considered to intersect and return value. If exclude_nodata_value is not passed in then reads it from metadata of raster.';

-- ----------------------------
--  Function structure for public.st_value("public"."raster", "public"."geometry", bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_value"("public"."raster", "public"."geometry", bool);
CREATE FUNCTION "public"."st_value"(IN rast "public"."raster", IN pt "public"."geometry", IN exclude_nodata_value bool DEFAULT true) RETURNS "float8" 
	AS $BODY$ SELECT st_value($1, 1, $2, $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_value"(IN rast "public"."raster", IN pt "public"."geometry", IN exclude_nodata_value bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_value"(IN rast "public"."raster", IN pt "public"."geometry", IN exclude_nodata_value bool) IS 'args: rast, pt, exclude_nodata_value=true - Returns the value of a given band in a given columnx, rowy pixel or at a particular geometric point. Band numbers start at 1 and assumed to be 1 if not specified. If exclude_nodata_value is set to false, then all pixels include nodata pixels are considered to intersect and return value. If exclude_nodata_value is not passed in then reads it from metadata of raster.';

-- ----------------------------
--  Function structure for public.st_pixelofvalue("public"."raster", int4, _float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_pixelofvalue"("public"."raster", int4, _float8, bool);
CREATE FUNCTION "public"."st_pixelofvalue"(IN rast "public"."raster", IN nband int4, IN "search" _float8, IN exclude_nodata_value bool DEFAULT true, OUT val float8, OUT x int4, OUT y int4) RETURNS SETOF "record" 
	AS '$libdir/rtpostgis-2.1','RASTER_pixelOfValue'
	LANGUAGE c
	COST 1
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_pixelofvalue"(IN rast "public"."raster", IN nband int4, IN "search" _float8, IN exclude_nodata_value bool, OUT val float8, OUT x int4, OUT y int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_pixelofvalue"(IN rast "public"."raster", IN nband int4, IN "search" _float8, IN exclude_nodata_value bool, OUT val float8, OUT x int4, OUT y int4) IS 'args: rast, nband, search, exclude_nodata_value=true - Get the columnx, rowy coordinates of the pixel whose value equals the search value.';

-- ----------------------------
--  Function structure for public.st_pixelofvalue("public"."raster", _float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_pixelofvalue"("public"."raster", _float8, bool);
CREATE FUNCTION "public"."st_pixelofvalue"(IN rast "public"."raster", IN "search" _float8, IN exclude_nodata_value bool DEFAULT true, OUT val float8, OUT x int4, OUT y int4) RETURNS SETOF "record" 
	AS $BODY$ SELECT val, x, y FROM st_pixelofvalue($1, 1, $2, $3) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_pixelofvalue"(IN rast "public"."raster", IN "search" _float8, IN exclude_nodata_value bool, OUT val float8, OUT x int4, OUT y int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_pixelofvalue"(IN rast "public"."raster", IN "search" _float8, IN exclude_nodata_value bool, OUT val float8, OUT x int4, OUT y int4) IS 'args: rast, search, exclude_nodata_value=true - Get the columnx, rowy coordinates of the pixel whose value equals the search value.';

-- ----------------------------
--  Function structure for public.st_pixelofvalue("public"."raster", int4, float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_pixelofvalue"("public"."raster", int4, float8, bool);
CREATE FUNCTION "public"."st_pixelofvalue"(IN rast "public"."raster", IN nband int4, IN "search" float8, IN exclude_nodata_value bool DEFAULT true, OUT x int4, OUT y int4) RETURNS SETOF "record" 
	AS $BODY$ SELECT x, y FROM st_pixelofvalue($1, $2, ARRAY[$3], $4) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_pixelofvalue"(IN rast "public"."raster", IN nband int4, IN "search" float8, IN exclude_nodata_value bool, OUT x int4, OUT y int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_pixelofvalue"(IN rast "public"."raster", IN nband int4, IN "search" float8, IN exclude_nodata_value bool, OUT x int4, OUT y int4) IS 'args: rast, nband, search, exclude_nodata_value=true - Get the columnx, rowy coordinates of the pixel whose value equals the search value.';

-- ----------------------------
--  Function structure for public.st_pixelofvalue("public"."raster", float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_pixelofvalue"("public"."raster", float8, bool);
CREATE FUNCTION "public"."st_pixelofvalue"(IN rast "public"."raster", IN "search" float8, IN exclude_nodata_value bool DEFAULT true, OUT x int4, OUT y int4) RETURNS SETOF "record" 
	AS $BODY$ SELECT x, y FROM st_pixelofvalue($1, 1, ARRAY[$2], $3) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_pixelofvalue"(IN rast "public"."raster", IN "search" float8, IN exclude_nodata_value bool, OUT x int4, OUT y int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_pixelofvalue"(IN rast "public"."raster", IN "search" float8, IN exclude_nodata_value bool, OUT x int4, OUT y int4) IS 'args: rast, search, exclude_nodata_value=true - Get the columnx, rowy coordinates of the pixel whose value equals the search value.';

-- ----------------------------
--  Function structure for public.st_georeference("public"."raster", text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_georeference"("public"."raster", text);
CREATE FUNCTION "public"."st_georeference"(IN rast "public"."raster", IN format text DEFAULT 'GDAL'::text) RETURNS "text" 
	AS $BODY$
    DECLARE
				scale_x numeric;
				scale_y numeric;
				skew_x numeric;
				skew_y numeric;
				ul_x numeric;
				ul_y numeric;

        result text;
    BEGIN
			SELECT scalex::numeric, scaley::numeric, skewx::numeric, skewy::numeric, upperleftx::numeric, upperlefty::numeric
				INTO scale_x, scale_y, skew_x, skew_y, ul_x, ul_y FROM ST_Metadata(rast);

						-- scale x
            result := trunc(scale_x, 10) || E'\n';

						-- skew y
            result := result || trunc(skew_y, 10) || E'\n';

						-- skew x
            result := result || trunc(skew_x, 10) || E'\n';

						-- scale y
            result := result || trunc(scale_y, 10) || E'\n';

        IF format = 'ESRI' THEN
						-- upper left x
            result := result || trunc((ul_x + scale_x * 0.5), 10) || E'\n';

						-- upper left y
            result = result || trunc((ul_y + scale_y * 0.5), 10) || E'\n';
        ELSE -- IF format = 'GDAL' THEN
						-- upper left x
            result := result || trunc(ul_x, 10) || E'\n';

						-- upper left y
            result := result || trunc(ul_y, 10) || E'\n';
        END IF;

        RETURN result;
    END;
    $BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_georeference"(IN rast "public"."raster", IN format text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_georeference"(IN rast "public"."raster", IN format text) IS 'args: rast, format=GDAL - Returns the georeference meta data in GDAL or ESRI format as commonly seen in a world file. Default is GDAL.';

-- ----------------------------
--  Function structure for public.st_setscale("public"."raster", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_setscale"("public"."raster", float8);
CREATE FUNCTION "public"."st_setscale"(IN rast "public"."raster", IN "scale" float8) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.1','RASTER_setScale'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_setscale"(IN rast "public"."raster", IN "scale" float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_setscale"(IN rast "public"."raster", IN "scale" float8) IS 'args: rast, xy - Sets the X and Y size of pixels in units of coordinate reference system. Number units/pixel width/height.';

-- ----------------------------
--  Function structure for public.raster_eq("public"."raster", "public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."raster_eq"("public"."raster", "public"."raster");
CREATE FUNCTION "public"."raster_eq"(IN "public"."raster", IN "public"."raster") RETURNS "bool" 
	AS $BODY$ SELECT raster_hash($1) = raster_hash($2) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."raster_eq"(IN "public"."raster", IN "public"."raster") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_setgeoreference("public"."raster", text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_setgeoreference"("public"."raster", text, text);
CREATE FUNCTION "public"."st_setgeoreference"(IN rast "public"."raster", IN georef text, IN format text DEFAULT 'GDAL'::text) RETURNS "public"."raster" 
	AS $BODY$
    DECLARE
        params text[];
        rastout raster;
    BEGIN
        IF rast IS NULL THEN
            RAISE WARNING 'Cannot set georeferencing on a null raster in st_setgeoreference.';
            RETURN rastout;
        END IF;

        SELECT regexp_matches(georef,
            E'(-?\\d+(?:\\.\\d+)?)\\s(-?\\d+(?:\\.\\d+)?)\\s(-?\\d+(?:\\.\\d+)?)\\s' ||
            E'(-?\\d+(?:\\.\\d+)?)\\s(-?\\d+(?:\\.\\d+)?)\\s(-?\\d+(?:\\.\\d+)?)') INTO params;

        IF NOT FOUND THEN
            RAISE EXCEPTION 'st_setgeoreference requires a string with 6 floating point values.';
        END IF;

        IF format = 'ESRI' THEN
            -- params array is now:
            -- {scalex, skewy, skewx, scaley, upperleftx, upperlefty}
            rastout := st_setscale(rast, params[1]::float8, params[4]::float8);
            rastout := st_setskew(rastout, params[3]::float8, params[2]::float8);
            rastout := st_setupperleft(rastout,
                                   params[5]::float8 - (params[1]::float8 * 0.5),
                                   params[6]::float8 - (params[4]::float8 * 0.5));
        ELSE
            IF format != 'GDAL' THEN
                RAISE WARNING 'Format ''%'' is not recognized, defaulting to GDAL format.', format;
            END IF;
            -- params array is now:
            -- {scalex, skewy, skewx, scaley, upperleftx, upperlefty}

            rastout := st_setscale(rast, params[1]::float8, params[4]::float8);
            rastout := st_setskew( rastout, params[3]::float8, params[2]::float8);
            rastout := st_setupperleft(rastout, params[5]::float8, params[6]::float8);
        END IF;
        RETURN rastout;
    END;
    $BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_setgeoreference"(IN rast "public"."raster", IN georef text, IN format text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_setgeoreference"(IN rast "public"."raster", IN georef text, IN format text) IS 'args: rast, georefcoords, format=GDAL - Set Georeference 6 georeference parameters in a single call. Numbers should be separated by white space. Accepts inputs in GDAL or ESRI format. Default is GDAL.';

-- ----------------------------
--  Function structure for public.st_setgeoreference("public"."raster", float8, float8, float8, float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_setgeoreference"("public"."raster", float8, float8, float8, float8, float8, float8);
CREATE FUNCTION "public"."st_setgeoreference"(IN rast "public"."raster", IN upperleftx float8, IN upperlefty float8, IN scalex float8, IN scaley float8, IN skewx float8, IN skewy float8) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_setgeoreference($1, array_to_string(ARRAY[$4, $7, $6, $5, $2, $3], ' ')) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_setgeoreference"(IN rast "public"."raster", IN upperleftx float8, IN upperlefty float8, IN scalex float8, IN scaley float8, IN skewx float8, IN skewy float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_setgeoreference"(IN rast "public"."raster", IN upperleftx float8, IN upperlefty float8, IN scalex float8, IN scaley float8, IN skewx float8, IN skewy float8) IS 'args: rast, upperleftx, upperlefty, scalex, scaley, skewx, skewy - Set Georeference 6 georeference parameters in a single call. Numbers should be separated by white space. Accepts inputs in GDAL or ESRI format. Default is GDAL.';

-- ----------------------------
--  Function structure for public._st_tile("public"."raster", int4, int4, _int4, bool, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_tile"("public"."raster", int4, int4, _int4, bool, float8);
CREATE FUNCTION "public"."_st_tile"(IN rast "public"."raster", IN width int4, IN height int4, IN nband _int4 DEFAULT NULL::integer[], IN padwithnodata bool DEFAULT false, IN nodataval float8 DEFAULT NULL::double precision) RETURNS SETOF "public"."raster" 
	AS '$libdir/rtpostgis-2.1','RASTER_tile'
	LANGUAGE c
	COST 1
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_tile"(IN rast "public"."raster", IN width int4, IN height int4, IN nband _int4, IN padwithnodata bool, IN nodataval float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_tile("public"."raster", _int4, int4, int4, bool, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_tile"("public"."raster", _int4, int4, int4, bool, float8);
CREATE FUNCTION "public"."st_tile"(IN rast "public"."raster", IN nband _int4, IN width int4, IN height int4, IN padwithnodata bool DEFAULT false, IN nodataval float8 DEFAULT NULL::double precision) RETURNS SETOF "public"."raster" 
	AS $BODY$ SELECT _st_tile($1, $3, $4, $2, $5, $6) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_tile"(IN rast "public"."raster", IN nband _int4, IN width int4, IN height int4, IN padwithnodata bool, IN nodataval float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_tile"(IN rast "public"."raster", IN nband _int4, IN width int4, IN height int4, IN padwithnodata bool, IN nodataval float8) IS 'args: rast, nband, width, height, padwithnodata=FALSE, nodataval=NULL - Returns a set of rasters resulting from the split of the input raster based upon the desired dimensions of the output rasters.';

-- ----------------------------
--  Function structure for public.st_tile("public"."raster", int4, int4, int4, bool, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_tile"("public"."raster", int4, int4, int4, bool, float8);
CREATE FUNCTION "public"."st_tile"(IN rast "public"."raster", IN nband int4, IN width int4, IN height int4, IN padwithnodata bool DEFAULT false, IN nodataval float8 DEFAULT NULL::double precision) RETURNS SETOF "public"."raster" 
	AS $BODY$ SELECT _st_tile($1, $3, $4, ARRAY[$2]::integer[], $5, $6) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_tile"(IN rast "public"."raster", IN nband int4, IN width int4, IN height int4, IN padwithnodata bool, IN nodataval float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_tile"(IN rast "public"."raster", IN nband int4, IN width int4, IN height int4, IN padwithnodata bool, IN nodataval float8) IS 'args: rast, nband, width, height, padwithnodata=FALSE, nodataval=NULL - Returns a set of rasters resulting from the split of the input raster based upon the desired dimensions of the output rasters.';

-- ----------------------------
--  Function structure for public.st_tile("public"."raster", int4, int4, bool, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_tile"("public"."raster", int4, int4, bool, float8);
CREATE FUNCTION "public"."st_tile"(IN rast "public"."raster", IN width int4, IN height int4, IN padwithnodata bool DEFAULT false, IN nodataval float8 DEFAULT NULL::double precision) RETURNS SETOF "public"."raster" 
	AS $BODY$ SELECT _st_tile($1, $2, $3, NULL::integer[], $4, $5) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_tile"(IN rast "public"."raster", IN width int4, IN height int4, IN padwithnodata bool, IN nodataval float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_tile"(IN rast "public"."raster", IN width int4, IN height int4, IN padwithnodata bool, IN nodataval float8) IS 'args: rast, width, height, padwithnodata=FALSE, nodataval=NULL - Returns a set of rasters resulting from the split of the input raster based upon the desired dimensions of the output rasters.';

-- ----------------------------
--  Function structure for public.st_setbandnodatavalue("public"."raster", int4, float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_setbandnodatavalue"("public"."raster", int4, float8, bool);
CREATE FUNCTION "public"."st_setbandnodatavalue"(IN rast "public"."raster", IN band int4, IN nodatavalue float8, IN forcechecking bool DEFAULT false) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.1','RASTER_setBandNoDataValue'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_setbandnodatavalue"(IN rast "public"."raster", IN band int4, IN nodatavalue float8, IN forcechecking bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_setbandnodatavalue"(IN rast "public"."raster", IN band int4, IN nodatavalue float8, IN forcechecking bool) IS 'args: rast, band, nodatavalue, forcechecking=false - Sets the value for the given band that represents no data. Band 1 is assumed if no band is specified. To mark a band as having no nodata value, set the nodata value = NULL.';

-- ----------------------------
--  Function structure for public.st_setbandnodatavalue("public"."raster", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_setbandnodatavalue"("public"."raster", float8);
CREATE FUNCTION "public"."st_setbandnodatavalue"(IN rast "public"."raster", IN nodatavalue float8) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_setbandnodatavalue($1, 1, $2, FALSE) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."st_setbandnodatavalue"(IN rast "public"."raster", IN nodatavalue float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_setbandnodatavalue"(IN rast "public"."raster", IN nodatavalue float8) IS 'args: rast, nodatavalue - Sets the value for the given band that represents no data. Band 1 is assumed if no band is specified. To mark a band as having no nodata value, set the nodata value = NULL.';

-- ----------------------------
--  Function structure for public.st_setbandisnodata("public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_setbandisnodata"("public"."raster", int4);
CREATE FUNCTION "public"."st_setbandisnodata"(IN rast "public"."raster", IN band int4 DEFAULT 1) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.1','RASTER_setBandIsNoData'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_setbandisnodata"(IN rast "public"."raster", IN band int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_setbandisnodata"(IN rast "public"."raster", IN band int4) IS 'args: rast, band=1 - Sets the isnodata flag of the band to TRUE.';

-- ----------------------------
--  Function structure for public._st_setvalues("public"."raster", int4, int4, int4, _float8, _bool, bool, float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_setvalues"("public"."raster", int4, int4, int4, _float8, _bool, bool, float8, bool);
CREATE FUNCTION "public"."_st_setvalues"(IN rast "public"."raster", IN nband int4, IN x int4, IN y int4, IN newvalueset _float8, IN noset _bool DEFAULT NULL::boolean[], IN hasnosetvalue bool DEFAULT false, IN nosetvalue float8 DEFAULT NULL::double precision, IN keepnodata bool DEFAULT false) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.1','RASTER_setPixelValuesArray'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_setvalues"(IN rast "public"."raster", IN nband int4, IN x int4, IN y int4, IN newvalueset _float8, IN noset _bool, IN hasnosetvalue bool, IN nosetvalue float8, IN keepnodata bool) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_setvalues("public"."raster", int4, int4, int4, _float8, _bool, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_setvalues"("public"."raster", int4, int4, int4, _float8, _bool, bool);
CREATE FUNCTION "public"."st_setvalues"(IN rast "public"."raster", IN nband int4, IN x int4, IN y int4, IN newvalueset _float8, IN noset _bool DEFAULT NULL::boolean[], IN keepnodata bool DEFAULT false) RETURNS "public"."raster" 
	AS $BODY$ SELECT _st_setvalues($1, $2, $3, $4, $5, $6, FALSE, NULL, $7) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_setvalues"(IN rast "public"."raster", IN nband int4, IN x int4, IN y int4, IN newvalueset _float8, IN noset _bool, IN keepnodata bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_setvalues"(IN rast "public"."raster", IN nband int4, IN x int4, IN y int4, IN newvalueset _float8, IN noset _bool, IN keepnodata bool) IS 'args: rast, nband, columnx, rowy, newvalueset, noset=NULL, keepnodata=FALSE - Returns modified raster resulting from setting the values of a given band.';

-- ----------------------------
--  Function structure for public.st_setvalues("public"."raster", int4, int4, int4, _float8, float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_setvalues"("public"."raster", int4, int4, int4, _float8, float8, bool);
CREATE FUNCTION "public"."st_setvalues"(IN rast "public"."raster", IN nband int4, IN x int4, IN y int4, IN newvalueset _float8, IN nosetvalue float8, IN keepnodata bool DEFAULT false) RETURNS "public"."raster" 
	AS $BODY$ SELECT _st_setvalues($1, $2, $3, $4, $5, NULL, TRUE, $6, $7) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_setvalues"(IN rast "public"."raster", IN nband int4, IN x int4, IN y int4, IN newvalueset _float8, IN nosetvalue float8, IN keepnodata bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_setvalues"(IN rast "public"."raster", IN nband int4, IN x int4, IN y int4, IN newvalueset _float8, IN nosetvalue float8, IN keepnodata bool) IS 'args: rast, nband, columnx, rowy, newvalueset, nosetvalue, keepnodata=FALSE - Returns modified raster resulting from setting the values of a given band.';

-- ----------------------------
--  Function structure for public.st_setvalues("public"."raster", int4, int4, int4, int4, int4, float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_setvalues"("public"."raster", int4, int4, int4, int4, int4, float8, bool);
CREATE FUNCTION "public"."st_setvalues"(IN rast "public"."raster", IN nband int4, IN x int4, IN y int4, IN width int4, IN height int4, IN newvalue float8, IN keepnodata bool DEFAULT false) RETURNS "public"."raster" 
	AS $BODY$
	BEGIN
		IF width <= 0 OR height <= 0 THEN
			RAISE EXCEPTION 'Values for width and height must be greater than zero';
			RETURN NULL;
		END IF;
		RETURN _st_setvalues($1, $2, $3, $4, array_fill($7, ARRAY[$6, $5]::int[]), NULL, FALSE, NULL, $8);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_setvalues"(IN rast "public"."raster", IN nband int4, IN x int4, IN y int4, IN width int4, IN height int4, IN newvalue float8, IN keepnodata bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_setvalues"(IN rast "public"."raster", IN nband int4, IN x int4, IN y int4, IN width int4, IN height int4, IN newvalue float8, IN keepnodata bool) IS 'args: rast, nband, columnx, rowy, width, height, newvalue, keepnodata=FALSE - Returns modified raster resulting from setting the values of a given band.';

-- ----------------------------
--  Function structure for public.st_setvalues("public"."raster", int4, int4, int4, int4, float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_setvalues"("public"."raster", int4, int4, int4, int4, float8, bool);
CREATE FUNCTION "public"."st_setvalues"(IN rast "public"."raster", IN x int4, IN y int4, IN width int4, IN height int4, IN newvalue float8, IN keepnodata bool DEFAULT false) RETURNS "public"."raster" 
	AS $BODY$
	BEGIN
		IF width <= 0 OR height <= 0 THEN
			RAISE EXCEPTION 'Values for width and height must be greater than zero';
			RETURN NULL;
		END IF;
		RETURN _st_setvalues($1, 1, $2, $3, array_fill($6, ARRAY[$5, $4]::int[]), NULL, FALSE, NULL, $7);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_setvalues"(IN rast "public"."raster", IN x int4, IN y int4, IN width int4, IN height int4, IN newvalue float8, IN keepnodata bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_setvalues"(IN rast "public"."raster", IN x int4, IN y int4, IN width int4, IN height int4, IN newvalue float8, IN keepnodata bool) IS 'args: rast, columnx, rowy, width, height, newvalue, keepnodata=FALSE - Returns modified raster resulting from setting the values of a given band.';

-- ----------------------------
--  Function structure for public.st_setvalues("public"."raster", int4, "public"."_geomval", bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_setvalues"("public"."raster", int4, "public"."_geomval", bool);
CREATE FUNCTION "public"."st_setvalues"(IN rast "public"."raster", IN nband int4, IN geomvalset "public"."_geomval", IN keepnodata bool DEFAULT false) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.1','RASTER_setPixelValuesGeomval'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_setvalues"(IN rast "public"."raster", IN nband int4, IN geomvalset "public"."_geomval", IN keepnodata bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_setvalues"(IN rast "public"."raster", IN nband int4, IN geomvalset "public"."_geomval", IN keepnodata bool) IS 'args: rast, nband, geomvalset, keepnodata=FALSE - Returns modified raster resulting from setting the values of a given band.';

-- ----------------------------
--  Function structure for public.st_setvalue("public"."raster", int4, int4, int4, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_setvalue"("public"."raster", int4, int4, int4, float8);
CREATE FUNCTION "public"."st_setvalue"(IN rast "public"."raster", IN band int4, IN x int4, IN y int4, IN newvalue float8) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.1','RASTER_setPixelValue'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_setvalue"(IN rast "public"."raster", IN band int4, IN x int4, IN y int4, IN newvalue float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_setvalue"(IN rast "public"."raster", IN band int4, IN x int4, IN y int4, IN newvalue float8) IS 'args: rast, bandnum, columnx, rowy, newvalue - Returns modified raster resulting from setting the value of a given band in a given columnx, rowy pixel or the pixels that intersect a particular geometry. Band numbers start at 1 and assumed to be 1 if not specified.';

-- ----------------------------
--  Function structure for public.st_setvalue("public"."raster", int4, int4, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_setvalue"("public"."raster", int4, int4, float8);
CREATE FUNCTION "public"."st_setvalue"(IN rast "public"."raster", IN x int4, IN y int4, IN newvalue float8) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_setvalue($1, 1, $2, $3, $4) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."st_setvalue"(IN rast "public"."raster", IN x int4, IN y int4, IN newvalue float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_setvalue"(IN rast "public"."raster", IN x int4, IN y int4, IN newvalue float8) IS 'args: rast, columnx, rowy, newvalue - Returns modified raster resulting from setting the value of a given band in a given columnx, rowy pixel or the pixels that intersect a particular geometry. Band numbers start at 1 and assumed to be 1 if not specified.';

-- ----------------------------
--  Function structure for public.st_setvalue("public"."raster", int4, "public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_setvalue"("public"."raster", int4, "public"."geometry", float8);
CREATE FUNCTION "public"."st_setvalue"(IN rast "public"."raster", IN nband int4, IN geom "public"."geometry", IN newvalue float8) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_setvalues($1, $2, ARRAY[ROW($3, $4)]::geomval[], FALSE) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_setvalue"(IN rast "public"."raster", IN nband int4, IN geom "public"."geometry", IN newvalue float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_setvalue"(IN rast "public"."raster", IN nband int4, IN geom "public"."geometry", IN newvalue float8) IS 'args: rast, bandnum, geom, newvalue - Returns modified raster resulting from setting the value of a given band in a given columnx, rowy pixel or the pixels that intersect a particular geometry. Band numbers start at 1 and assumed to be 1 if not specified.';

-- ----------------------------
--  Function structure for public.st_setvalue("public"."raster", "public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_setvalue"("public"."raster", "public"."geometry", float8);
CREATE FUNCTION "public"."st_setvalue"(IN rast "public"."raster", IN geom "public"."geometry", IN newvalue float8) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_setvalues($1, 1, ARRAY[ROW($2, $3)]::geomval[], FALSE) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_setvalue"(IN rast "public"."raster", IN geom "public"."geometry", IN newvalue float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_setvalue"(IN rast "public"."raster", IN geom "public"."geometry", IN newvalue float8) IS 'args: rast, geom, newvalue - Returns modified raster resulting from setting the value of a given band in a given columnx, rowy pixel or the pixels that intersect a particular geometry. Band numbers start at 1 and assumed to be 1 if not specified.';

-- ----------------------------
--  Function structure for public.st_dumpaspolygons("public"."raster", int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_dumpaspolygons"("public"."raster", int4, bool);
CREATE FUNCTION "public"."st_dumpaspolygons"(IN rast "public"."raster", IN band int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true) RETURNS SETOF "public"."geomval" 
	AS '$libdir/rtpostgis-2.1','RASTER_dumpAsPolygons'
	LANGUAGE c
	COST 1
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_dumpaspolygons"(IN rast "public"."raster", IN band int4, IN exclude_nodata_value bool) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_dumpvalues("public"."raster", _int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_dumpvalues"("public"."raster", _int4, bool);
CREATE FUNCTION "public"."st_dumpvalues"(IN rast "public"."raster", IN nband _int4 DEFAULT NULL::integer[], IN exclude_nodata_value bool DEFAULT true, OUT nband int4, OUT valarray _float8) RETURNS SETOF "record" 
	AS '$libdir/rtpostgis-2.1','RASTER_dumpValues'
	LANGUAGE c
	COST 1
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_dumpvalues"(IN rast "public"."raster", IN nband _int4, IN exclude_nodata_value bool, OUT nband int4, OUT valarray _float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_dumpvalues"(IN rast "public"."raster", IN nband _int4, IN exclude_nodata_value bool, OUT nband int4, OUT valarray _float8) IS 'args: rast, nband, exclude_nodata_value=true - Get the values of the specified band as a 2-dimension array.';

-- ----------------------------
--  Function structure for public.st_dumpvalues("public"."raster", int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_dumpvalues"("public"."raster", int4, bool);
CREATE FUNCTION "public"."st_dumpvalues"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool DEFAULT true) RETURNS "_float8" 
	AS $BODY$ SELECT valarray FROM st_dumpvalues($1, ARRAY[$2]::integer[], $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_dumpvalues"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_dumpvalues"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool) IS 'args: rast, nband, exclude_nodata_value=true - Get the values of the specified band as a 2-dimension array.';

-- ----------------------------
--  Function structure for public.st_polygon("public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_polygon"("public"."raster", int4);
CREATE FUNCTION "public"."st_polygon"(IN rast "public"."raster", IN band int4 DEFAULT 1) RETURNS "public"."geometry" 
	AS '$libdir/rtpostgis-2.1','RASTER_getPolygon'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_polygon"(IN rast "public"."raster", IN band int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._st_pixelaspolygons("public"."raster", int4, int4, int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_pixelaspolygons"("public"."raster", int4, int4, int4, bool);
CREATE FUNCTION "public"."_st_pixelaspolygons"(IN rast "public"."raster", IN band int4 DEFAULT 1, IN columnx int4 DEFAULT NULL::integer, IN rowy int4 DEFAULT NULL::integer, IN exclude_nodata_value bool DEFAULT true, OUT geom "public"."geometry", OUT val float8, OUT x int4, OUT y int4) RETURNS SETOF "record" 
	AS '$libdir/rtpostgis-2.1','RASTER_getPixelPolygons'
	LANGUAGE c
	COST 1
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_pixelaspolygons"(IN rast "public"."raster", IN band int4, IN columnx int4, IN rowy int4, IN exclude_nodata_value bool, OUT geom "public"."geometry", OUT val float8, OUT x int4, OUT y int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_pixelaspolygons("public"."raster", int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_pixelaspolygons"("public"."raster", int4, bool);
CREATE FUNCTION "public"."st_pixelaspolygons"(IN rast "public"."raster", IN band int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, OUT geom "public"."geometry", OUT val float8, OUT x int4, OUT y int4) RETURNS SETOF "record" 
	AS $BODY$ SELECT geom, val, x, y FROM _st_pixelaspolygons($1, $2, NULL, NULL, $3) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_pixelaspolygons"(IN rast "public"."raster", IN band int4, IN exclude_nodata_value bool, OUT geom "public"."geometry", OUT val float8, OUT x int4, OUT y int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_pixelaspolygons"(IN rast "public"."raster", IN band int4, IN exclude_nodata_value bool, OUT geom "public"."geometry", OUT val float8, OUT x int4, OUT y int4) IS 'args: rast, band=1, exclude_nodata_value=TRUE - Returns the polygon geometry that bounds every pixel of a raster band along with the value, the X and the Y raster coordinates of each pixel.';

-- ----------------------------
--  Function structure for public.st_pixelaspolygon("public"."raster", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_pixelaspolygon"("public"."raster", int4, int4);
CREATE FUNCTION "public"."st_pixelaspolygon"(IN rast "public"."raster", IN x int4, IN y int4) RETURNS "public"."geometry" 
	AS $BODY$ SELECT geom FROM _st_pixelaspolygons($1, NULL, $2, $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_pixelaspolygon"(IN rast "public"."raster", IN x int4, IN y int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_pixelaspolygon"(IN rast "public"."raster", IN x int4, IN y int4) IS 'args: rast, columnx, rowy - Returns the polygon geometry that bounds the pixel for a particular row and column.';

-- ----------------------------
--  Function structure for public.st_pixelaspoints("public"."raster", int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_pixelaspoints"("public"."raster", int4, bool);
CREATE FUNCTION "public"."st_pixelaspoints"(IN rast "public"."raster", IN band int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, OUT geom "public"."geometry", OUT val float8, OUT x int4, OUT y int4) RETURNS SETOF "record" 
	AS $BODY$ SELECT ST_PointN(ST_ExteriorRing(geom), 1), val, x, y FROM _st_pixelaspolygons($1, $2, NULL, NULL, $3) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_pixelaspoints"(IN rast "public"."raster", IN band int4, IN exclude_nodata_value bool, OUT geom "public"."geometry", OUT val float8, OUT x int4, OUT y int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_pixelaspoints"(IN rast "public"."raster", IN band int4, IN exclude_nodata_value bool, OUT geom "public"."geometry", OUT val float8, OUT x int4, OUT y int4) IS 'args: rast, band=1, exclude_nodata_value=TRUE - Returns a point geometry for each pixel of a raster band along with the value, the X and the Y raster coordinates of each pixel. The coordinates of the point geometry are of the pixels upper-left corner.';

-- ----------------------------
--  Function structure for public.st_pixelaspoint("public"."raster", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_pixelaspoint"("public"."raster", int4, int4);
CREATE FUNCTION "public"."st_pixelaspoint"(IN rast "public"."raster", IN x int4, IN y int4) RETURNS "public"."geometry" 
	AS $BODY$ SELECT ST_PointN(ST_ExteriorRing(geom), 1) FROM _st_pixelaspolygons($1, NULL, $2, $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_pixelaspoint"(IN rast "public"."raster", IN x int4, IN y int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_pixelaspoint"(IN rast "public"."raster", IN x int4, IN y int4) IS 'args: rast, columnx, rowy - Returns a point geometry of the pixels upper-left corner.';

-- ----------------------------
--  Function structure for public.raster_overleft("public"."raster", "public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."raster_overleft"("public"."raster", "public"."raster");
CREATE FUNCTION "public"."raster_overleft"(IN "public"."raster", IN "public"."raster") RETURNS "bool" 
	AS $BODY$select $1::geometry &< $2::geometry$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."raster_overleft"(IN "public"."raster", IN "public"."raster") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.raster_overright("public"."raster", "public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."raster_overright"("public"."raster", "public"."raster");
CREATE FUNCTION "public"."raster_overright"(IN "public"."raster", IN "public"."raster") RETURNS "bool" 
	AS $BODY$select $1::geometry &> $2::geometry$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."raster_overright"(IN "public"."raster", IN "public"."raster") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_pixelascentroids("public"."raster", int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_pixelascentroids"("public"."raster", int4, bool);
CREATE FUNCTION "public"."st_pixelascentroids"(IN rast "public"."raster", IN band int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, OUT geom "public"."geometry", OUT val float8, OUT x int4, OUT y int4) RETURNS SETOF "record" 
	AS $BODY$ SELECT ST_Centroid(geom), val, x, y FROM _st_pixelaspolygons($1, $2, NULL, NULL, $3) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_pixelascentroids"(IN rast "public"."raster", IN band int4, IN exclude_nodata_value bool, OUT geom "public"."geometry", OUT val float8, OUT x int4, OUT y int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_pixelascentroids"(IN rast "public"."raster", IN band int4, IN exclude_nodata_value bool, OUT geom "public"."geometry", OUT val float8, OUT x int4, OUT y int4) IS 'args: rast, band=1, exclude_nodata_value=TRUE - Returns the centroid (point geometry) for each pixel of a raster band along with the value, the X and the Y raster coordinates of each pixel. The point geometry is the centroid of the area represented by a pixel.';

-- ----------------------------
--  Function structure for public.st_pixelascentroid("public"."raster", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_pixelascentroid"("public"."raster", int4, int4);
CREATE FUNCTION "public"."st_pixelascentroid"(IN rast "public"."raster", IN x int4, IN y int4) RETURNS "public"."geometry" 
	AS $BODY$ SELECT ST_Centroid(geom) FROM _st_pixelaspolygons($1, NULL, $2, $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_pixelascentroid"(IN rast "public"."raster", IN x int4, IN y int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_pixelascentroid"(IN rast "public"."raster", IN x int4, IN y int4) IS 'args: rast, columnx, rowy - Returns the centroid (point geometry) of the area represented by a pixel.';

-- ----------------------------
--  Function structure for public._st_worldtorastercoord("public"."raster", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_worldtorastercoord"("public"."raster", float8, float8);
CREATE FUNCTION "public"."_st_worldtorastercoord"(IN rast "public"."raster", IN longitude float8 DEFAULT NULL::double precision, IN latitude float8 DEFAULT NULL::double precision, OUT columnx int4, OUT rowy int4) RETURNS "record" 
	AS '$libdir/rtpostgis-2.1','RASTER_worldToRasterCoord'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_worldtorastercoord"(IN rast "public"."raster", IN longitude float8, IN latitude float8, OUT columnx int4, OUT rowy int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_worldtorastercoord("public"."raster", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_worldtorastercoord"("public"."raster", float8, float8);
CREATE FUNCTION "public"."st_worldtorastercoord"(IN rast "public"."raster", IN longitude float8, IN latitude float8, OUT columnx int4, OUT rowy int4) RETURNS "record" 
	AS $BODY$ SELECT columnx, rowy FROM _st_worldtorastercoord($1, $2, $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_worldtorastercoord"(IN rast "public"."raster", IN longitude float8, IN latitude float8, OUT columnx int4, OUT rowy int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_worldtorastercoord"(IN rast "public"."raster", IN longitude float8, IN latitude float8, OUT columnx int4, OUT rowy int4) IS 'args: rast, longitude, latitude - Returns the upper left corner as column and row given geometric X and Y (longitude and latitude) or a point geometry expressed in the spatial reference coordinate system of the raster.';

-- ----------------------------
--  Function structure for public.st_worldtorastercoord("public"."raster", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_worldtorastercoord"("public"."raster", "public"."geometry");
CREATE FUNCTION "public"."st_worldtorastercoord"(IN rast "public"."raster", IN pt "public"."geometry", OUT columnx int4, OUT rowy int4) RETURNS "record" 
	AS $BODY$
	DECLARE
		rx integer;
		ry integer;
	BEGIN
		IF st_geometrytype(pt) != 'ST_Point' THEN
			RAISE EXCEPTION 'Attempting to compute raster coordinate with a non-point geometry';
		END IF;
		IF ST_SRID(rast) != ST_SRID(pt) THEN
			RAISE EXCEPTION 'Raster and geometry do not have the same SRID';
		END IF;

		SELECT rc.columnx AS x, rc.rowy AS y INTO columnx, rowy FROM _st_worldtorastercoord($1, st_x(pt), st_y(pt)) AS rc;
		RETURN;
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_worldtorastercoord"(IN rast "public"."raster", IN pt "public"."geometry", OUT columnx int4, OUT rowy int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_worldtorastercoord"(IN rast "public"."raster", IN pt "public"."geometry", OUT columnx int4, OUT rowy int4) IS 'args: rast, pt - Returns the upper left corner as column and row given geometric X and Y (longitude and latitude) or a point geometry expressed in the spatial reference coordinate system of the raster.';

-- ----------------------------
--  Function structure for public.st_worldtorastercoordx("public"."raster", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_worldtorastercoordx"("public"."raster", float8, float8);
CREATE FUNCTION "public"."st_worldtorastercoordx"(IN rast "public"."raster", IN xw float8, IN yw float8) RETURNS "int4" 
	AS $BODY$ SELECT columnx FROM _st_worldtorastercoord($1, $2, $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_worldtorastercoordx"(IN rast "public"."raster", IN xw float8, IN yw float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_worldtorastercoordx"(IN rast "public"."raster", IN xw float8, IN yw float8) IS 'args: rast, xw, yw - Returns the column in the raster of the point geometry (pt) or a X and Y world coordinate (xw, yw) represented in world spatial reference system of raster.';

-- ----------------------------
--  Function structure for public.st_worldtorastercoordx("public"."raster", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_worldtorastercoordx"("public"."raster", float8);
CREATE FUNCTION "public"."st_worldtorastercoordx"(IN rast "public"."raster", IN xw float8) RETURNS "int4" 
	AS $BODY$ SELECT columnx FROM _st_worldtorastercoord($1, $2, NULL) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_worldtorastercoordx"(IN rast "public"."raster", IN xw float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_worldtorastercoordx"(IN rast "public"."raster", IN xw float8) IS 'args: rast, xw - Returns the column in the raster of the point geometry (pt) or a X and Y world coordinate (xw, yw) represented in world spatial reference system of raster.';

-- ----------------------------
--  Function structure for public.st_worldtorastercoordx("public"."raster", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_worldtorastercoordx"("public"."raster", "public"."geometry");
CREATE FUNCTION "public"."st_worldtorastercoordx"(IN rast "public"."raster", IN pt "public"."geometry") RETURNS "int4" 
	AS $BODY$
	DECLARE
		xr integer;
	BEGIN
		IF ( st_geometrytype(pt) != 'ST_Point' ) THEN
			RAISE EXCEPTION 'Attempting to compute raster coordinate with a non-point geometry';
		END IF;
		IF ST_SRID(rast) != ST_SRID(pt) THEN
			RAISE EXCEPTION 'Raster and geometry do not have the same SRID';
		END IF;
		SELECT columnx INTO xr FROM _st_worldtorastercoord($1, st_x(pt), st_y(pt));
		RETURN xr;
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_worldtorastercoordx"(IN rast "public"."raster", IN pt "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_worldtorastercoordx"(IN rast "public"."raster", IN pt "public"."geometry") IS 'args: rast, pt - Returns the column in the raster of the point geometry (pt) or a X and Y world coordinate (xw, yw) represented in world spatial reference system of raster.';

-- ----------------------------
--  Function structure for public.st_worldtorastercoordy("public"."raster", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_worldtorastercoordy"("public"."raster", float8, float8);
CREATE FUNCTION "public"."st_worldtorastercoordy"(IN rast "public"."raster", IN xw float8, IN yw float8) RETURNS "int4" 
	AS $BODY$ SELECT rowy FROM _st_worldtorastercoord($1, $2, $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_worldtorastercoordy"(IN rast "public"."raster", IN xw float8, IN yw float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_worldtorastercoordy"(IN rast "public"."raster", IN xw float8, IN yw float8) IS 'args: rast, xw, yw - Returns the row in the raster of the point geometry (pt) or a X and Y world coordinate (xw, yw) represented in world spatial reference system of raster.';

-- ----------------------------
--  Function structure for public.st_worldtorastercoordy("public"."raster", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_worldtorastercoordy"("public"."raster", float8);
CREATE FUNCTION "public"."st_worldtorastercoordy"(IN rast "public"."raster", IN yw float8) RETURNS "int4" 
	AS $BODY$ SELECT rowy FROM _st_worldtorastercoord($1, NULL, $2) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_worldtorastercoordy"(IN rast "public"."raster", IN yw float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_worldtorastercoordy"(IN rast "public"."raster", IN yw float8) IS 'args: rast, xw - Returns the row in the raster of the point geometry (pt) or a X and Y world coordinate (xw, yw) represented in world spatial reference system of raster.';

-- ----------------------------
--  Function structure for public.st_worldtorastercoordy("public"."raster", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_worldtorastercoordy"("public"."raster", "public"."geometry");
CREATE FUNCTION "public"."st_worldtorastercoordy"(IN rast "public"."raster", IN pt "public"."geometry") RETURNS "int4" 
	AS $BODY$
	DECLARE
		yr integer;
	BEGIN
		IF ( st_geometrytype(pt) != 'ST_Point' ) THEN
			RAISE EXCEPTION 'Attempting to compute raster coordinate with a non-point geometry';
		END IF;
		IF ST_SRID(rast) != ST_SRID(pt) THEN
			RAISE EXCEPTION 'Raster and geometry do not have the same SRID';
		END IF;
		SELECT rowy INTO yr FROM _st_worldtorastercoord($1, st_x(pt), st_y(pt));
		RETURN yr;
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_worldtorastercoordy"(IN rast "public"."raster", IN pt "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_worldtorastercoordy"(IN rast "public"."raster", IN pt "public"."geometry") IS 'args: rast, pt - Returns the row in the raster of the point geometry (pt) or a X and Y world coordinate (xw, yw) represented in world spatial reference system of raster.';

-- ----------------------------
--  Function structure for public._st_rastertoworldcoord("public"."raster", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_rastertoworldcoord"("public"."raster", int4, int4);
CREATE FUNCTION "public"."_st_rastertoworldcoord"(IN rast "public"."raster", IN columnx int4 DEFAULT NULL::integer, IN rowy int4 DEFAULT NULL::integer, OUT longitude float8, OUT latitude float8) RETURNS "record" 
	AS '$libdir/rtpostgis-2.1','RASTER_rasterToWorldCoord'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_rastertoworldcoord"(IN rast "public"."raster", IN columnx int4, IN rowy int4, OUT longitude float8, OUT latitude float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_rastertoworldcoord("public"."raster", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_rastertoworldcoord"("public"."raster", int4, int4);
CREATE FUNCTION "public"."st_rastertoworldcoord"(IN rast "public"."raster", IN columnx int4, IN rowy int4, OUT longitude float8, OUT latitude float8) RETURNS "record" 
	AS $BODY$ SELECT longitude, latitude FROM _st_rastertoworldcoord($1, $2, $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_rastertoworldcoord"(IN rast "public"."raster", IN columnx int4, IN rowy int4, OUT longitude float8, OUT latitude float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_rastertoworldcoord"(IN rast "public"."raster", IN columnx int4, IN rowy int4, OUT longitude float8, OUT latitude float8) IS 'args: rast, xcolumn, yrow - Returns the rasters upper left corner as geometric X and Y (longitude and latitude) given a column and row. Column and row starts at 1.';

-- ----------------------------
--  Function structure for public.st_rastertoworldcoordx("public"."raster", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_rastertoworldcoordx"("public"."raster", int4, int4);
CREATE FUNCTION "public"."st_rastertoworldcoordx"(IN rast "public"."raster", IN xr int4, IN yr int4) RETURNS "float8" 
	AS $BODY$ SELECT longitude FROM _st_rastertoworldcoord($1, $2, $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_rastertoworldcoordx"(IN rast "public"."raster", IN xr int4, IN yr int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_rastertoworldcoordx"(IN rast "public"."raster", IN xr int4, IN yr int4) IS 'args: rast, xcolumn, yrow - Returns the geometric X coordinate upper left of a raster, column and row. Numbering of columns and rows starts at 1.';

-- ----------------------------
--  Function structure for public.st_rastertoworldcoordx("public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_rastertoworldcoordx"("public"."raster", int4);
CREATE FUNCTION "public"."st_rastertoworldcoordx"(IN rast "public"."raster", IN xr int4) RETURNS "float8" 
	AS $BODY$ SELECT longitude FROM _st_rastertoworldcoord($1, $2, NULL) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_rastertoworldcoordx"(IN rast "public"."raster", IN xr int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_rastertoworldcoordx"(IN rast "public"."raster", IN xr int4) IS 'args: rast, xcolumn - Returns the geometric X coordinate upper left of a raster, column and row. Numbering of columns and rows starts at 1.';

-- ----------------------------
--  Function structure for public.st_rastertoworldcoordy("public"."raster", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_rastertoworldcoordy"("public"."raster", int4, int4);
CREATE FUNCTION "public"."st_rastertoworldcoordy"(IN rast "public"."raster", IN xr int4, IN yr int4) RETURNS "float8" 
	AS $BODY$ SELECT latitude FROM _st_rastertoworldcoord($1, $2, $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_rastertoworldcoordy"(IN rast "public"."raster", IN xr int4, IN yr int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_rastertoworldcoordy"(IN rast "public"."raster", IN xr int4, IN yr int4) IS 'args: rast, xcolumn, yrow - Returns the geometric Y coordinate upper left corner of a raster, column and row. Numbering of columns and rows starts at 1.';

-- ----------------------------
--  Function structure for public.st_rastertoworldcoordy("public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_rastertoworldcoordy"("public"."raster", int4);
CREATE FUNCTION "public"."st_rastertoworldcoordy"(IN rast "public"."raster", IN yr int4) RETURNS "float8" 
	AS $BODY$ SELECT latitude FROM _st_rastertoworldcoord($1, NULL, $2) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_rastertoworldcoordy"(IN rast "public"."raster", IN yr int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_rastertoworldcoordy"(IN rast "public"."raster", IN yr int4) IS 'args: rast, yrow - Returns the geometric Y coordinate upper left corner of a raster, column and row. Numbering of columns and rows starts at 1.';

-- ----------------------------
--  Function structure for public.st_minpossiblevalue(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_minpossiblevalue"(text);
CREATE FUNCTION "public"."st_minpossiblevalue"(IN pixeltype text) RETURNS "float8" 
	AS '$libdir/rtpostgis-2.1','RASTER_minPossibleValue'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_minpossiblevalue"(IN pixeltype text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_asbinary("public"."raster", bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asbinary"("public"."raster", bool);
CREATE FUNCTION "public"."st_asbinary"(IN "public"."raster", IN outasin bool DEFAULT false) RETURNS "bytea" 
	AS '$libdir/rtpostgis-2.1','RASTER_to_binary'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asbinary"(IN "public"."raster", IN outasin bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_asbinary"(IN "public"."raster", IN outasin bool) IS 'args: rast, outasin=FALSE - Return the Well-Known Binary (WKB) representation of the raster without SRID meta data.';

-- ----------------------------
--  Function structure for public.raster_right("public"."raster", "public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."raster_right"("public"."raster", "public"."raster");
CREATE FUNCTION "public"."raster_right"(IN "public"."raster", IN "public"."raster") RETURNS "bool" 
	AS $BODY$select $1::geometry >> $2::geometry$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."raster_right"(IN "public"."raster", IN "public"."raster") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.raster_overabove("public"."raster", "public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."raster_overabove"("public"."raster", "public"."raster");
CREATE FUNCTION "public"."raster_overabove"(IN "public"."raster", IN "public"."raster") RETURNS "bool" 
	AS $BODY$select $1::geometry |&> $2::geometry$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."raster_overabove"(IN "public"."raster", IN "public"."raster") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.raster_overbelow("public"."raster", "public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."raster_overbelow"("public"."raster", "public"."raster");
CREATE FUNCTION "public"."raster_overbelow"(IN "public"."raster", IN "public"."raster") RETURNS "bool" 
	AS $BODY$select $1::geometry &<| $2::geometry$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."raster_overbelow"(IN "public"."raster", IN "public"."raster") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.raster_above("public"."raster", "public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."raster_above"("public"."raster", "public"."raster");
CREATE FUNCTION "public"."raster_above"(IN "public"."raster", IN "public"."raster") RETURNS "bool" 
	AS $BODY$select $1::geometry |>> $2::geometry$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."raster_above"(IN "public"."raster", IN "public"."raster") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.raster_below("public"."raster", "public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."raster_below"("public"."raster", "public"."raster");
CREATE FUNCTION "public"."raster_below"(IN "public"."raster", IN "public"."raster") RETURNS "bool" 
	AS $BODY$select $1::geometry <<| $2::geometry$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."raster_below"(IN "public"."raster", IN "public"."raster") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.raster_same("public"."raster", "public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."raster_same"("public"."raster", "public"."raster");
CREATE FUNCTION "public"."raster_same"(IN "public"."raster", IN "public"."raster") RETURNS "bool" 
	AS $BODY$select $1::geometry ~= $2::geometry$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."raster_same"(IN "public"."raster", IN "public"."raster") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.raster_contained("public"."raster", "public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."raster_contained"("public"."raster", "public"."raster");
CREATE FUNCTION "public"."raster_contained"(IN "public"."raster", IN "public"."raster") RETURNS "bool" 
	AS $BODY$select $1::geometry @ $2::geometry$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."raster_contained"(IN "public"."raster", IN "public"."raster") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.raster_contain("public"."raster", "public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."raster_contain"("public"."raster", "public"."raster");
CREATE FUNCTION "public"."raster_contain"(IN "public"."raster", IN "public"."raster") RETURNS "bool" 
	AS $BODY$select $1::geometry ~ $2::geometry$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."raster_contain"(IN "public"."raster", IN "public"."raster") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.raster_overlap("public"."raster", "public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."raster_overlap"("public"."raster", "public"."raster");
CREATE FUNCTION "public"."raster_overlap"(IN "public"."raster", IN "public"."raster") RETURNS "bool" 
	AS $BODY$select $1::geometry && $2::geometry$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."raster_overlap"(IN "public"."raster", IN "public"."raster") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.raster_geometry_contain("public"."raster", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."raster_geometry_contain"("public"."raster", "public"."geometry");
CREATE FUNCTION "public"."raster_geometry_contain"(IN "public"."raster", IN "public"."geometry") RETURNS "bool" 
	AS $BODY$select $1::geometry ~ $2$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."raster_geometry_contain"(IN "public"."raster", IN "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.raster_geometry_overlap("public"."raster", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."raster_geometry_overlap"("public"."raster", "public"."geometry");
CREATE FUNCTION "public"."raster_geometry_overlap"(IN "public"."raster", IN "public"."geometry") RETURNS "bool" 
	AS $BODY$select $1::geometry && $2$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."raster_geometry_overlap"(IN "public"."raster", IN "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry_raster_contain("public"."geometry", "public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_raster_contain"("public"."geometry", "public"."raster");
CREATE FUNCTION "public"."geometry_raster_contain"(IN "public"."geometry", IN "public"."raster") RETURNS "bool" 
	AS $BODY$select $1 ~ $2::geometry$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_raster_contain"(IN "public"."geometry", IN "public"."raster") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.geometry_raster_overlap("public"."geometry", "public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_raster_overlap"("public"."geometry", "public"."raster");
CREATE FUNCTION "public"."geometry_raster_overlap"(IN "public"."geometry", IN "public"."raster") RETURNS "bool" 
	AS $BODY$select $1 && $2::geometry$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_raster_overlap"(IN "public"."geometry", IN "public"."raster") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_samealignment("public"."raster", "public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_samealignment"("public"."raster", "public"."raster");
CREATE FUNCTION "public"."st_samealignment"(IN rast1 "public"."raster", IN rast2 "public"."raster") RETURNS "bool" 
	AS '$libdir/rtpostgis-2.1','RASTER_sameAlignment'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_samealignment"(IN rast1 "public"."raster", IN rast2 "public"."raster") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_samealignment"(IN rast1 "public"."raster", IN rast2 "public"."raster") IS 'args: rastA, rastB - Returns text stating if rasters are aligned and if not aligned, a reason why.';

-- ----------------------------
--  Function structure for public.st_samealignment(float8, float8, float8, float8, float8, float8, float8, float8, float8, float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_samealignment"(float8, float8, float8, float8, float8, float8, float8, float8, float8, float8, float8, float8);
CREATE FUNCTION "public"."st_samealignment"(IN ulx1 float8, IN uly1 float8, IN scalex1 float8, IN scaley1 float8, IN skewx1 float8, IN skewy1 float8, IN ulx2 float8, IN uly2 float8, IN scalex2 float8, IN scaley2 float8, IN skewx2 float8, IN skewy2 float8) RETURNS "bool" 
	AS $BODY$ SELECT st_samealignment(st_makeemptyraster(1, 1, $1, $2, $3, $4, $5, $6), st_makeemptyraster(1, 1, $7, $8, $9, $10, $11, $12)) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_samealignment"(IN ulx1 float8, IN uly1 float8, IN scalex1 float8, IN scaley1 float8, IN skewx1 float8, IN skewy1 float8, IN ulx2 float8, IN uly2 float8, IN scalex2 float8, IN scaley2 float8, IN skewx2 float8, IN skewy2 float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_samealignment"(IN ulx1 float8, IN uly1 float8, IN scalex1 float8, IN scaley1 float8, IN skewx1 float8, IN skewy1 float8, IN ulx2 float8, IN uly2 float8, IN scalex2 float8, IN scaley2 float8, IN skewx2 float8, IN skewy2 float8) IS 'args: ulx1, uly1, scalex1, scaley1, skewx1, skewy1, ulx2, uly2, scalex2, scaley2, skewx2, skewy2 - Returns true if rasters have same skew, scale, spatial ref and false if they dont with notice detailing issue.';

-- ----------------------------
--  Function structure for public._st_samealignment_transfn("public"."agg_samealignment", "public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_samealignment_transfn"("public"."agg_samealignment", "public"."raster");
CREATE FUNCTION "public"."_st_samealignment_transfn"(IN agg "public"."agg_samealignment", IN rast "public"."raster") RETURNS "public"."agg_samealignment" 
	AS $BODY$
	DECLARE
		m record;
		aligned boolean;
	BEGIN
		IF agg IS NULL THEN
			agg.refraster := NULL;
			agg.aligned := NULL;
		END IF;

		IF rast IS NULL THEN
			agg.aligned := NULL;
		ELSE
			IF agg.refraster IS NULL THEN
				m := ST_Metadata(rast);
				agg.refraster := ST_MakeEmptyRaster(1, 1, m.upperleftx, m.upperlefty, m.scalex, m.scaley, m.skewx, m.skewy, m.srid);
				agg.aligned := TRUE;
			ELSE IF agg.aligned IS TRUE THEN
					agg.aligned := ST_SameAlignment(agg.refraster, rast);
				END IF;
			END IF;
		END IF;
		RETURN agg;
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_samealignment_transfn"(IN agg "public"."agg_samealignment", IN rast "public"."raster") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._st_samealignment_finalfn("public"."agg_samealignment")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_samealignment_finalfn"("public"."agg_samealignment");
CREATE FUNCTION "public"."_st_samealignment_finalfn"(IN agg "public"."agg_samealignment") RETURNS "bool" 
	AS $BODY$ SELECT $1.aligned $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_samealignment_finalfn"(IN agg "public"."agg_samealignment") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_notsamealignmentreason("public"."raster", "public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_notsamealignmentreason"("public"."raster", "public"."raster");
CREATE FUNCTION "public"."st_notsamealignmentreason"(IN rast1 "public"."raster", IN rast2 "public"."raster") RETURNS "text" 
	AS '$libdir/rtpostgis-2.1','RASTER_notSameAlignmentReason'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_notsamealignmentreason"(IN rast1 "public"."raster", IN rast2 "public"."raster") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_iscoveragetile("public"."raster", "public"."raster", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_iscoveragetile"("public"."raster", "public"."raster", int4, int4);
CREATE FUNCTION "public"."st_iscoveragetile"(IN rast "public"."raster", IN coverage "public"."raster", IN tilewidth int4, IN tileheight int4) RETURNS "bool" 
	AS $BODY$
	DECLARE
		_rastmeta record;
		_covmeta record;
		cr record;
		max integer[];
		tile integer[];
		edge integer[];
	BEGIN
		IF NOT ST_SameAlignment(rast, coverage) THEN
			RAISE NOTICE 'Raster and coverage are not aligned';
			RETURN FALSE;
		END IF;

		_rastmeta := ST_Metadata(rast);
		_covmeta := ST_Metadata(coverage);

		-- get coverage grid coordinates of upper-left of rast
		cr := ST_WorldToRasterCoord(coverage, _rastmeta.upperleftx, _rastmeta.upperlefty);

		-- rast is not part of coverage
		IF
			(cr.columnx < 1 OR cr.columnx > _covmeta.width) OR
			(cr.rowy < 1 OR cr.rowy > _covmeta.height)
		THEN
			RAISE NOTICE 'Raster is not in the coverage';
			RETURN FALSE;
		END IF;

		-- rast isn't on the coverage's grid
		IF
			((cr.columnx - 1) % tilewidth != 0) OR
			((cr.rowy - 1) % tileheight != 0)
		THEN
			RAISE NOTICE 'Raster is not aligned to tile grid of coverage';
			RETURN FALSE;
		END IF;

		-- max # of tiles on X and Y for coverage
		max[0] := ceil(_covmeta.width::double precision / tilewidth::double precision)::integer;
		max[1] := ceil(_covmeta.height::double precision / tileheight::double precision)::integer;

		-- tile # of rast in coverge
		tile[0] := (cr.columnx / tilewidth) + 1;
		tile[1] := (cr.rowy / tileheight) + 1;

		-- inner tile
		IF tile[0] < max[0] AND tile[1] < max[1] THEN
			IF
				(_rastmeta.width != tilewidth) OR
				(_rastmeta.height != tileheight)
			THEN
				RAISE NOTICE 'Raster width/height is invalid for interior tile of coverage';
				RETURN FALSE;
			ELSE
				RETURN TRUE;
			END IF;
		END IF;

		-- edge tile

		-- edge tile may have same size as inner tile
		IF 
			(_rastmeta.width = tilewidth) AND
			(_rastmeta.height = tileheight)
		THEN
			RETURN TRUE;
		END IF;

		-- get edge tile width and height
		edge[0] := _covmeta.width - ((max[0] - 1) * tilewidth);
		edge[1] := _covmeta.height - ((max[1] - 1) * tileheight);

		-- edge tile not of expected tile size
		-- right and bottom
		IF tile[0] = max[0] AND tile[1] = max[1] THEN
			IF
				_rastmeta.width != edge[0] OR
				_rastmeta.height != edge[1]
			THEN
				RAISE NOTICE 'Raster width/height is invalid for right-most AND bottom-most tile of coverage';
				RETURN FALSE;
			END IF;
		ELSEIF tile[0] = max[0] THEN
			IF
				_rastmeta.width != edge[0] OR
				_rastmeta.height != tileheight
			THEN
				RAISE NOTICE 'Raster width/height is invalid for right-most tile of coverage';
				RETURN FALSE;
			END IF;
		ELSE
			IF
				_rastmeta.width != tilewidth OR
				_rastmeta.height != edge[1]
			THEN
				RAISE NOTICE 'Raster width/height is invalid for bottom-most tile of coverage';
				RETURN FALSE;
			END IF;
		END IF;

		RETURN TRUE;
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_iscoveragetile"(IN rast "public"."raster", IN coverage "public"."raster", IN tilewidth int4, IN tileheight int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._st_intersects("public"."raster", int4, "public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_intersects"("public"."raster", int4, "public"."raster", int4);
CREATE FUNCTION "public"."_st_intersects"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) RETURNS "bool" 
	AS '$libdir/rtpostgis-2.1','RASTER_intersects'
	LANGUAGE c
	COST 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_intersects"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_intersects("public"."raster", int4, "public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_intersects"("public"."raster", int4, "public"."raster", int4);
CREATE FUNCTION "public"."st_intersects"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) RETURNS "bool" 
	AS $BODY$ SELECT $1 && $3 AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN _st_intersects(st_convexhull($1), st_convexhull($3)) ELSE _st_intersects($1, $2, $3, $4) END $BODY$
	LANGUAGE sql
	COST 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_intersects"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_intersects"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) IS 'args: rastA, nbandA, rastB, nbandB - Return true if raster rastA spatially intersects raster rastB.';

-- ----------------------------
--  Function structure for public.st_intersects("public"."raster", "public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_intersects"("public"."raster", "public"."raster");
CREATE FUNCTION "public"."st_intersects"(IN rast1 "public"."raster", IN rast2 "public"."raster") RETURNS "bool" 
	AS $BODY$ SELECT st_intersects($1, NULL::integer, $2, NULL::integer) $BODY$
	LANGUAGE sql
	COST 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_intersects"(IN rast1 "public"."raster", IN rast2 "public"."raster") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_intersects"(IN rast1 "public"."raster", IN rast2 "public"."raster") IS 'args: rastA, rastB - Return true if raster rastA spatially intersects raster rastB.';

-- ----------------------------
--  Function structure for public._st_intersects("public"."geometry", "public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_intersects"("public"."geometry", "public"."raster", int4);
CREATE FUNCTION "public"."_st_intersects"(IN geom "public"."geometry", IN rast "public"."raster", IN nband int4 DEFAULT NULL::integer) RETURNS "bool" 
	AS $BODY$
	DECLARE
		hasnodata boolean := TRUE;
		nodata float8 := 0.0;
		convexhull geometry;
		geomintersect geometry;
		x1w double precision := 0.0;
		x2w double precision := 0.0;
		y1w double precision := 0.0;
		y2w double precision := 0.0;
		x1 integer := 0;
		x2 integer := 0;
		x3 integer := 0;
		x4 integer := 0;
		y1 integer := 0;
		y2 integer := 0;
		y3 integer := 0;
		y4 integer := 0;
		x integer := 0;
		y integer := 0;
		xinc integer := 0;
		yinc integer := 0;
		pixelval double precision;
		bintersect boolean := FALSE;
		gtype text;
		scale float8;
		w int;
		h int;
	BEGIN
		IF ST_SRID(rast) != ST_SRID(geom) THEN
			RAISE EXCEPTION 'Raster and geometry do not have the same SRID';
		END IF;

		convexhull := ST_ConvexHull(rast);
		IF nband IS NOT NULL THEN
			SELECT CASE WHEN bmd.nodatavalue IS NULL THEN FALSE ELSE NULL END INTO hasnodata FROM ST_BandMetaData(rast, nband) AS bmd;
		END IF;

		IF ST_Intersects(geom, convexhull) IS NOT TRUE THEN
			RETURN FALSE;
		ELSEIF nband IS NULL OR hasnodata IS FALSE THEN
			RETURN TRUE;
		END IF;

		-- Get the intersection between with the geometry.
		-- We will search for withvalue pixel only in this area.
		geomintersect := st_intersection(geom, convexhull);

--RAISE NOTICE 'geomintersect=%', st_astext(geomintersect);

		-- If the intersection is empty, return false
		IF st_isempty(geomintersect) THEN
			RETURN FALSE;
		END IF;

		-- We create a minimalistic buffer around the intersection in order to scan every pixels
		-- that would touch the edge or intersect with the geometry
		SELECT sqrt(scalex * scalex + skewy * skewy), width, height INTO scale, w, h FROM ST_Metadata(rast);
		IF scale != 0 THEN
			geomintersect := st_buffer(geomintersect, scale / 1000000);
		END IF;

--RAISE NOTICE 'geomintersect2=%', st_astext(geomintersect);

		-- Find the world coordinates of the bounding box of the intersecting area
		x1w := st_xmin(geomintersect);
		y1w := st_ymin(geomintersect);
		x2w := st_xmax(geomintersect);
		y2w := st_ymax(geomintersect);
		nodata := st_bandnodatavalue(rast, nband);

--RAISE NOTICE 'x1w=%, y1w=%, x2w=%, y2w=%', x1w, y1w, x2w, y2w;

		-- Convert world coordinates to raster coordinates
		x1 := st_worldtorastercoordx(rast, x1w, y1w);
		y1 := st_worldtorastercoordy(rast, x1w, y1w);
		x2 := st_worldtorastercoordx(rast, x2w, y1w);
		y2 := st_worldtorastercoordy(rast, x2w, y1w);
		x3 := st_worldtorastercoordx(rast, x1w, y2w);
		y3 := st_worldtorastercoordy(rast, x1w, y2w);
		x4 := st_worldtorastercoordx(rast, x2w, y2w);
		y4 := st_worldtorastercoordy(rast, x2w, y2w);

--RAISE NOTICE 'x1=%, y1=%, x2=%, y2=%, x3=%, y3=%, x4=%, y4=%', x1, y1, x2, y2, x3, y3, x4, y4;

		-- Order the raster coordinates for the upcoming FOR loop.
		x1 := int4smaller(int4smaller(int4smaller(x1, x2), x3), x4);
		y1 := int4smaller(int4smaller(int4smaller(y1, y2), y3), y4);
		x2 := int4larger(int4larger(int4larger(x1, x2), x3), x4);
		y2 := int4larger(int4larger(int4larger(y1, y2), y3), y4);

		-- Make sure the range is not lower than 1.
		-- This can happen when world coordinate are exactly on the left border
		-- of the raster and that they do not span on more than one pixel.
		x1 := int4smaller(int4larger(x1, 1), w);
		y1 := int4smaller(int4larger(y1, 1), h);

		-- Also make sure the range does not exceed the width and height of the raster.
		-- This can happen when world coordinate are exactly on the lower right border
		-- of the raster.
		x2 := int4smaller(x2, w);
		y2 := int4smaller(y2, h);

--RAISE NOTICE 'x1=%, y1=%, x2=%, y2=%', x1, y1, x2, y2;

		-- Search exhaustively for withvalue pixel on a moving 3x3 grid
		-- (very often more efficient than searching on a mere 1x1 grid)
		FOR xinc in 0..2 LOOP
			FOR yinc in 0..2 LOOP
				FOR x IN x1+xinc..x2 BY 3 LOOP
					FOR y IN y1+yinc..y2 BY 3 LOOP
						-- Check first if the pixel intersects with the geometry. Often many won't.
						bintersect := NOT st_isempty(st_intersection(st_pixelaspolygon(rast, x, y), geom));

						IF bintersect THEN
							-- If the pixel really intersects, check its value. Return TRUE if with value.
							pixelval := st_value(rast, nband, x, y);
							IF pixelval != nodata THEN
								RETURN TRUE;
							END IF;
						END IF;
					END LOOP;
				END LOOP;
			END LOOP;
		END LOOP;

		RETURN FALSE;
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_intersects"(IN geom "public"."geometry", IN rast "public"."raster", IN nband int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_intersects("public"."geometry", "public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_intersects"("public"."geometry", "public"."raster", int4);
CREATE FUNCTION "public"."st_intersects"(IN geom "public"."geometry", IN rast "public"."raster", IN nband int4 DEFAULT NULL::integer) RETURNS "bool" 
	AS $BODY$ SELECT $1 && $2::geometry AND _st_intersects($1, $2, $3); $BODY$
	LANGUAGE sql
	COST 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_intersects"(IN geom "public"."geometry", IN rast "public"."raster", IN nband int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_intersects"(IN geom "public"."geometry", IN rast "public"."raster", IN nband int4) IS 'args: geommin, rast, nband=NULL - Return true if raster rastA spatially intersects raster rastB.';

-- ----------------------------
--  Function structure for public.st_intersects("public"."raster", "public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_intersects"("public"."raster", "public"."geometry", int4);
CREATE FUNCTION "public"."st_intersects"(IN rast "public"."raster", IN geom "public"."geometry", IN nband int4 DEFAULT NULL::integer) RETURNS "bool" 
	AS $BODY$ SELECT $1::geometry && $2 AND _st_intersects($2, $1, $3) $BODY$
	LANGUAGE sql
	COST 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_intersects"(IN rast "public"."raster", IN geom "public"."geometry", IN nband int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_intersects"(IN rast "public"."raster", IN geom "public"."geometry", IN nband int4) IS 'args: rast, geommin, nband=NULL - Return true if raster rastA spatially intersects raster rastB.';

-- ----------------------------
--  Function structure for public.st_intersects("public"."raster", int4, "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_intersects"("public"."raster", int4, "public"."geometry");
CREATE FUNCTION "public"."st_intersects"(IN rast "public"."raster", IN nband int4, IN geom "public"."geometry") RETURNS "bool" 
	AS $BODY$ SELECT $1::geometry && $3 AND _st_intersects($3, $1, $2) $BODY$
	LANGUAGE sql
	COST 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_intersects"(IN rast "public"."raster", IN nband int4, IN geom "public"."geometry") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_intersects"(IN rast "public"."raster", IN nband int4, IN geom "public"."geometry") IS 'args: rast, nband, geommin - Return true if raster rastA spatially intersects raster rastB.';

-- ----------------------------
--  Function structure for public._st_overlaps("public"."raster", int4, "public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_overlaps"("public"."raster", int4, "public"."raster", int4);
CREATE FUNCTION "public"."_st_overlaps"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) RETURNS "bool" 
	AS '$libdir/rtpostgis-2.1','RASTER_overlaps'
	LANGUAGE c
	COST 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_overlaps"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_overlaps("public"."raster", int4, "public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_overlaps"("public"."raster", int4, "public"."raster", int4);
CREATE FUNCTION "public"."st_overlaps"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) RETURNS "bool" 
	AS $BODY$ SELECT $1 && $3 AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN _st_overlaps(st_convexhull($1), st_convexhull($3)) ELSE _st_overlaps($1, $2, $3, $4) END $BODY$
	LANGUAGE sql
	COST 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_overlaps"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_overlaps"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) IS 'args: rastA, nbandA, rastB, nbandB - Return true if raster rastA and rastB intersect but one does not completely contain the other.';

-- ----------------------------
--  Function structure for public.st_overlaps("public"."raster", "public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_overlaps"("public"."raster", "public"."raster");
CREATE FUNCTION "public"."st_overlaps"(IN rast1 "public"."raster", IN rast2 "public"."raster") RETURNS "bool" 
	AS $BODY$ SELECT st_overlaps($1, NULL::integer, $2, NULL::integer) $BODY$
	LANGUAGE sql
	COST 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_overlaps"(IN rast1 "public"."raster", IN rast2 "public"."raster") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_overlaps"(IN rast1 "public"."raster", IN rast2 "public"."raster") IS 'args: rastA, rastB - Return true if raster rastA and rastB intersect but one does not completely contain the other.';

-- ----------------------------
--  Function structure for public._st_touches("public"."raster", int4, "public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_touches"("public"."raster", int4, "public"."raster", int4);
CREATE FUNCTION "public"."_st_touches"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) RETURNS "bool" 
	AS '$libdir/rtpostgis-2.1','RASTER_touches'
	LANGUAGE c
	COST 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_touches"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_touches("public"."raster", int4, "public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_touches"("public"."raster", int4, "public"."raster", int4);
CREATE FUNCTION "public"."st_touches"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) RETURNS "bool" 
	AS $BODY$ SELECT $1 && $3 AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN _st_touches(st_convexhull($1), st_convexhull($3)) ELSE _st_touches($1, $2, $3, $4) END $BODY$
	LANGUAGE sql
	COST 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_touches"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_touches"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) IS 'args: rastA, nbandA, rastB, nbandB - Return true if raster rastA and rastB have at least one point in common but their interiors do not intersect.';

-- ----------------------------
--  Function structure for public.st_touches("public"."raster", "public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_touches"("public"."raster", "public"."raster");
CREATE FUNCTION "public"."st_touches"(IN rast1 "public"."raster", IN rast2 "public"."raster") RETURNS "bool" 
	AS $BODY$ SELECT st_touches($1, NULL::integer, $2, NULL::integer) $BODY$
	LANGUAGE sql
	COST 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_touches"(IN rast1 "public"."raster", IN rast2 "public"."raster") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_touches"(IN rast1 "public"."raster", IN rast2 "public"."raster") IS 'args: rastA, rastB - Return true if raster rastA and rastB have at least one point in common but their interiors do not intersect.';

-- ----------------------------
--  Function structure for public._st_contains("public"."raster", int4, "public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_contains"("public"."raster", int4, "public"."raster", int4);
CREATE FUNCTION "public"."_st_contains"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) RETURNS "bool" 
	AS '$libdir/rtpostgis-2.1','RASTER_contains'
	LANGUAGE c
	COST 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_contains"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_contains("public"."raster", int4, "public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_contains"("public"."raster", int4, "public"."raster", int4);
CREATE FUNCTION "public"."st_contains"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) RETURNS "bool" 
	AS $BODY$ SELECT $1 && $3 AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN _st_contains(st_convexhull($1), st_convexhull($3)) ELSE _st_contains($1, $2, $3, $4) END $BODY$
	LANGUAGE sql
	COST 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_contains"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_contains"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) IS 'args: rastA, nbandA, rastB, nbandB - Return true if no points of raster rastB lie in the exterior of raster rastA and at least one point of the interior of rastB lies in the interior of rastA.';

-- ----------------------------
--  Function structure for public.st_contains("public"."raster", "public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_contains"("public"."raster", "public"."raster");
CREATE FUNCTION "public"."st_contains"(IN rast1 "public"."raster", IN rast2 "public"."raster") RETURNS "bool" 
	AS $BODY$ SELECT st_contains($1, NULL::integer, $2, NULL::integer) $BODY$
	LANGUAGE sql
	COST 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_contains"(IN rast1 "public"."raster", IN rast2 "public"."raster") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_contains"(IN rast1 "public"."raster", IN rast2 "public"."raster") IS 'args: rastA, rastB - Return true if no points of raster rastB lie in the exterior of raster rastA and at least one point of the interior of rastB lies in the interior of rastA.';

-- ----------------------------
--  Function structure for public._st_containsproperly("public"."raster", int4, "public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_containsproperly"("public"."raster", int4, "public"."raster", int4);
CREATE FUNCTION "public"."_st_containsproperly"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) RETURNS "bool" 
	AS '$libdir/rtpostgis-2.1','RASTER_containsProperly'
	LANGUAGE c
	COST 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_containsproperly"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_containsproperly("public"."raster", int4, "public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_containsproperly"("public"."raster", int4, "public"."raster", int4);
CREATE FUNCTION "public"."st_containsproperly"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) RETURNS "bool" 
	AS $BODY$ SELECT $1 && $3 AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN _st_containsproperly(st_convexhull($1), st_convexhull($3)) ELSE _st_containsproperly($1, $2, $3, $4) END $BODY$
	LANGUAGE sql
	COST 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_containsproperly"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_containsproperly"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) IS 'args: rastA, nbandA, rastB, nbandB - Return true if rastB intersects the interior of rastA but not the boundary or exterior of rastA.';

-- ----------------------------
--  Function structure for public.st_containsproperly("public"."raster", "public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_containsproperly"("public"."raster", "public"."raster");
CREATE FUNCTION "public"."st_containsproperly"(IN rast1 "public"."raster", IN rast2 "public"."raster") RETURNS "bool" 
	AS $BODY$ SELECT st_containsproperly($1, NULL::integer, $2, NULL::integer) $BODY$
	LANGUAGE sql
	COST 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_containsproperly"(IN rast1 "public"."raster", IN rast2 "public"."raster") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_containsproperly"(IN rast1 "public"."raster", IN rast2 "public"."raster") IS 'args: rastA, rastB - Return true if rastB intersects the interior of rastA but not the boundary or exterior of rastA.';

-- ----------------------------
--  Function structure for public._st_covers("public"."raster", int4, "public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_covers"("public"."raster", int4, "public"."raster", int4);
CREATE FUNCTION "public"."_st_covers"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) RETURNS "bool" 
	AS '$libdir/rtpostgis-2.1','RASTER_covers'
	LANGUAGE c
	COST 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_covers"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_covers("public"."raster", int4, "public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_covers"("public"."raster", int4, "public"."raster", int4);
CREATE FUNCTION "public"."st_covers"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) RETURNS "bool" 
	AS $BODY$ SELECT $1 && $3 AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN _st_covers(st_convexhull($1), st_convexhull($3)) ELSE _st_covers($1, $2, $3, $4) END $BODY$
	LANGUAGE sql
	COST 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_covers"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_covers"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) IS 'args: rastA, nbandA, rastB, nbandB - Return true if no points of raster rastB lie outside raster rastA.';

-- ----------------------------
--  Function structure for public.st_covers("public"."raster", "public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_covers"("public"."raster", "public"."raster");
CREATE FUNCTION "public"."st_covers"(IN rast1 "public"."raster", IN rast2 "public"."raster") RETURNS "bool" 
	AS $BODY$ SELECT st_covers($1, NULL::integer, $2, NULL::integer) $BODY$
	LANGUAGE sql
	COST 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_covers"(IN rast1 "public"."raster", IN rast2 "public"."raster") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_covers"(IN rast1 "public"."raster", IN rast2 "public"."raster") IS 'args: rastA, rastB - Return true if no points of raster rastB lie outside raster rastA.';

-- ----------------------------
--  Function structure for public._st_coveredby("public"."raster", int4, "public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_coveredby"("public"."raster", int4, "public"."raster", int4);
CREATE FUNCTION "public"."_st_coveredby"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) RETURNS "bool" 
	AS '$libdir/rtpostgis-2.1','RASTER_coveredby'
	LANGUAGE c
	COST 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_coveredby"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_coveredby("public"."raster", int4, "public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_coveredby"("public"."raster", int4, "public"."raster", int4);
CREATE FUNCTION "public"."st_coveredby"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) RETURNS "bool" 
	AS $BODY$ SELECT $1 && $3 AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN _st_coveredby(st_convexhull($1), st_convexhull($3)) ELSE _st_coveredby($1, $2, $3, $4) END $BODY$
	LANGUAGE sql
	COST 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_coveredby"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_coveredby"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) IS 'args: rastA, nbandA, rastB, nbandB - Return true if no points of raster rastA lie outside raster rastB.';

-- ----------------------------
--  Function structure for public.st_coveredby("public"."raster", "public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_coveredby"("public"."raster", "public"."raster");
CREATE FUNCTION "public"."st_coveredby"(IN rast1 "public"."raster", IN rast2 "public"."raster") RETURNS "bool" 
	AS $BODY$ SELECT st_coveredby($1, NULL::integer, $2, NULL::integer) $BODY$
	LANGUAGE sql
	COST 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_coveredby"(IN rast1 "public"."raster", IN rast2 "public"."raster") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_coveredby"(IN rast1 "public"."raster", IN rast2 "public"."raster") IS 'args: rastA, rastB - Return true if no points of raster rastA lie outside raster rastB.';

-- ----------------------------
--  Function structure for public._st_within("public"."raster", int4, "public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_within"("public"."raster", int4, "public"."raster", int4);
CREATE FUNCTION "public"."_st_within"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) RETURNS "bool" 
	AS $BODY$ SELECT _st_contains($3, $4, $1, $2) $BODY$
	LANGUAGE sql
	COST 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_within"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_within("public"."raster", int4, "public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_within"("public"."raster", int4, "public"."raster", int4);
CREATE FUNCTION "public"."st_within"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) RETURNS "bool" 
	AS $BODY$ SELECT $1 && $3 AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN _st_within(st_convexhull($1), st_convexhull($3)) ELSE _st_contains($3, $4, $1, $2) END $BODY$
	LANGUAGE sql
	COST 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_within"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_within"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) IS 'args: rastA, nbandA, rastB, nbandB - Return true if no points of raster rastA lie in the exterior of raster rastB and at least one point of the interior of rastA lies in the interior of rastB.';

-- ----------------------------
--  Function structure for public.st_within("public"."raster", "public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_within"("public"."raster", "public"."raster");
CREATE FUNCTION "public"."st_within"(IN rast1 "public"."raster", IN rast2 "public"."raster") RETURNS "bool" 
	AS $BODY$ SELECT st_within($1, NULL::integer, $2, NULL::integer) $BODY$
	LANGUAGE sql
	COST 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_within"(IN rast1 "public"."raster", IN rast2 "public"."raster") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_within"(IN rast1 "public"."raster", IN rast2 "public"."raster") IS 'args: rastA, rastB - Return true if no points of raster rastA lie in the exterior of raster rastB and at least one point of the interior of rastA lies in the interior of rastB.';

-- ----------------------------
--  Function structure for public._st_dwithin("public"."raster", int4, "public"."raster", int4, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_dwithin"("public"."raster", int4, "public"."raster", int4, float8);
CREATE FUNCTION "public"."_st_dwithin"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4, IN distance float8) RETURNS "bool" 
	AS '$libdir/rtpostgis-2.1','RASTER_dwithin'
	LANGUAGE c
	COST 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_dwithin"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4, IN distance float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_dwithin("public"."raster", int4, "public"."raster", int4, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_dwithin"("public"."raster", int4, "public"."raster", int4, float8);
CREATE FUNCTION "public"."st_dwithin"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4, IN distance float8) RETURNS "bool" 
	AS $BODY$ SELECT $1::geometry && ST_Expand(ST_ConvexHull($3), $5) AND $3::geometry && ST_Expand(ST_ConvexHull($1), $5) AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN _st_dwithin(st_convexhull($1), st_convexhull($3), $5) ELSE _st_dwithin($1, $2, $3, $4, $5) END $BODY$
	LANGUAGE sql
	COST 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_dwithin"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4, IN distance float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_dwithin"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4, IN distance float8) IS 'args: rastA, nbandA, rastB, nbandB, distance_of_srid - Return true if rasters rastA and rastB are within the specified distance of each other.';

-- ----------------------------
--  Function structure for public.st_dwithin("public"."raster", "public"."raster", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_dwithin"("public"."raster", "public"."raster", float8);
CREATE FUNCTION "public"."st_dwithin"(IN rast1 "public"."raster", IN rast2 "public"."raster", IN distance float8) RETURNS "bool" 
	AS $BODY$ SELECT st_dwithin($1, NULL::integer, $2, NULL::integer, $3) $BODY$
	LANGUAGE sql
	COST 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_dwithin"(IN rast1 "public"."raster", IN rast2 "public"."raster", IN distance float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_dwithin"(IN rast1 "public"."raster", IN rast2 "public"."raster", IN distance float8) IS 'args: rastA, rastB, distance_of_srid - Return true if rasters rastA and rastB are within the specified distance of each other.';

-- ----------------------------
--  Function structure for public._st_dfullywithin("public"."raster", int4, "public"."raster", int4, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_dfullywithin"("public"."raster", int4, "public"."raster", int4, float8);
CREATE FUNCTION "public"."_st_dfullywithin"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4, IN distance float8) RETURNS "bool" 
	AS '$libdir/rtpostgis-2.1','RASTER_dfullywithin'
	LANGUAGE c
	COST 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_dfullywithin"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4, IN distance float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_dfullywithin("public"."raster", int4, "public"."raster", int4, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_dfullywithin"("public"."raster", int4, "public"."raster", int4, float8);
CREATE FUNCTION "public"."st_dfullywithin"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4, IN distance float8) RETURNS "bool" 
	AS $BODY$ SELECT $1::geometry && ST_Expand(ST_ConvexHull($3), $5) AND $3::geometry && ST_Expand(ST_ConvexHull($1), $5) AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN _st_dfullywithin(st_convexhull($1), st_convexhull($3), $5) ELSE _st_dfullywithin($1, $2, $3, $4, $5) END $BODY$
	LANGUAGE sql
	COST 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_dfullywithin"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4, IN distance float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_dfullywithin"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4, IN distance float8) IS 'args: rastA, nbandA, rastB, nbandB, distance_of_srid - Return true if rasters rastA and rastB are fully within the specified distance of each other.';

-- ----------------------------
--  Function structure for public.st_dfullywithin("public"."raster", "public"."raster", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_dfullywithin"("public"."raster", "public"."raster", float8);
CREATE FUNCTION "public"."st_dfullywithin"(IN rast1 "public"."raster", IN rast2 "public"."raster", IN distance float8) RETURNS "bool" 
	AS $BODY$ SELECT st_dfullywithin($1, NULL::integer, $2, NULL::integer, $3) $BODY$
	LANGUAGE sql
	COST 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_dfullywithin"(IN rast1 "public"."raster", IN rast2 "public"."raster", IN distance float8) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_dfullywithin"(IN rast1 "public"."raster", IN rast2 "public"."raster", IN distance float8) IS 'args: rastA, rastB, distance_of_srid - Return true if rasters rastA and rastB are fully within the specified distance of each other.';

-- ----------------------------
--  Function structure for public.st_disjoint("public"."raster", int4, "public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_disjoint"("public"."raster", int4, "public"."raster", int4);
CREATE FUNCTION "public"."st_disjoint"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) RETURNS "bool" 
	AS $BODY$ SELECT CASE WHEN $2 IS NULL OR $4 IS NULL THEN st_disjoint(st_convexhull($1), st_convexhull($3)) ELSE NOT _st_intersects($1, $2, $3, $4) END $BODY$
	LANGUAGE sql
	COST 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_disjoint"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_disjoint"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) IS 'args: rastA, nbandA, rastB, nbandB - Return true if raster rastA does not spatially intersect rastB.';

-- ----------------------------
--  Function structure for public.st_disjoint("public"."raster", "public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_disjoint"("public"."raster", "public"."raster");
CREATE FUNCTION "public"."st_disjoint"(IN rast1 "public"."raster", IN rast2 "public"."raster") RETURNS "bool" 
	AS $BODY$ SELECT st_disjoint($1, NULL::integer, $2, NULL::integer) $BODY$
	LANGUAGE sql
	COST 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_disjoint"(IN rast1 "public"."raster", IN rast2 "public"."raster") OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_disjoint"(IN rast1 "public"."raster", IN rast2 "public"."raster") IS 'args: rastA, rastB - Return true if raster rastA does not spatially intersect rastB.';

-- ----------------------------
--  Function structure for public.st_intersection("public"."geometry", "public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_intersection"("public"."geometry", "public"."raster", int4);
CREATE FUNCTION "public"."st_intersection"(IN geomin "public"."geometry", IN rast "public"."raster", IN band int4 DEFAULT 1) RETURNS SETOF "public"."geomval" 
	AS $BODY$
	DECLARE
		intersects boolean := FALSE;
	BEGIN
		intersects := ST_Intersects(geomin, rast, band);
		IF intersects THEN
			-- Return the intersections of the geometry with the vectorized parts of
			-- the raster and the values associated with those parts, if really their
			-- intersection is not empty.
			RETURN QUERY
				SELECT
					intgeom,
					val
				FROM (
					SELECT
						ST_Intersection((gv).geom, geomin) AS intgeom,
						(gv).val
					FROM ST_DumpAsPolygons(rast, band) gv
					WHERE ST_Intersects((gv).geom, geomin)
				) foo
				WHERE NOT ST_IsEmpty(intgeom);
		ELSE
			-- If the geometry does not intersect with the raster, return an empty
			-- geometry and a null value
			RETURN QUERY
				SELECT
					emptygeom,
					NULL::float8
				FROM ST_GeomCollFromText('GEOMETRYCOLLECTION EMPTY', ST_SRID($1)) emptygeom;
		END IF;
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_intersection"(IN geomin "public"."geometry", IN rast "public"."raster", IN band int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_intersection("public"."raster", int4, "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_intersection"("public"."raster", int4, "public"."geometry");
CREATE FUNCTION "public"."st_intersection"(IN rast "public"."raster", IN band int4, IN geomin "public"."geometry") RETURNS SETOF "public"."geomval" 
	AS $BODY$ SELECT st_intersection($3, $1, $2) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_intersection"(IN rast "public"."raster", IN band int4, IN geomin "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_intersection("public"."raster", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_intersection"("public"."raster", "public"."geometry");
CREATE FUNCTION "public"."st_intersection"(IN rast "public"."raster", IN geomin "public"."geometry") RETURNS SETOF "public"."geomval" 
	AS $BODY$ SELECT st_intersection($2, $1, 1) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_intersection"(IN rast "public"."raster", IN geomin "public"."geometry") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_intersection("public"."raster", int4, "public"."raster", int4, text, _float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_intersection"("public"."raster", int4, "public"."raster", int4, text, _float8);
CREATE FUNCTION "public"."st_intersection"(IN rast1 "public"."raster", IN band1 int4, IN rast2 "public"."raster", IN band2 int4, IN returnband text DEFAULT 'BOTH'::text, IN nodataval _float8 DEFAULT NULL::double precision[]) RETURNS "public"."raster" 
	AS $BODY$
	DECLARE
		rtn raster;
		_returnband text;
		newnodata1 float8;
		newnodata2 float8;
	BEGIN
		IF ST_SRID(rast1) != ST_SRID(rast2) THEN
			RAISE EXCEPTION 'The two rasters do not have the same SRID';
		END IF;

		newnodata1 := coalesce(nodataval[1], ST_BandNodataValue(rast1, band1), ST_MinPossibleValue(ST_BandPixelType(rast1, band1)));
		newnodata2 := coalesce(nodataval[2], ST_BandNodataValue(rast2, band2), ST_MinPossibleValue(ST_BandPixelType(rast2, band2)));
		
		_returnband := upper(returnband);

		rtn := NULL;
		CASE
			WHEN _returnband = 'BAND1' THEN
				rtn := ST_MapAlgebraExpr(rast1, band1, rast2, band2, '[rast1.val]', ST_BandPixelType(rast1, band1), 'INTERSECTION', newnodata1::text, newnodata1::text, newnodata1);
				rtn := ST_SetBandNodataValue(rtn, 1, newnodata1);
			WHEN _returnband = 'BAND2' THEN
				rtn := ST_MapAlgebraExpr(rast1, band1, rast2, band2, '[rast2.val]', ST_BandPixelType(rast2, band2), 'INTERSECTION', newnodata2::text, newnodata2::text, newnodata2);
				rtn := ST_SetBandNodataValue(rtn, 1, newnodata2);
			WHEN _returnband = 'BOTH' THEN
				rtn := ST_MapAlgebraExpr(rast1, band1, rast2, band2, '[rast1.val]', ST_BandPixelType(rast1, band1), 'INTERSECTION', newnodata1::text, newnodata1::text, newnodata1);
				rtn := ST_SetBandNodataValue(rtn, 1, newnodata1);
				rtn := ST_AddBand(rtn, ST_MapAlgebraExpr(rast1, band1, rast2, band2, '[rast2.val]', ST_BandPixelType(rast2, band2), 'INTERSECTION', newnodata2::text, newnodata2::text, newnodata2));
				rtn := ST_SetBandNodataValue(rtn, 2, newnodata2);
			ELSE
				RAISE EXCEPTION 'Unknown value provided for returnband: %', returnband;
				RETURN NULL;
		END CASE;

		RETURN rtn;
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_intersection"(IN rast1 "public"."raster", IN band1 int4, IN rast2 "public"."raster", IN band2 int4, IN returnband text, IN nodataval _float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_intersection("public"."raster", int4, "public"."raster", int4, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_intersection"("public"."raster", int4, "public"."raster", int4, text, float8);
CREATE FUNCTION "public"."st_intersection"(IN rast1 "public"."raster", IN band1 int4, IN rast2 "public"."raster", IN band2 int4, IN returnband text, IN nodataval float8) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_intersection($1, $2, $3, $4, $5, ARRAY[$6, $6]) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_intersection"(IN rast1 "public"."raster", IN band1 int4, IN rast2 "public"."raster", IN band2 int4, IN returnband text, IN nodataval float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_intersection("public"."raster", int4, "public"."raster", int4, _float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_intersection"("public"."raster", int4, "public"."raster", int4, _float8);
CREATE FUNCTION "public"."st_intersection"(IN rast1 "public"."raster", IN band1 int4, IN rast2 "public"."raster", IN band2 int4, IN nodataval _float8) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_intersection($1, $2, $3, $4, 'BOTH', $5) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_intersection"(IN rast1 "public"."raster", IN band1 int4, IN rast2 "public"."raster", IN band2 int4, IN nodataval _float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_intersection("public"."raster", int4, "public"."raster", int4, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_intersection"("public"."raster", int4, "public"."raster", int4, float8);
CREATE FUNCTION "public"."st_intersection"(IN rast1 "public"."raster", IN band1 int4, IN rast2 "public"."raster", IN band2 int4, IN nodataval float8) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_intersection($1, $2, $3, $4, 'BOTH', ARRAY[$5, $5]) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_intersection"(IN rast1 "public"."raster", IN band1 int4, IN rast2 "public"."raster", IN band2 int4, IN nodataval float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_intersection("public"."raster", "public"."raster", text, _float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_intersection"("public"."raster", "public"."raster", text, _float8);
CREATE FUNCTION "public"."st_intersection"(IN rast1 "public"."raster", IN rast2 "public"."raster", IN returnband text DEFAULT 'BOTH'::text, IN nodataval _float8 DEFAULT NULL::double precision[]) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_intersection($1, 1, $2, 1, $3, $4) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_intersection"(IN rast1 "public"."raster", IN rast2 "public"."raster", IN returnband text, IN nodataval _float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_intersection("public"."raster", "public"."raster", text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_intersection"("public"."raster", "public"."raster", text, float8);
CREATE FUNCTION "public"."st_intersection"(IN rast1 "public"."raster", IN rast2 "public"."raster", IN returnband text, IN nodataval float8) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_intersection($1, 1, $2, 1, $3, ARRAY[$4, $4]) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_intersection"(IN rast1 "public"."raster", IN rast2 "public"."raster", IN returnband text, IN nodataval float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_intersection("public"."raster", "public"."raster", _float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_intersection"("public"."raster", "public"."raster", _float8);
CREATE FUNCTION "public"."st_intersection"(IN rast1 "public"."raster", IN rast2 "public"."raster", IN nodataval _float8) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_intersection($1, 1, $2, 1, 'BOTH', $3) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_intersection"(IN rast1 "public"."raster", IN rast2 "public"."raster", IN nodataval _float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_intersection("public"."raster", "public"."raster", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_intersection"("public"."raster", "public"."raster", float8);
CREATE FUNCTION "public"."st_intersection"(IN rast1 "public"."raster", IN rast2 "public"."raster", IN nodataval float8) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_intersection($1, 1, $2, 1, 'BOTH', ARRAY[$3, $3]) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_intersection"(IN rast1 "public"."raster", IN rast2 "public"."raster", IN nodataval float8) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._st_union_finalfn(internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_union_finalfn"(internal);
CREATE FUNCTION "public"."_st_union_finalfn"(IN internal) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.1','RASTER_union_finalfn'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_union_finalfn"(IN internal) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._st_union_transfn(internal, "public"."raster", "public"."_unionarg")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_union_transfn"(internal, "public"."raster", "public"."_unionarg");
CREATE FUNCTION "public"."_st_union_transfn"(IN internal, IN "public"."raster", IN "public"."_unionarg") RETURNS "internal" 
	AS '$libdir/rtpostgis-2.1','RASTER_union_transfn'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_union_transfn"(IN internal, IN "public"."raster", IN "public"."_unionarg") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._st_union_transfn(internal, "public"."raster", int4, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_union_transfn"(internal, "public"."raster", int4, text);
CREATE FUNCTION "public"."_st_union_transfn"(IN internal, IN "public"."raster", IN int4, IN text) RETURNS "internal" 
	AS '$libdir/rtpostgis-2.1','RASTER_union_transfn'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_union_transfn"(IN internal, IN "public"."raster", IN int4, IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._st_union_transfn(internal, "public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_union_transfn"(internal, "public"."raster", int4);
CREATE FUNCTION "public"."_st_union_transfn"(IN internal, IN "public"."raster", IN int4) RETURNS "internal" 
	AS '$libdir/rtpostgis-2.1','RASTER_union_transfn'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_union_transfn"(IN internal, IN "public"."raster", IN int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._st_union_transfn(internal, "public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_union_transfn"(internal, "public"."raster");
CREATE FUNCTION "public"."_st_union_transfn"(IN internal, IN "public"."raster") RETURNS "internal" 
	AS '$libdir/rtpostgis-2.1','RASTER_union_transfn'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_union_transfn"(IN internal, IN "public"."raster") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._st_union_transfn(internal, "public"."raster", text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_union_transfn"(internal, "public"."raster", text);
CREATE FUNCTION "public"."_st_union_transfn"(IN internal, IN "public"."raster", IN text) RETURNS "internal" 
	AS '$libdir/rtpostgis-2.1','RASTER_union_transfn'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_union_transfn"(IN internal, IN "public"."raster", IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_clip("public"."raster", _int4, "public"."geometry", _float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_clip"("public"."raster", _int4, "public"."geometry", _float8, bool);
CREATE FUNCTION "public"."st_clip"(IN rast "public"."raster", IN nband _int4, IN geom "public"."geometry", IN nodataval _float8 DEFAULT NULL::double precision[], IN crop bool DEFAULT true) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.1','RASTER_clip'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_clip"(IN rast "public"."raster", IN nband _int4, IN geom "public"."geometry", IN nodataval _float8, IN crop bool) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_clip("public"."raster", int4, "public"."geometry", float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_clip"("public"."raster", int4, "public"."geometry", float8, bool);
CREATE FUNCTION "public"."st_clip"(IN rast "public"."raster", IN nband int4, IN geom "public"."geometry", IN nodataval float8, IN crop bool DEFAULT true) RETURNS "public"."raster" 
	AS $BODY$ SELECT ST_Clip($1, ARRAY[$2]::integer[], $3, ARRAY[$4]::double precision[], $5) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_clip"(IN rast "public"."raster", IN nband int4, IN geom "public"."geometry", IN nodataval float8, IN crop bool) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_clip("public"."raster", int4, "public"."geometry", bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_clip"("public"."raster", int4, "public"."geometry", bool);
CREATE FUNCTION "public"."st_clip"(IN rast "public"."raster", IN nband int4, IN geom "public"."geometry", IN crop bool) RETURNS "public"."raster" 
	AS $BODY$ SELECT ST_Clip($1, ARRAY[$2]::integer[], $3, null::double precision[], $4) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_clip"(IN rast "public"."raster", IN nband int4, IN geom "public"."geometry", IN crop bool) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_clip("public"."raster", "public"."geometry", _float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_clip"("public"."raster", "public"."geometry", _float8, bool);
CREATE FUNCTION "public"."st_clip"(IN rast "public"."raster", IN geom "public"."geometry", IN nodataval _float8 DEFAULT NULL::double precision[], IN crop bool DEFAULT true) RETURNS "public"."raster" 
	AS $BODY$ SELECT ST_Clip($1, NULL, $2, $3, $4) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_clip"(IN rast "public"."raster", IN geom "public"."geometry", IN nodataval _float8, IN crop bool) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_clip("public"."raster", "public"."geometry", float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_clip"("public"."raster", "public"."geometry", float8, bool);
CREATE FUNCTION "public"."st_clip"(IN rast "public"."raster", IN geom "public"."geometry", IN nodataval float8, IN crop bool DEFAULT true) RETURNS "public"."raster" 
	AS $BODY$ SELECT ST_Clip($1, NULL, $2, ARRAY[$3]::double precision[], $4) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_clip"(IN rast "public"."raster", IN geom "public"."geometry", IN nodataval float8, IN crop bool) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_clip("public"."raster", "public"."geometry", bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_clip"("public"."raster", "public"."geometry", bool);
CREATE FUNCTION "public"."st_clip"(IN rast "public"."raster", IN geom "public"."geometry", IN crop bool) RETURNS "public"."raster" 
	AS $BODY$ SELECT ST_Clip($1, NULL, $2, null::double precision[], $3) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_clip"(IN rast "public"."raster", IN geom "public"."geometry", IN crop bool) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_nearestvalue("public"."raster", int4, "public"."geometry", bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_nearestvalue"("public"."raster", int4, "public"."geometry", bool);
CREATE FUNCTION "public"."st_nearestvalue"(IN rast "public"."raster", IN band int4, IN pt "public"."geometry", IN exclude_nodata_value bool DEFAULT true) RETURNS "float8" 
	AS '$libdir/rtpostgis-2.1','RASTER_nearestValue'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_nearestvalue"(IN rast "public"."raster", IN band int4, IN pt "public"."geometry", IN exclude_nodata_value bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_nearestvalue"(IN rast "public"."raster", IN band int4, IN pt "public"."geometry", IN exclude_nodata_value bool) IS 'args: rast, bandnum, pt, exclude_nodata_value=true - Returns the nearest non-NODATA value of a given bands pixel specified by a columnx and rowy or a geometric point expressed in the same spatial reference coordinate system as the raster.';

-- ----------------------------
--  Function structure for public.st_nearestvalue("public"."raster", "public"."geometry", bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_nearestvalue"("public"."raster", "public"."geometry", bool);
CREATE FUNCTION "public"."st_nearestvalue"(IN rast "public"."raster", IN pt "public"."geometry", IN exclude_nodata_value bool DEFAULT true) RETURNS "float8" 
	AS $BODY$ SELECT st_nearestvalue($1, 1, $2, $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_nearestvalue"(IN rast "public"."raster", IN pt "public"."geometry", IN exclude_nodata_value bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_nearestvalue"(IN rast "public"."raster", IN pt "public"."geometry", IN exclude_nodata_value bool) IS 'args: rast, pt, exclude_nodata_value=true - Returns the nearest non-NODATA value of a given bands pixel specified by a columnx and rowy or a geometric point expressed in the same spatial reference coordinate system as the raster.';

-- ----------------------------
--  Function structure for public.st_nearestvalue("public"."raster", int4, int4, int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_nearestvalue"("public"."raster", int4, int4, int4, bool);
CREATE FUNCTION "public"."st_nearestvalue"(IN rast "public"."raster", IN band int4, IN columnx int4, IN rowy int4, IN exclude_nodata_value bool DEFAULT true) RETURNS "float8" 
	AS $BODY$ SELECT st_nearestvalue($1, $2, st_setsrid(st_makepoint(st_rastertoworldcoordx($1, $3, $4), st_rastertoworldcoordy($1, $3, $4)), st_srid($1)), $5) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_nearestvalue"(IN rast "public"."raster", IN band int4, IN columnx int4, IN rowy int4, IN exclude_nodata_value bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_nearestvalue"(IN rast "public"."raster", IN band int4, IN columnx int4, IN rowy int4, IN exclude_nodata_value bool) IS 'args: rast, bandnum, columnx, rowy, exclude_nodata_value=true - Returns the nearest non-NODATA value of a given bands pixel specified by a columnx and rowy or a geometric point expressed in the same spatial reference coordinate system as the raster.';

-- ----------------------------
--  Function structure for public.st_nearestvalue("public"."raster", int4, int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_nearestvalue"("public"."raster", int4, int4, bool);
CREATE FUNCTION "public"."st_nearestvalue"(IN rast "public"."raster", IN columnx int4, IN rowy int4, IN exclude_nodata_value bool DEFAULT true) RETURNS "float8" 
	AS $BODY$ SELECT st_nearestvalue($1, 1, st_setsrid(st_makepoint(st_rastertoworldcoordx($1, $2, $3), st_rastertoworldcoordy($1, $2, $3)), st_srid($1)), $4) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_nearestvalue"(IN rast "public"."raster", IN columnx int4, IN rowy int4, IN exclude_nodata_value bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_nearestvalue"(IN rast "public"."raster", IN columnx int4, IN rowy int4, IN exclude_nodata_value bool) IS 'args: rast, columnx, rowy, exclude_nodata_value=true - Returns the nearest non-NODATA value of a given bands pixel specified by a columnx and rowy or a geometric point expressed in the same spatial reference coordinate system as the raster.';

-- ----------------------------
--  Function structure for public._st_neighborhood("public"."raster", int4, int4, int4, int4, int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_neighborhood"("public"."raster", int4, int4, int4, int4, int4, bool);
CREATE FUNCTION "public"."_st_neighborhood"(IN rast "public"."raster", IN band int4, IN columnx int4, IN rowy int4, IN distancex int4, IN distancey int4, IN exclude_nodata_value bool DEFAULT true) RETURNS "_float8" 
	AS '$libdir/rtpostgis-2.1','RASTER_neighborhood'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_neighborhood"(IN rast "public"."raster", IN band int4, IN columnx int4, IN rowy int4, IN distancex int4, IN distancey int4, IN exclude_nodata_value bool) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.st_neighborhood("public"."raster", int4, int4, int4, int4, int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_neighborhood"("public"."raster", int4, int4, int4, int4, int4, bool);
CREATE FUNCTION "public"."st_neighborhood"(IN rast "public"."raster", IN band int4, IN columnx int4, IN rowy int4, IN distancex int4, IN distancey int4, IN exclude_nodata_value bool DEFAULT true) RETURNS "_float8" 
	AS $BODY$ SELECT _st_neighborhood($1, $2, $3, $4, $5, $6, $7) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_neighborhood"(IN rast "public"."raster", IN band int4, IN columnx int4, IN rowy int4, IN distancex int4, IN distancey int4, IN exclude_nodata_value bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_neighborhood"(IN rast "public"."raster", IN band int4, IN columnx int4, IN rowy int4, IN distancex int4, IN distancey int4, IN exclude_nodata_value bool) IS 'args: rast, bandnum, columnX, rowY, distanceX, distanceY, exclude_nodata_value=true - Returns a 2-D double precision array of the non-NODATA values around a given bands pixel specified by either a columnX and rowY or a geometric point expressed in the same spatial reference coordinate system as the raster.';

-- ----------------------------
--  Function structure for public.st_neighborhood("public"."raster", int4, int4, int4, int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_neighborhood"("public"."raster", int4, int4, int4, int4, bool);
CREATE FUNCTION "public"."st_neighborhood"(IN rast "public"."raster", IN columnx int4, IN rowy int4, IN distancex int4, IN distancey int4, IN exclude_nodata_value bool DEFAULT true) RETURNS "_float8" 
	AS $BODY$ SELECT _st_neighborhood($1, 1, $2, $3, $4, $5, $6) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_neighborhood"(IN rast "public"."raster", IN columnx int4, IN rowy int4, IN distancex int4, IN distancey int4, IN exclude_nodata_value bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_neighborhood"(IN rast "public"."raster", IN columnx int4, IN rowy int4, IN distancex int4, IN distancey int4, IN exclude_nodata_value bool) IS 'args: rast, columnX, rowY, distanceX, distanceY, exclude_nodata_value=true - Returns a 2-D double precision array of the non-NODATA values around a given bands pixel specified by either a columnX and rowY or a geometric point expressed in the same spatial reference coordinate system as the raster.';

-- ----------------------------
--  Function structure for public.st_neighborhood("public"."raster", int4, "public"."geometry", int4, int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_neighborhood"("public"."raster", int4, "public"."geometry", int4, int4, bool);
CREATE FUNCTION "public"."st_neighborhood"(IN rast "public"."raster", IN band int4, IN pt "public"."geometry", IN distancex int4, IN distancey int4, IN exclude_nodata_value bool DEFAULT true) RETURNS "_float8" 
	AS $BODY$
	DECLARE
		wx double precision;
		wy double precision;
		rtn double precision[][];
	BEGIN
		IF (st_geometrytype($3) != 'ST_Point') THEN
			RAISE EXCEPTION 'Attempting to get the neighbor of a pixel with a non-point geometry';
		END IF;

		IF ST_SRID(rast) != ST_SRID(pt) THEN
			RAISE EXCEPTION 'Raster and geometry do not have the same SRID';
		END IF;

		wx := st_x($3);
		wy := st_y($3);

		SELECT _st_neighborhood(
			$1, $2,
			st_worldtorastercoordx(rast, wx, wy),
			st_worldtorastercoordy(rast, wx, wy),
			$4, $5,
			$6
		) INTO rtn;
		RETURN rtn;
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_neighborhood"(IN rast "public"."raster", IN band int4, IN pt "public"."geometry", IN distancex int4, IN distancey int4, IN exclude_nodata_value bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_neighborhood"(IN rast "public"."raster", IN band int4, IN pt "public"."geometry", IN distancex int4, IN distancey int4, IN exclude_nodata_value bool) IS 'args: rast, bandnum, pt, distanceX, distanceY, exclude_nodata_value=true - Returns a 2-D double precision array of the non-NODATA values around a given bands pixel specified by either a columnX and rowY or a geometric point expressed in the same spatial reference coordinate system as the raster.';

-- ----------------------------
--  Function structure for public.st_neighborhood("public"."raster", "public"."geometry", int4, int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_neighborhood"("public"."raster", "public"."geometry", int4, int4, bool);
CREATE FUNCTION "public"."st_neighborhood"(IN rast "public"."raster", IN pt "public"."geometry", IN distancex int4, IN distancey int4, IN exclude_nodata_value bool DEFAULT true) RETURNS "_float8" 
	AS $BODY$ SELECT st_neighborhood($1, 1, $2, $3, $4, $5) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_neighborhood"(IN rast "public"."raster", IN pt "public"."geometry", IN distancex int4, IN distancey int4, IN exclude_nodata_value bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."st_neighborhood"(IN rast "public"."raster", IN pt "public"."geometry", IN distancex int4, IN distancey int4, IN exclude_nodata_value bool) IS 'args: rast, pt, distanceX, distanceY, exclude_nodata_value=true - Returns a 2-D double precision array of the non-NODATA values around a given bands pixel specified by either a columnX and rowY or a geometric point expressed in the same spatial reference coordinate system as the raster.';

-- ----------------------------
--  Function structure for public._add_raster_constraint(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_add_raster_constraint"(name, text);
CREATE FUNCTION "public"."_add_raster_constraint"(IN cn name, IN "sql" text) RETURNS "bool" 
	AS $BODY$
	BEGIN
		BEGIN
			EXECUTE sql;
		EXCEPTION
			WHEN duplicate_object THEN
				RAISE NOTICE 'The constraint "%" already exists.  To replace the existing constraint, delete the constraint and call ApplyRasterConstraints again', cn;
			WHEN OTHERS THEN
				RAISE NOTICE 'Unable to add constraint: %', cn;
				RAISE NOTICE 'SQL used for failed constraint: %', sql;
				RAISE NOTICE 'Returned error message: %', SQLERRM;
				RETURN FALSE;
		END;

		RETURN TRUE;
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_add_raster_constraint"(IN cn name, IN "sql" text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._drop_raster_constraint(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_drop_raster_constraint"(name, name, name);
CREATE FUNCTION "public"."_drop_raster_constraint"(IN rastschema name, IN rasttable name, IN cn name) RETURNS "bool" 
	AS $BODY$
	DECLARE
		fqtn text;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		BEGIN
			EXECUTE 'ALTER TABLE '
				|| fqtn
				|| ' DROP CONSTRAINT '
				|| quote_ident(cn);
			RETURN TRUE;
		EXCEPTION
			WHEN undefined_object THEN
				RAISE NOTICE 'The constraint "%" does not exist.  Skipping', cn;
			WHEN OTHERS THEN
				RAISE NOTICE 'Unable to drop constraint "%"', cn;
				RETURN FALSE;
		END;

		RETURN TRUE;
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_drop_raster_constraint"(IN rastschema name, IN rasttable name, IN cn name) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._raster_constraint_info_srid(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_raster_constraint_info_srid"(name, name, name);
CREATE FUNCTION "public"."_raster_constraint_info_srid"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "int4" 
	AS $BODY$
	SELECT
		replace(replace(split_part(s.consrc, ' = ', 2), ')', ''), '(', '')::integer
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%st_srid(% = %';
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_raster_constraint_info_srid"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._add_raster_constraint_srid(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_add_raster_constraint_srid"(name, name, name);
CREATE FUNCTION "public"."_add_raster_constraint_srid"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "bool" 
	AS $BODY$
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attr int;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		cn := 'enforce_srid_' || $3;

		sql := 'SELECT st_srid('
			|| quote_ident($3)
			|| ') FROM ' || fqtn
			|| ' LIMIT 1';
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the SRID of a sample raster';
			RETURN FALSE;
		END;

		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (st_srid('
			|| quote_ident($3)
			|| ') = ' || attr || ')';

		RETURN _add_raster_constraint(cn, sql);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_add_raster_constraint_srid"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._drop_raster_constraint_srid(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_drop_raster_constraint_srid"(name, name, name);
CREATE FUNCTION "public"."_drop_raster_constraint_srid"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "bool" 
	AS $BODY$ SELECT _drop_raster_constraint($1, $2, 'enforce_srid_' || $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_drop_raster_constraint_srid"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._raster_constraint_info_scale(name, name, name, bpchar)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_raster_constraint_info_scale"(name, name, name, bpchar);
CREATE FUNCTION "public"."_raster_constraint_info_scale"(IN rastschema name, IN rasttable name, IN rastcolumn name, IN axis bpchar) RETURNS "float8" 
	AS $BODY$
	SELECT
		replace(replace(split_part(split_part(s.consrc, ' = ', 2), '::', 1), ')', ''), '(', '')::double precision
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%st_scale' || $4 || '(% = %';
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_raster_constraint_info_scale"(IN rastschema name, IN rasttable name, IN rastcolumn name, IN axis bpchar) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._add_raster_constraint_scale(name, name, name, bpchar)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_add_raster_constraint_scale"(name, name, name, bpchar);
CREATE FUNCTION "public"."_add_raster_constraint_scale"(IN rastschema name, IN rasttable name, IN rastcolumn name, IN axis bpchar) RETURNS "bool" 
	AS $BODY$
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attr double precision;
	BEGIN
		IF lower($4) != 'x' AND lower($4) != 'y' THEN
			RAISE EXCEPTION 'axis must be either "x" or "y"';
			RETURN FALSE;
		END IF;

		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		cn := 'enforce_scale' || $4 || '_' || $3;

		sql := 'SELECT st_scale' || $4 || '('
			|| quote_ident($3)
			|| ') FROM '
			|| fqtn
			|| ' LIMIT 1';
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the %-scale of a sample raster', upper($4);
			RETURN FALSE;
		END;

		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (st_scale' || $4 || '('
			|| quote_ident($3)
			|| ')::numeric(16,10) = (' || attr || ')::numeric(16,10))';
		RETURN _add_raster_constraint(cn, sql);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_add_raster_constraint_scale"(IN rastschema name, IN rasttable name, IN rastcolumn name, IN axis bpchar) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._drop_raster_constraint_scale(name, name, name, bpchar)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_drop_raster_constraint_scale"(name, name, name, bpchar);
CREATE FUNCTION "public"."_drop_raster_constraint_scale"(IN rastschema name, IN rasttable name, IN rastcolumn name, IN axis bpchar) RETURNS "bool" 
	AS $BODY$
	BEGIN
		IF lower($4) != 'x' AND lower($4) != 'y' THEN
			RAISE EXCEPTION 'axis must be either "x" or "y"';
			RETURN FALSE;
		END IF;

		RETURN _drop_raster_constraint($1, $2, 'enforce_scale' || $4 || '_' || $3);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_drop_raster_constraint_scale"(IN rastschema name, IN rasttable name, IN rastcolumn name, IN axis bpchar) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._raster_constraint_info_blocksize(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_raster_constraint_info_blocksize"(name, name, name, text);
CREATE FUNCTION "public"."_raster_constraint_info_blocksize"(IN rastschema name, IN rasttable name, IN rastcolumn name, IN axis text) RETURNS "int4" 
	AS $BODY$
	SELECT
		CASE
			WHEN strpos(s.consrc, 'ANY (ARRAY[') > 0 THEN
				split_part((regexp_matches(s.consrc, E'ARRAY\\[(.*?){1}\\]'))[1], ',', 1)::integer
			ELSE
				replace(replace(split_part(s.consrc, '= ', 2), ')', ''), '(', '')::integer
			END
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%st_' || $4 || '(%= %';
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_raster_constraint_info_blocksize"(IN rastschema name, IN rasttable name, IN rastcolumn name, IN axis text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._add_raster_constraint_blocksize(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_add_raster_constraint_blocksize"(name, name, name, text);
CREATE FUNCTION "public"."_add_raster_constraint_blocksize"(IN rastschema name, IN rasttable name, IN rastcolumn name, IN axis text) RETURNS "bool" 
	AS $BODY$
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attrset integer[];
		attr integer;
	BEGIN
		IF lower($4) != 'width' AND lower($4) != 'height' THEN
			RAISE EXCEPTION 'axis must be either "width" or "height"';
			RETURN FALSE;
		END IF;

		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		cn := 'enforce_' || $4 || '_' || $3;

		sql := 'SELECT st_' || $4 || '('
			|| quote_ident($3)
			|| ') FROM ' || fqtn
			|| ' GROUP BY 1 ORDER BY count(*) DESC';
		BEGIN
			attrset := ARRAY[]::integer[];
			FOR attr IN EXECUTE sql LOOP
				attrset := attrset || attr;
			END LOOP;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the % of a sample raster', $4;
			RETURN FALSE;
		END;

		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (st_' || $4 || '('
			|| quote_ident($3)
			|| ') IN (' || array_to_string(attrset, ',') || '))';
		RETURN _add_raster_constraint(cn, sql);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_add_raster_constraint_blocksize"(IN rastschema name, IN rasttable name, IN rastcolumn name, IN axis text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._drop_raster_constraint_blocksize(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_drop_raster_constraint_blocksize"(name, name, name, text);
CREATE FUNCTION "public"."_drop_raster_constraint_blocksize"(IN rastschema name, IN rasttable name, IN rastcolumn name, IN axis text) RETURNS "bool" 
	AS $BODY$
	BEGIN
		IF lower($4) != 'width' AND lower($4) != 'height' THEN
			RAISE EXCEPTION 'axis must be either "width" or "height"';
			RETURN FALSE;
		END IF;

		RETURN _drop_raster_constraint($1, $2, 'enforce_' || $4 || '_' || $3);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_drop_raster_constraint_blocksize"(IN rastschema name, IN rasttable name, IN rastcolumn name, IN axis text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._raster_constraint_info_extent(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_raster_constraint_info_extent"(name, name, name);
CREATE FUNCTION "public"."_raster_constraint_info_extent"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT
		trim(both '''' from split_part(trim(split_part(s.consrc, ',', 2)), '::', 1))::geometry
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%st_coveredby(st_convexhull(%';
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_raster_constraint_info_extent"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._add_raster_constraint_extent(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_add_raster_constraint_extent"(name, name, name);
CREATE FUNCTION "public"."_add_raster_constraint_extent"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "bool" 
	AS $BODY$
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attr text;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		cn := 'enforce_max_extent_' || $3;

		sql := 'SELECT st_ashexewkb(st_union(st_convexhull('
			|| quote_ident($3)
			|| '))) FROM '
			|| fqtn;
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the extent of the raster column. Attempting memory efficient (slower) approach';

			sql := 'SELECT st_ashexewkb(st_memunion(st_convexhull('
				|| quote_ident($3)
				|| '))) FROM '
				|| fqtn;
			BEGIN
				EXECUTE sql INTO attr;
			EXCEPTION WHEN OTHERS THEN
				RAISE NOTICE 'Still unable to get the extent of the raster column. Cannot add extent constraint';
				RETURN FALSE;
			END;
		END;

		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (st_coveredby(st_convexhull('
			|| quote_ident($3)
			|| '), ''' || attr || '''::geometry))';
		RETURN _add_raster_constraint(cn, sql);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_add_raster_constraint_extent"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._drop_raster_constraint_extent(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_drop_raster_constraint_extent"(name, name, name);
CREATE FUNCTION "public"."_drop_raster_constraint_extent"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "bool" 
	AS $BODY$ SELECT _drop_raster_constraint($1, $2, 'enforce_max_extent_' || $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_drop_raster_constraint_extent"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._raster_constraint_info_alignment(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_raster_constraint_info_alignment"(name, name, name);
CREATE FUNCTION "public"."_raster_constraint_info_alignment"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "bool" 
	AS $BODY$
	SELECT
		TRUE
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%st_samealignment(%';
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_raster_constraint_info_alignment"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._add_raster_constraint_alignment(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_add_raster_constraint_alignment"(name, name, name);
CREATE FUNCTION "public"."_add_raster_constraint_alignment"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "bool" 
	AS $BODY$
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attr text;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		cn := 'enforce_same_alignment_' || $3;

		sql := 'SELECT st_makeemptyraster(1, 1, upperleftx, upperlefty, scalex, scaley, skewx, skewy, srid) FROM st_metadata((SELECT '
			|| quote_ident($3)
			|| ' FROM ' || fqtn || ' LIMIT 1))';
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the alignment of a sample raster';
			RETURN FALSE;
		END;

		sql := 'ALTER TABLE ' || fqtn ||
			' ADD CONSTRAINT ' || quote_ident(cn) ||
			' CHECK (st_samealignment(' || quote_ident($3) || ', ''' || attr || '''::raster))';
		RETURN _add_raster_constraint(cn, sql);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_add_raster_constraint_alignment"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._drop_raster_constraint_alignment(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_drop_raster_constraint_alignment"(name, name, name);
CREATE FUNCTION "public"."_drop_raster_constraint_alignment"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "bool" 
	AS $BODY$ SELECT _drop_raster_constraint($1, $2, 'enforce_same_alignment_' || $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_drop_raster_constraint_alignment"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._raster_constraint_info_spatially_unique(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_raster_constraint_info_spatially_unique"(name, name, name);
CREATE FUNCTION "public"."_raster_constraint_info_spatially_unique"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "bool" 
	AS $BODY$
	SELECT
		TRUE
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s, pg_index idx, pg_operator op
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND s.contype = 'x'
		AND 0::smallint = ANY (s.conkey)
		AND idx.indexrelid = s.conindid
		AND pg_get_indexdef(idx.indexrelid, 1, true) LIKE '(' || quote_ident($3) || '::geometry)'
		AND s.conexclop[1] = op.oid
		AND op.oprname = '=';
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_raster_constraint_info_spatially_unique"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._add_raster_constraint_spatially_unique(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_add_raster_constraint_spatially_unique"(name, name, name);
CREATE FUNCTION "public"."_add_raster_constraint_spatially_unique"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "bool" 
	AS $BODY$
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attr text;
		meta record;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		cn := 'enforce_spatially_unique_' || quote_ident($2) || '_'|| $3;

		sql := 'ALTER TABLE ' || fqtn ||
			' ADD CONSTRAINT ' || quote_ident(cn) ||
			' EXCLUDE ((' || quote_ident($3) || '::geometry) WITH =)';
		RETURN _add_raster_constraint(cn, sql);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_add_raster_constraint_spatially_unique"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._drop_raster_constraint_spatially_unique(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_drop_raster_constraint_spatially_unique"(name, name, name);
CREATE FUNCTION "public"."_drop_raster_constraint_spatially_unique"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "bool" 
	AS $BODY$
	DECLARE
		cn text;
	BEGIN
		SELECT
			s.conname INTO cn
		FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s, pg_index idx, pg_operator op
		WHERE n.nspname = $1
			AND c.relname = $2
			AND a.attname = $3
			AND a.attrelid = c.oid
			AND s.connamespace = n.oid
			AND s.conrelid = c.oid
			AND s.contype = 'x'
			AND 0::smallint = ANY (s.conkey)
			AND idx.indexrelid = s.conindid
			AND pg_get_indexdef(idx.indexrelid, 1, true) LIKE '(' || quote_ident($3) || '::geometry)'
			AND s.conexclop[1] = op.oid
			AND op.oprname = '=';

		RETURN _drop_raster_constraint($1, $2, cn); 
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_drop_raster_constraint_spatially_unique"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._raster_constraint_info_coverage_tile(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_raster_constraint_info_coverage_tile"(name, name, name);
CREATE FUNCTION "public"."_raster_constraint_info_coverage_tile"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "bool" 
	AS $BODY$
	SELECT
		TRUE
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%st_iscoveragetile(%';
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_raster_constraint_info_coverage_tile"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._add_raster_constraint_coverage_tile(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_add_raster_constraint_coverage_tile"(name, name, name);
CREATE FUNCTION "public"."_add_raster_constraint_coverage_tile"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "bool" 
	AS $BODY$
	DECLARE
		fqtn text;
		cn name;
		sql text;

		_scalex double precision;
		_scaley double precision;
		_skewx double precision;
		_skewy double precision;
		_tilewidth integer;
		_tileheight integer;
		_alignment boolean;

		_covextent geometry;
		_covrast raster;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		cn := 'enforce_coverage_tile_' || $3;

		-- metadata
		BEGIN
			sql := 'WITH foo AS (SELECT ST_Metadata(' || quote_ident($3) || ') AS meta, ST_ConvexHull(' || quote_ident($3) || ') AS hull FROM ' || fqtn || ') SELECT max((meta).scalex), max((meta).scaley), max((meta).skewx), max((meta).skewy), max((meta).width), max((meta).height), ST_Union(hull) FROM foo';
			EXECUTE sql INTO _scalex, _scaley, _skewx, _skewy, _tilewidth, _tileheight, _covextent;
		EXCEPTION WHEN OTHERS THEN
		END;

		-- rasterize extent
		BEGIN
			_covrast := ST_AsRaster(_covextent, _scalex, _scaley, '8BUI', 1, 0, NULL, NULL, _skewx, _skewy);
			IF _covrast IS NULL THEN
				RAISE NOTICE 'Unable to create coverage raster. Cannot add coverage tile constraint';
				RETURN FALSE;
			END IF;

			-- remove band
			_covrast := ST_MakeEmptyRaster(_covrast);
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to create coverage raster. Cannot add coverage tile constraint';
			RETURN FALSE;
		END;

		sql := 'ALTER TABLE ' || fqtn ||
			' ADD CONSTRAINT ' || quote_ident(cn) ||
			' CHECK (st_iscoveragetile(' || quote_ident($3) || ', ''' || _covrast || '''::raster, ' || _tilewidth || ', ' || _tileheight || '))';
		RETURN _add_raster_constraint(cn, sql);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_add_raster_constraint_coverage_tile"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._drop_raster_constraint_coverage_tile(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_drop_raster_constraint_coverage_tile"(name, name, name);
CREATE FUNCTION "public"."_drop_raster_constraint_coverage_tile"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "bool" 
	AS $BODY$ SELECT _drop_raster_constraint($1, $2, 'enforce_coverage_tile_' || $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_drop_raster_constraint_coverage_tile"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._raster_constraint_info_regular_blocking(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_raster_constraint_info_regular_blocking"(name, name, name);
CREATE FUNCTION "public"."_raster_constraint_info_regular_blocking"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "bool" 
	AS $BODY$
	DECLARE
		covtile boolean;
		spunique boolean;
	BEGIN
		-- check existance of constraints
		-- coverage tile constraint
		covtile := COALESCE(_raster_constraint_info_coverage_tile($1, $2, $3), FALSE);

		-- spatially unique constraint
		spunique := COALESCE(_raster_constraint_info_spatially_unique($1, $2, $3), FALSE);

		RETURN (covtile AND spunique);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_raster_constraint_info_regular_blocking"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._drop_raster_constraint_regular_blocking(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_drop_raster_constraint_regular_blocking"(name, name, name);
CREATE FUNCTION "public"."_drop_raster_constraint_regular_blocking"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "bool" 
	AS $BODY$ SELECT _drop_raster_constraint($1, $2, 'enforce_regular_blocking_' || $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_drop_raster_constraint_regular_blocking"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._raster_constraint_info_num_bands(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_raster_constraint_info_num_bands"(name, name, name);
CREATE FUNCTION "public"."_raster_constraint_info_num_bands"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "int4" 
	AS $BODY$
	SELECT
		replace(replace(split_part(s.consrc, ' = ', 2), ')', ''), '(', '')::integer
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%st_numbands(%';
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_raster_constraint_info_num_bands"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._add_raster_constraint_num_bands(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_add_raster_constraint_num_bands"(name, name, name);
CREATE FUNCTION "public"."_add_raster_constraint_num_bands"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "bool" 
	AS $BODY$
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attr int;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		cn := 'enforce_num_bands_' || $3;

		sql := 'SELECT st_numbands(' || quote_ident($3)
			|| ') FROM ' || fqtn
			|| ' LIMIT 1';
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the number of bands of a sample raster';
			RETURN FALSE;
		END;

		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (st_numbands(' || quote_ident($3)
			|| ') = ' || attr
			|| ')';
		RETURN _add_raster_constraint(cn, sql);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_add_raster_constraint_num_bands"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._drop_raster_constraint_num_bands(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_drop_raster_constraint_num_bands"(name, name, name);
CREATE FUNCTION "public"."_drop_raster_constraint_num_bands"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "bool" 
	AS $BODY$ SELECT _drop_raster_constraint($1, $2, 'enforce_num_bands_' || $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_drop_raster_constraint_num_bands"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._raster_constraint_info_pixel_types(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_raster_constraint_info_pixel_types"(name, name, name);
CREATE FUNCTION "public"."_raster_constraint_info_pixel_types"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "_text" 
	AS $BODY$
	SELECT
		trim(both '''' from split_part(replace(replace(split_part(s.consrc, ' = ', 2), ')', ''), '(', ''), '::', 1))::text[]
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%_raster_constraint_pixel_types(%';
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_raster_constraint_info_pixel_types"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._raster_constraint_pixel_types("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_raster_constraint_pixel_types"("public"."raster");
CREATE FUNCTION "public"."_raster_constraint_pixel_types"(IN rast "public"."raster") RETURNS "_text" 
	AS $BODY$ SELECT array_agg(pixeltype)::text[] FROM st_bandmetadata($1, ARRAY[]::int[]); $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_raster_constraint_pixel_types"(IN rast "public"."raster") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._add_raster_constraint_pixel_types(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_add_raster_constraint_pixel_types"(name, name, name);
CREATE FUNCTION "public"."_add_raster_constraint_pixel_types"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "bool" 
	AS $BODY$
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attr text[];
		max int;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		cn := 'enforce_pixel_types_' || $3;

		sql := 'SELECT _raster_constraint_pixel_types(' || quote_ident($3)
			|| ') FROM ' || fqtn
			|| ' LIMIT 1';
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the pixel types of a sample raster';
			RETURN FALSE;
		END;
		max := array_length(attr, 1);
		IF max < 1 OR max IS NULL THEN
			RAISE NOTICE 'Unable to get the pixel types of a sample raster';
			RETURN FALSE;
		END IF;

		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (_raster_constraint_pixel_types(' || quote_ident($3)
			|| ') = ''{';
		FOR x in 1..max LOOP
			sql := sql || '"' || attr[x] || '"';
			IF x < max THEN
				sql := sql || ',';
			END IF;
		END LOOP;
		sql := sql || '}''::text[])';

		RETURN _add_raster_constraint(cn, sql);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_add_raster_constraint_pixel_types"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._drop_raster_constraint_pixel_types(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_drop_raster_constraint_pixel_types"(name, name, name);
CREATE FUNCTION "public"."_drop_raster_constraint_pixel_types"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "bool" 
	AS $BODY$ SELECT _drop_raster_constraint($1, $2, 'enforce_pixel_types_' || $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_drop_raster_constraint_pixel_types"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._raster_constraint_info_nodata_values(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_raster_constraint_info_nodata_values"(name, name, name);
CREATE FUNCTION "public"."_raster_constraint_info_nodata_values"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "_float8" 
	AS $BODY$
	SELECT
		trim(both '''' from split_part(replace(replace(split_part(s.consrc, ' = ', 2), ')', ''), '(', ''), '::', 1))::double precision[]
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%_raster_constraint_nodata_values(%';
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_raster_constraint_info_nodata_values"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._raster_constraint_nodata_values("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_raster_constraint_nodata_values"("public"."raster");
CREATE FUNCTION "public"."_raster_constraint_nodata_values"(IN rast "public"."raster") RETURNS "_float8" 
	AS $BODY$ SELECT array_agg(nodatavalue)::double precision[] FROM st_bandmetadata($1, ARRAY[]::int[]); $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_raster_constraint_nodata_values"(IN rast "public"."raster") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._add_raster_constraint_nodata_values(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_add_raster_constraint_nodata_values"(name, name, name);
CREATE FUNCTION "public"."_add_raster_constraint_nodata_values"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "bool" 
	AS $BODY$
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attr double precision[];
		max int;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		cn := 'enforce_nodata_values_' || $3;

		sql := 'SELECT _raster_constraint_nodata_values(' || quote_ident($3)
			|| ') FROM ' || fqtn
			|| ' LIMIT 1';
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the nodata values of a sample raster';
			RETURN FALSE;
		END;
		max := array_length(attr, 1);
		IF max < 1 OR max IS NULL THEN
			RAISE NOTICE 'Unable to get the nodata values of a sample raster';
			RETURN FALSE;
		END IF;

		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (_raster_constraint_nodata_values(' || quote_ident($3)
			|| ')::numeric(16,10)[] = ''{';
		FOR x in 1..max LOOP
			IF attr[x] IS NULL THEN
				sql := sql || 'NULL';
			ELSE
				sql := sql || attr[x];
			END IF;
			IF x < max THEN
				sql := sql || ',';
			END IF;
		END LOOP;
		sql := sql || '}''::numeric(16,10)[])';

		RETURN _add_raster_constraint(cn, sql);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_add_raster_constraint_nodata_values"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._drop_raster_constraint_nodata_values(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_drop_raster_constraint_nodata_values"(name, name, name);
CREATE FUNCTION "public"."_drop_raster_constraint_nodata_values"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "bool" 
	AS $BODY$ SELECT _drop_raster_constraint($1, $2, 'enforce_nodata_values_' || $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_drop_raster_constraint_nodata_values"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._raster_constraint_info_out_db(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_raster_constraint_info_out_db"(name, name, name);
CREATE FUNCTION "public"."_raster_constraint_info_out_db"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "_bool" 
	AS $BODY$
	SELECT
		trim(both '''' from split_part(replace(replace(split_part(s.consrc, ' = ', 2), ')', ''), '(', ''), '::', 1))::boolean[]
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%_raster_constraint_out_db(%';
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_raster_constraint_info_out_db"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._raster_constraint_out_db("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_raster_constraint_out_db"("public"."raster");
CREATE FUNCTION "public"."_raster_constraint_out_db"(IN rast "public"."raster") RETURNS "_bool" 
	AS $BODY$ SELECT array_agg(isoutdb)::boolean[] FROM st_bandmetadata($1, ARRAY[]::int[]); $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_raster_constraint_out_db"(IN rast "public"."raster") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._add_raster_constraint_out_db(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_add_raster_constraint_out_db"(name, name, name);
CREATE FUNCTION "public"."_add_raster_constraint_out_db"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "bool" 
	AS $BODY$
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attr boolean[];
		max int;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		cn := 'enforce_out_db_' || $3;

		sql := 'SELECT _raster_constraint_out_db(' || quote_ident($3)
			|| ') FROM ' || fqtn
			|| ' LIMIT 1';
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the out-of-database bands of a sample raster';
			RETURN FALSE;
		END;
		max := array_length(attr, 1);
		IF max < 1 OR max IS NULL THEN
			RAISE NOTICE 'Unable to get the out-of-database bands of a sample raster';
			RETURN FALSE;
		END IF;

		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (_raster_constraint_out_db(' || quote_ident($3)
			|| ') = ''{';
		FOR x in 1..max LOOP
			IF attr[x] IS FALSE THEN
				sql := sql || 'FALSE';
			ELSE
				sql := sql || 'TRUE';
			END IF;
			IF x < max THEN
				sql := sql || ',';
			END IF;
		END LOOP;
		sql := sql || '}''::boolean[])';

		RETURN _add_raster_constraint(cn, sql);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_add_raster_constraint_out_db"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._drop_raster_constraint_out_db(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_drop_raster_constraint_out_db"(name, name, name);
CREATE FUNCTION "public"."_drop_raster_constraint_out_db"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "bool" 
	AS $BODY$ SELECT _drop_raster_constraint($1, $2, 'enforce_out_db_' || $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_drop_raster_constraint_out_db"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.addrasterconstraints(name, name, name, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."addrasterconstraints"(name, name, name, _text);
CREATE FUNCTION "public"."addrasterconstraints"(IN rastschema name, IN rasttable name, IN rastcolumn name, INOUT "constraints" _text) RETURNS "bool" 
	AS $BODY$
	DECLARE
		max int;
		cnt int;
		sql text;
		schema name;
		x int;
		kw text;
		rtn boolean;
	BEGIN
		cnt := 0;
		max := array_length(constraints, 1);
		IF max < 1 THEN
			RAISE NOTICE 'No constraints indicated to be added.  Doing nothing';
			RETURN TRUE;
		END IF;

		-- validate schema
		schema := NULL;
		IF length($1) > 0 THEN
			sql := 'SELECT nspname FROM pg_namespace '
				|| 'WHERE nspname = ' || quote_literal($1)
				|| 'LIMIT 1';
			EXECUTE sql INTO schema;

			IF schema IS NULL THEN
				RAISE EXCEPTION 'The value provided for schema is invalid';
				RETURN FALSE;
			END IF;
		END IF;

		IF schema IS NULL THEN
			sql := 'SELECT n.nspname AS schemaname '
				|| 'FROM pg_catalog.pg_class c '
				|| 'JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace '
				|| 'WHERE c.relkind = ' || quote_literal('r')
				|| ' AND n.nspname NOT IN (' || quote_literal('pg_catalog')
				|| ', ' || quote_literal('pg_toast')
				|| ') AND pg_catalog.pg_table_is_visible(c.oid)'
				|| ' AND c.relname = ' || quote_literal($2);
			EXECUTE sql INTO schema;

			IF schema IS NULL THEN
				RAISE EXCEPTION 'The table % does not occur in the search_path', quote_literal($2);
				RETURN FALSE;
			END IF;
		END IF;

		<<kwloop>>
		FOR x in 1..max LOOP
			kw := trim(both from lower(constraints[x]));

			BEGIN
				CASE
					WHEN kw = 'srid' THEN
						RAISE NOTICE 'Adding SRID constraint';
						rtn := _add_raster_constraint_srid(schema, $2, $3);
					WHEN kw IN ('scale_x', 'scalex') THEN
						RAISE NOTICE 'Adding scale-X constraint';
						rtn := _add_raster_constraint_scale(schema, $2, $3, 'x');
					WHEN kw IN ('scale_y', 'scaley') THEN
						RAISE NOTICE 'Adding scale-Y constraint';
						rtn := _add_raster_constraint_scale(schema, $2, $3, 'y');
					WHEN kw = 'scale' THEN
						RAISE NOTICE 'Adding scale-X constraint';
						rtn := _add_raster_constraint_scale(schema, $2, $3, 'x');
						RAISE NOTICE 'Adding scale-Y constraint';
						rtn := _add_raster_constraint_scale(schema, $2, $3, 'y');
					WHEN kw IN ('blocksize_x', 'blocksizex', 'width') THEN
						RAISE NOTICE 'Adding blocksize-X constraint';
						rtn := _add_raster_constraint_blocksize(schema, $2, $3, 'width');
					WHEN kw IN ('blocksize_y', 'blocksizey', 'height') THEN
						RAISE NOTICE 'Adding blocksize-Y constraint';
						rtn := _add_raster_constraint_blocksize(schema, $2, $3, 'height');
					WHEN kw = 'blocksize' THEN
						RAISE NOTICE 'Adding blocksize-X constraint';
						rtn := _add_raster_constraint_blocksize(schema, $2, $3, 'width');
						RAISE NOTICE 'Adding blocksize-Y constraint';
						rtn := _add_raster_constraint_blocksize(schema, $2, $3, 'height');
					WHEN kw IN ('same_alignment', 'samealignment', 'alignment') THEN
						RAISE NOTICE 'Adding alignment constraint';
						rtn := _add_raster_constraint_alignment(schema, $2, $3);
					WHEN kw IN ('regular_blocking', 'regularblocking') THEN
						RAISE NOTICE 'Adding coverage tile constraint required for regular blocking';
						rtn := _add_raster_constraint_coverage_tile(schema, $2, $3);
						IF rtn IS NOT FALSE THEN
							RAISE NOTICE 'Adding spatially unique constraint required for regular blocking';
							rtn := _add_raster_constraint_spatially_unique(schema, $2, $3);
						END IF;
					WHEN kw IN ('num_bands', 'numbands') THEN
						RAISE NOTICE 'Adding number of bands constraint';
						rtn := _add_raster_constraint_num_bands(schema, $2, $3);
					WHEN kw IN ('pixel_types', 'pixeltypes') THEN
						RAISE NOTICE 'Adding pixel type constraint';
						rtn := _add_raster_constraint_pixel_types(schema, $2, $3);
					WHEN kw IN ('nodata_values', 'nodatavalues', 'nodata') THEN
						RAISE NOTICE 'Adding nodata value constraint';
						rtn := _add_raster_constraint_nodata_values(schema, $2, $3);
					WHEN kw IN ('out_db', 'outdb') THEN
						RAISE NOTICE 'Adding out-of-database constraint';
						rtn := _add_raster_constraint_out_db(schema, $2, $3);
					WHEN kw = 'extent' THEN
						RAISE NOTICE 'Adding maximum extent constraint';
						rtn := _add_raster_constraint_extent(schema, $2, $3);
					ELSE
						RAISE NOTICE 'Unknown constraint: %.  Skipping', quote_literal(constraints[x]);
						CONTINUE kwloop;
				END CASE;
			END;

			IF rtn IS FALSE THEN
				cnt := cnt + 1;
				RAISE WARNING 'Unable to add constraint: %.  Skipping', quote_literal(constraints[x]);
			END IF;

		END LOOP kwloop;

		IF cnt = max THEN
			RAISE EXCEPTION 'None of the constraints specified could be added.  Is the schema name, table name or column name incorrect?';
			RETURN FALSE;
		END IF;

		RETURN TRUE;
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."addrasterconstraints"(IN rastschema name, IN rasttable name, IN rastcolumn name, INOUT "constraints" _text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."addrasterconstraints"(IN rastschema name, IN rasttable name, IN rastcolumn name, INOUT "constraints" _text) IS 'args: rastschema, rasttable, rastcolumn, VARIADIC constraints - Adds raster constraints to a loaded raster table for a specific column that constrains spatial ref, scaling, blocksize, alignment, bands, band type and a flag to denote if raster column is regularly blocked. The table must be loaded with data for the constraints to be inferred. Returns true of the constraint setting was accomplished and if issues a notice.';

-- ----------------------------
--  Function structure for public.addrasterconstraints(name, name, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."addrasterconstraints"(name, name, _text);
CREATE FUNCTION "public"."addrasterconstraints"(IN rasttable name, IN rastcolumn name, INOUT "constraints" _text) RETURNS "bool" 
	AS $BODY$ SELECT AddRasterConstraints('', $1, $2, VARIADIC $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."addrasterconstraints"(IN rasttable name, IN rastcolumn name, INOUT "constraints" _text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."addrasterconstraints"(IN rasttable name, IN rastcolumn name, INOUT "constraints" _text) IS 'args: rasttable, rastcolumn, VARIADIC constraints - Adds raster constraints to a loaded raster table for a specific column that constrains spatial ref, scaling, blocksize, alignment, bands, band type and a flag to denote if raster column is regularly blocked. The table must be loaded with data for the constraints to be inferred. Returns true of the constraint setting was accomplished and if issues a notice.';

-- ----------------------------
--  Function structure for public.addrasterconstraints(name, name, name, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."addrasterconstraints"(name, name, name, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool);
CREATE FUNCTION "public"."addrasterconstraints"(IN rastschema name, IN rasttable name, IN rastcolumn name, IN srid bool DEFAULT true, IN scale_x bool DEFAULT true, IN scale_y bool DEFAULT true, IN blocksize_x bool DEFAULT true, IN blocksize_y bool DEFAULT true, IN same_alignment bool DEFAULT true, IN regular_blocking bool DEFAULT false, IN num_bands bool DEFAULT true, IN pixel_types bool DEFAULT true, IN nodata_values bool DEFAULT true, IN out_db bool DEFAULT true, IN extent bool DEFAULT true) RETURNS "bool" 
	AS $BODY$
	DECLARE
		constraints text[];
	BEGIN
		IF srid IS TRUE THEN
			constraints := constraints || 'srid'::text;
		END IF;

		IF scale_x IS TRUE THEN
			constraints := constraints || 'scale_x'::text;
		END IF;

		IF scale_y IS TRUE THEN
			constraints := constraints || 'scale_y'::text;
		END IF;

		IF blocksize_x IS TRUE THEN
			constraints := constraints || 'blocksize_x'::text;
		END IF;

		IF blocksize_y IS TRUE THEN
			constraints := constraints || 'blocksize_y'::text;
		END IF;

		IF same_alignment IS TRUE THEN
			constraints := constraints || 'same_alignment'::text;
		END IF;

		IF regular_blocking IS TRUE THEN
			constraints := constraints || 'regular_blocking'::text;
		END IF;

		IF num_bands IS TRUE THEN
			constraints := constraints || 'num_bands'::text;
		END IF;

		IF pixel_types IS TRUE THEN
			constraints := constraints || 'pixel_types'::text;
		END IF;

		IF nodata_values IS TRUE THEN
			constraints := constraints || 'nodata_values'::text;
		END IF;

		IF out_db IS TRUE THEN
			constraints := constraints || 'out_db'::text;
		END IF;

		IF extent IS TRUE THEN
			constraints := constraints || 'extent'::text;
		END IF;

		RETURN AddRasterConstraints($1, $2, $3, VARIADIC constraints);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."addrasterconstraints"(IN rastschema name, IN rasttable name, IN rastcolumn name, IN srid bool, IN scale_x bool, IN scale_y bool, IN blocksize_x bool, IN blocksize_y bool, IN same_alignment bool, IN regular_blocking bool, IN num_bands bool, IN pixel_types bool, IN nodata_values bool, IN out_db bool, IN extent bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."addrasterconstraints"(IN rastschema name, IN rasttable name, IN rastcolumn name, IN srid bool, IN scale_x bool, IN scale_y bool, IN blocksize_x bool, IN blocksize_y bool, IN same_alignment bool, IN regular_blocking bool, IN num_bands bool, IN pixel_types bool, IN nodata_values bool, IN out_db bool, IN extent bool) IS 'args: rastschema, rasttable, rastcolumn, srid=true, scale_x=true, scale_y=true, blocksize_x=true, blocksize_y=true, same_alignment=true, regular_blocking=false, num_bands=true, pixel_types=true, nodata_values=true, out_db=true, extent=true - Adds raster constraints to a loaded raster table for a specific column that constrains spatial ref, scaling, blocksize, alignment, bands, band type and a flag to denote if raster column is regularly blocked. The table must be loaded with data for the constraints to be inferred. Returns true of the constraint setting was accomplished and if issues a notice.';

-- ----------------------------
--  Function structure for public.addrasterconstraints(name, name, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."addrasterconstraints"(name, name, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool);
CREATE FUNCTION "public"."addrasterconstraints"(IN rasttable name, IN rastcolumn name, IN srid bool DEFAULT true, IN scale_x bool DEFAULT true, IN scale_y bool DEFAULT true, IN blocksize_x bool DEFAULT true, IN blocksize_y bool DEFAULT true, IN same_alignment bool DEFAULT true, IN regular_blocking bool DEFAULT false, IN num_bands bool DEFAULT true, IN pixel_types bool DEFAULT true, IN nodata_values bool DEFAULT true, IN out_db bool DEFAULT true, IN extent bool DEFAULT true) RETURNS "bool" 
	AS $BODY$ SELECT AddRasterConstraints('', $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."addrasterconstraints"(IN rasttable name, IN rastcolumn name, IN srid bool, IN scale_x bool, IN scale_y bool, IN blocksize_x bool, IN blocksize_y bool, IN same_alignment bool, IN regular_blocking bool, IN num_bands bool, IN pixel_types bool, IN nodata_values bool, IN out_db bool, IN extent bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."addrasterconstraints"(IN rasttable name, IN rastcolumn name, IN srid bool, IN scale_x bool, IN scale_y bool, IN blocksize_x bool, IN blocksize_y bool, IN same_alignment bool, IN regular_blocking bool, IN num_bands bool, IN pixel_types bool, IN nodata_values bool, IN out_db bool, IN extent bool) IS 'args: rasttable, rastcolumn, srid, scale_x, scale_y, blocksize_x, blocksize_y, same_alignment, regular_blocking, num_bands=true, pixel_types=true, nodata_values=true, out_db=true, extent=true - Adds raster constraints to a loaded raster table for a specific column that constrains spatial ref, scaling, blocksize, alignment, bands, band type and a flag to denote if raster column is regularly blocked. The table must be loaded with data for the constraints to be inferred. Returns true of the constraint setting was accomplished and if issues a notice.';

-- ----------------------------
--  Function structure for public.droprasterconstraints(name, name, name, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."droprasterconstraints"(name, name, name, _text);
CREATE FUNCTION "public"."droprasterconstraints"(IN rastschema name, IN rasttable name, IN rastcolumn name, INOUT "constraints" _text) RETURNS "bool" 
	AS $BODY$
	DECLARE
		max int;
		x int;
		schema name;
		sql text;
		kw text;
		rtn boolean;
		cnt int;
	BEGIN
		cnt := 0;
		max := array_length(constraints, 1);
		IF max < 1 THEN
			RAISE NOTICE 'No constraints indicated to be dropped.  Doing nothing';
			RETURN TRUE;
		END IF;

		-- validate schema
		schema := NULL;
		IF length($1) > 0 THEN
			sql := 'SELECT nspname FROM pg_namespace '
				|| 'WHERE nspname = ' || quote_literal($1)
				|| 'LIMIT 1';
			EXECUTE sql INTO schema;

			IF schema IS NULL THEN
				RAISE EXCEPTION 'The value provided for schema is invalid';
				RETURN FALSE;
			END IF;
		END IF;

		IF schema IS NULL THEN
			sql := 'SELECT n.nspname AS schemaname '
				|| 'FROM pg_catalog.pg_class c '
				|| 'JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace '
				|| 'WHERE c.relkind = ' || quote_literal('r')
				|| ' AND n.nspname NOT IN (' || quote_literal('pg_catalog')
				|| ', ' || quote_literal('pg_toast')
				|| ') AND pg_catalog.pg_table_is_visible(c.oid)'
				|| ' AND c.relname = ' || quote_literal($2);
			EXECUTE sql INTO schema;

			IF schema IS NULL THEN
				RAISE EXCEPTION 'The table % does not occur in the search_path', quote_literal($2);
				RETURN FALSE;
			END IF;
		END IF;

		<<kwloop>>
		FOR x in 1..max LOOP
			kw := trim(both from lower(constraints[x]));

			BEGIN
				CASE
					WHEN kw = 'srid' THEN
						RAISE NOTICE 'Dropping SRID constraint';
						rtn := _drop_raster_constraint_srid(schema, $2, $3);
					WHEN kw IN ('scale_x', 'scalex') THEN
						RAISE NOTICE 'Dropping scale-X constraint';
						rtn := _drop_raster_constraint_scale(schema, $2, $3, 'x');
					WHEN kw IN ('scale_y', 'scaley') THEN
						RAISE NOTICE 'Dropping scale-Y constraint';
						rtn := _drop_raster_constraint_scale(schema, $2, $3, 'y');
					WHEN kw = 'scale' THEN
						RAISE NOTICE 'Dropping scale-X constraint';
						rtn := _drop_raster_constraint_scale(schema, $2, $3, 'x');
						RAISE NOTICE 'Dropping scale-Y constraint';
						rtn := _drop_raster_constraint_scale(schema, $2, $3, 'y');
					WHEN kw IN ('blocksize_x', 'blocksizex', 'width') THEN
						RAISE NOTICE 'Dropping blocksize-X constraint';
						rtn := _drop_raster_constraint_blocksize(schema, $2, $3, 'width');
					WHEN kw IN ('blocksize_y', 'blocksizey', 'height') THEN
						RAISE NOTICE 'Dropping blocksize-Y constraint';
						rtn := _drop_raster_constraint_blocksize(schema, $2, $3, 'height');
					WHEN kw = 'blocksize' THEN
						RAISE NOTICE 'Dropping blocksize-X constraint';
						rtn := _drop_raster_constraint_blocksize(schema, $2, $3, 'width');
						RAISE NOTICE 'Dropping blocksize-Y constraint';
						rtn := _drop_raster_constraint_blocksize(schema, $2, $3, 'height');
					WHEN kw IN ('same_alignment', 'samealignment', 'alignment') THEN
						RAISE NOTICE 'Dropping alignment constraint';
						rtn := _drop_raster_constraint_alignment(schema, $2, $3);
					WHEN kw IN ('regular_blocking', 'regularblocking') THEN
						rtn := _drop_raster_constraint_regular_blocking(schema, $2, $3);

						RAISE NOTICE 'Dropping coverage tile constraint required for regular blocking';
						rtn := _drop_raster_constraint_coverage_tile(schema, $2, $3);

						IF rtn IS NOT FALSE THEN
							RAISE NOTICE 'Dropping spatially unique constraint required for regular blocking';
							rtn := _drop_raster_constraint_spatially_unique(schema, $2, $3);
						END IF;
					WHEN kw IN ('num_bands', 'numbands') THEN
						RAISE NOTICE 'Dropping number of bands constraint';
						rtn := _drop_raster_constraint_num_bands(schema, $2, $3);
					WHEN kw IN ('pixel_types', 'pixeltypes') THEN
						RAISE NOTICE 'Dropping pixel type constraint';
						rtn := _drop_raster_constraint_pixel_types(schema, $2, $3);
					WHEN kw IN ('nodata_values', 'nodatavalues', 'nodata') THEN
						RAISE NOTICE 'Dropping nodata value constraint';
						rtn := _drop_raster_constraint_nodata_values(schema, $2, $3);
					WHEN kw IN ('out_db', 'outdb') THEN
						RAISE NOTICE 'Dropping out-of-database constraint';
						rtn := _drop_raster_constraint_out_db(schema, $2, $3);
					WHEN kw = 'extent' THEN
						RAISE NOTICE 'Dropping maximum extent constraint';
						rtn := _drop_raster_constraint_extent(schema, $2, $3);
					ELSE
						RAISE NOTICE 'Unknown constraint: %.  Skipping', quote_literal(constraints[x]);
						CONTINUE kwloop;
				END CASE;
			END;

			IF rtn IS FALSE THEN
				cnt := cnt + 1;
				RAISE WARNING 'Unable to drop constraint: %.  Skipping', quote_literal(constraints[x]);
			END IF;

		END LOOP kwloop;

		IF cnt = max THEN
			RAISE EXCEPTION 'None of the constraints specified could be dropped.  Is the schema name, table name or column name incorrect?';
			RETURN FALSE;
		END IF;

		RETURN TRUE;
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."droprasterconstraints"(IN rastschema name, IN rasttable name, IN rastcolumn name, INOUT "constraints" _text) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."droprasterconstraints"(IN rastschema name, IN rasttable name, IN rastcolumn name, INOUT "constraints" _text) IS 'args: rastschema, rasttable, rastcolumn, constraints - Drops PostGIS raster constraints that refer to a raster table column. Useful if you need to reload data or update your raster column data.';

-- ----------------------------
--  Function structure for public.droprasterconstraints(name, name, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."droprasterconstraints"(name, name, _text);
CREATE FUNCTION "public"."droprasterconstraints"(IN rasttable name, IN rastcolumn name, INOUT "constraints" _text) RETURNS "bool" 
	AS $BODY$ SELECT DropRasterConstraints('', $1, $2, VARIADIC $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."droprasterconstraints"(IN rasttable name, IN rastcolumn name, INOUT "constraints" _text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.droprasterconstraints(name, name, name, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."droprasterconstraints"(name, name, name, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool);
CREATE FUNCTION "public"."droprasterconstraints"(IN rastschema name, IN rasttable name, IN rastcolumn name, IN srid bool DEFAULT true, IN scale_x bool DEFAULT true, IN scale_y bool DEFAULT true, IN blocksize_x bool DEFAULT true, IN blocksize_y bool DEFAULT true, IN same_alignment bool DEFAULT true, IN regular_blocking bool DEFAULT true, IN num_bands bool DEFAULT true, IN pixel_types bool DEFAULT true, IN nodata_values bool DEFAULT true, IN out_db bool DEFAULT true, IN extent bool DEFAULT true) RETURNS "bool" 
	AS $BODY$
	DECLARE
		constraints text[];
	BEGIN
		IF srid IS TRUE THEN
			constraints := constraints || 'srid'::text;
		END IF;

		IF scale_x IS TRUE THEN
			constraints := constraints || 'scale_x'::text;
		END IF;

		IF scale_y IS TRUE THEN
			constraints := constraints || 'scale_y'::text;
		END IF;

		IF blocksize_x IS TRUE THEN
			constraints := constraints || 'blocksize_x'::text;
		END IF;

		IF blocksize_y IS TRUE THEN
			constraints := constraints || 'blocksize_y'::text;
		END IF;

		IF same_alignment IS TRUE THEN
			constraints := constraints || 'same_alignment'::text;
		END IF;

		IF regular_blocking IS TRUE THEN
			constraints := constraints || 'regular_blocking'::text;
		END IF;

		IF num_bands IS TRUE THEN
			constraints := constraints || 'num_bands'::text;
		END IF;

		IF pixel_types IS TRUE THEN
			constraints := constraints || 'pixel_types'::text;
		END IF;

		IF nodata_values IS TRUE THEN
			constraints := constraints || 'nodata_values'::text;
		END IF;

		IF out_db IS TRUE THEN
			constraints := constraints || 'out_db'::text;
		END IF;

		IF extent IS TRUE THEN
			constraints := constraints || 'extent'::text;
		END IF;

		RETURN DropRasterConstraints($1, $2, $3, VARIADIC constraints);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."droprasterconstraints"(IN rastschema name, IN rasttable name, IN rastcolumn name, IN srid bool, IN scale_x bool, IN scale_y bool, IN blocksize_x bool, IN blocksize_y bool, IN same_alignment bool, IN regular_blocking bool, IN num_bands bool, IN pixel_types bool, IN nodata_values bool, IN out_db bool, IN extent bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."droprasterconstraints"(IN rastschema name, IN rasttable name, IN rastcolumn name, IN srid bool, IN scale_x bool, IN scale_y bool, IN blocksize_x bool, IN blocksize_y bool, IN same_alignment bool, IN regular_blocking bool, IN num_bands bool, IN pixel_types bool, IN nodata_values bool, IN out_db bool, IN extent bool) IS 'args: rastschema, rasttable, rastcolumn, srid=true, scale_x=true, scale_y=true, blocksize_x=true, blocksize_y=true, same_alignment=true, regular_blocking=false, num_bands=true, pixel_types=true, nodata_values=true, out_db=true, extent=true - Drops PostGIS raster constraints that refer to a raster table column. Useful if you need to reload data or update your raster column data.';

-- ----------------------------
--  Function structure for public.droprasterconstraints(name, name, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."droprasterconstraints"(name, name, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool);
CREATE FUNCTION "public"."droprasterconstraints"(IN rasttable name, IN rastcolumn name, IN srid bool DEFAULT true, IN scale_x bool DEFAULT true, IN scale_y bool DEFAULT true, IN blocksize_x bool DEFAULT true, IN blocksize_y bool DEFAULT true, IN same_alignment bool DEFAULT true, IN regular_blocking bool DEFAULT true, IN num_bands bool DEFAULT true, IN pixel_types bool DEFAULT true, IN nodata_values bool DEFAULT true, IN out_db bool DEFAULT true, IN extent bool DEFAULT true) RETURNS "bool" 
	AS $BODY$ SELECT DropRasterConstraints('', $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."droprasterconstraints"(IN rasttable name, IN rastcolumn name, IN srid bool, IN scale_x bool, IN scale_y bool, IN blocksize_x bool, IN blocksize_y bool, IN same_alignment bool, IN regular_blocking bool, IN num_bands bool, IN pixel_types bool, IN nodata_values bool, IN out_db bool, IN extent bool) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."droprasterconstraints"(IN rasttable name, IN rastcolumn name, IN srid bool, IN scale_x bool, IN scale_y bool, IN blocksize_x bool, IN blocksize_y bool, IN same_alignment bool, IN regular_blocking bool, IN num_bands bool, IN pixel_types bool, IN nodata_values bool, IN out_db bool, IN extent bool) IS 'args: rasttable, rastcolumn, srid, scale_x, scale_y, blocksize_x, blocksize_y, same_alignment, regular_blocking, num_bands=true, pixel_types=true, nodata_values=true, out_db=true, extent=true - Drops PostGIS raster constraints that refer to a raster table column. Useful if you need to reload data or update your raster column data.';

-- ----------------------------
--  Function structure for public._overview_constraint("public"."raster", int4, name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_overview_constraint"("public"."raster", int4, name, name, name);
CREATE FUNCTION "public"."_overview_constraint"(IN ov "public"."raster", IN factor int4, IN refschema name, IN reftable name, IN refcolumn name) RETURNS "bool" 
	AS $BODY$ SELECT COALESCE((SELECT TRUE FROM raster_columns WHERE r_table_catalog = current_database() AND r_table_schema = $3 AND r_table_name = $4 AND r_raster_column = $5), FALSE) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_overview_constraint"(IN ov "public"."raster", IN factor int4, IN refschema name, IN reftable name, IN refcolumn name) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._overview_constraint_info(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_overview_constraint_info"(name, name, name);
CREATE FUNCTION "public"."_overview_constraint_info"(IN ovschema name, IN ovtable name, IN ovcolumn name, OUT refschema name, OUT reftable name, OUT refcolumn name, OUT factor int4) RETURNS "record" 
	AS $BODY$
	SELECT
		split_part(split_part(s.consrc, '''::name', 1), '''', 2)::name,
		split_part(split_part(s.consrc, '''::name', 2), '''', 2)::name,
		split_part(split_part(s.consrc, '''::name', 3), '''', 2)::name,
		trim(both from split_part(s.consrc, ',', 2))::integer
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%_overview_constraint(%'
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_overview_constraint_info"(IN ovschema name, IN ovtable name, IN ovcolumn name, OUT refschema name, OUT reftable name, OUT refcolumn name, OUT factor int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._add_overview_constraint(name, name, name, name, name, name, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_add_overview_constraint"(name, name, name, name, name, name, int4);
CREATE FUNCTION "public"."_add_overview_constraint"(IN ovschema name, IN ovtable name, IN ovcolumn name, IN refschema name, IN reftable name, IN refcolumn name, IN factor int4) RETURNS "bool" 
	AS $BODY$
	DECLARE
		fqtn text;
		cn name;
		sql text;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		cn := 'enforce_overview_' || $3;

		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (_overview_constraint(' || quote_ident($3)
			|| ',' || $7
			|| ',' || quote_literal($4)
			|| ',' || quote_literal($5)
			|| ',' || quote_literal($6)
			|| '))';

		RETURN _add_raster_constraint(cn, sql);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_add_overview_constraint"(IN ovschema name, IN ovtable name, IN ovcolumn name, IN refschema name, IN reftable name, IN refcolumn name, IN factor int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._drop_overview_constraint(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_drop_overview_constraint"(name, name, name);
CREATE FUNCTION "public"."_drop_overview_constraint"(IN ovschema name, IN ovtable name, IN ovcolumn name) RETURNS "bool" 
	AS $BODY$ SELECT _drop_raster_constraint($1, $2, 'enforce_overview_' || $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_drop_overview_constraint"(IN ovschema name, IN ovtable name, IN ovcolumn name) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.addoverviewconstraints(name, name, name, name, name, name, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."addoverviewconstraints"(name, name, name, name, name, name, int4);
CREATE FUNCTION "public"."addoverviewconstraints"(IN ovschema name, IN ovtable name, IN ovcolumn name, IN refschema name, IN reftable name, IN refcolumn name, IN ovfactor int4) RETURNS "bool" 
	AS $BODY$
	DECLARE
		x int;
		s name;
		t name;
		oschema name;
		rschema name;
		sql text;
		rtn boolean;
	BEGIN
		FOR x IN 1..2 LOOP
			s := '';

			IF x = 1 THEN
				s := $1;
				t := $2;
			ELSE
				s := $4;
				t := $5;
			END IF;

			-- validate user-provided schema
			IF length(s) > 0 THEN
				sql := 'SELECT nspname FROM pg_namespace '
					|| 'WHERE nspname = ' || quote_literal(s)
					|| 'LIMIT 1';
				EXECUTE sql INTO s;

				IF s IS NULL THEN
					RAISE EXCEPTION 'The value % is not a valid schema', quote_literal(s);
					RETURN FALSE;
				END IF;
			END IF;

			-- no schema, determine what it could be using the table
			IF length(s) < 1 THEN
				sql := 'SELECT n.nspname AS schemaname '
					|| 'FROM pg_catalog.pg_class c '
					|| 'JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace '
					|| 'WHERE c.relkind = ' || quote_literal('r')
					|| ' AND n.nspname NOT IN (' || quote_literal('pg_catalog')
					|| ', ' || quote_literal('pg_toast')
					|| ') AND pg_catalog.pg_table_is_visible(c.oid)'
					|| ' AND c.relname = ' || quote_literal(t);
				EXECUTE sql INTO s;

				IF s IS NULL THEN
					RAISE EXCEPTION 'The table % does not occur in the search_path', quote_literal(t);
					RETURN FALSE;
				END IF;
			END IF;

			IF x = 1 THEN
				oschema := s;
			ELSE
				rschema := s;
			END IF;
		END LOOP;

		-- reference raster
		rtn := _add_overview_constraint(oschema, $2, $3, rschema, $5, $6, $7);
		IF rtn IS FALSE THEN
			RAISE EXCEPTION 'Unable to add the overview constraint.  Is the schema name, table name or column name incorrect?';
			RETURN FALSE;
		END IF;

		RETURN TRUE;
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."addoverviewconstraints"(IN ovschema name, IN ovtable name, IN ovcolumn name, IN refschema name, IN reftable name, IN refcolumn name, IN ovfactor int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.addoverviewconstraints(name, name, name, name, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."addoverviewconstraints"(name, name, name, name, int4);
CREATE FUNCTION "public"."addoverviewconstraints"(IN ovtable name, IN ovcolumn name, IN reftable name, IN refcolumn name, IN ovfactor int4) RETURNS "bool" 
	AS $BODY$ SELECT AddOverviewConstraints('', $1, $2, '', $3, $4, $5) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."addoverviewconstraints"(IN ovtable name, IN ovcolumn name, IN reftable name, IN refcolumn name, IN ovfactor int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.hstore(record)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hstore"(record);
CREATE FUNCTION "public"."hstore"(IN record) RETURNS "public"."hstore" 
	AS '$libdir/hstore','hstore_from_record'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hstore"(IN record) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.hstore_to_array("public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hstore_to_array"("public"."hstore");
CREATE FUNCTION "public"."hstore_to_array"(IN "public"."hstore") RETURNS "_text" 
	AS '$libdir/hstore','hstore_to_array'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hstore_to_array"(IN "public"."hstore") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.dropoverviewconstraints(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."dropoverviewconstraints"(name, name, name);
CREATE FUNCTION "public"."dropoverviewconstraints"(IN ovschema name, IN ovtable name, IN ovcolumn name) RETURNS "bool" 
	AS $BODY$
	DECLARE
		schema name;
		sql text;
		rtn boolean;
	BEGIN
		-- validate schema
		schema := NULL;
		IF length($1) > 0 THEN
			sql := 'SELECT nspname FROM pg_namespace '
				|| 'WHERE nspname = ' || quote_literal($1)
				|| 'LIMIT 1';
			EXECUTE sql INTO schema;

			IF schema IS NULL THEN
				RAISE EXCEPTION 'The value provided for schema is invalid';
				RETURN FALSE;
			END IF;
		END IF;

		IF schema IS NULL THEN
			sql := 'SELECT n.nspname AS schemaname '
				|| 'FROM pg_catalog.pg_class c '
				|| 'JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace '
				|| 'WHERE c.relkind = ' || quote_literal('r')
				|| ' AND n.nspname NOT IN (' || quote_literal('pg_catalog')
				|| ', ' || quote_literal('pg_toast')
				|| ') AND pg_catalog.pg_table_is_visible(c.oid)'
				|| ' AND c.relname = ' || quote_literal($2);
			EXECUTE sql INTO schema;

			IF schema IS NULL THEN
				RAISE EXCEPTION 'The table % does not occur in the search_path', quote_literal($2);
				RETURN FALSE;
			END IF;
		END IF;

		rtn := _drop_overview_constraint(schema, $2, $3);
		IF rtn IS FALSE THEN
			RAISE EXCEPTION 'Unable to drop the overview constraint .  Is the schema name, table name or column name incorrect?';
			RETURN FALSE;
		END IF;

		RETURN TRUE;
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."dropoverviewconstraints"(IN ovschema name, IN ovtable name, IN ovcolumn name) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.dropoverviewconstraints(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."dropoverviewconstraints"(name, name);
CREATE FUNCTION "public"."dropoverviewconstraints"(IN ovtable name, IN ovcolumn name) RETURNS "bool" 
	AS $BODY$ SELECT DropOverviewConstraints('', $1, $2) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."dropoverviewconstraints"(IN ovtable name, IN ovcolumn name) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public._updaterastersrid(name, name, name, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_updaterastersrid"(name, name, name, int4);
CREATE FUNCTION "public"."_updaterastersrid"(IN "schema_name" name, IN "table_name" name, IN "column_name" name, IN new_srid int4) RETURNS "bool" 
	AS $BODY$
	DECLARE
		fqtn text;
		schema name;
		sql text;
		srid integer;
		ct boolean;
	BEGIN
		-- validate schema
		schema := NULL;
		IF length($1) > 0 THEN
			sql := 'SELECT nspname FROM pg_namespace '
				|| 'WHERE nspname = ' || quote_literal($1)
				|| 'LIMIT 1';
			EXECUTE sql INTO schema;

			IF schema IS NULL THEN
				RAISE EXCEPTION 'The value provided for schema is invalid';
				RETURN FALSE;
			END IF;
		END IF;

		IF schema IS NULL THEN
			sql := 'SELECT n.nspname AS schemaname '
				|| 'FROM pg_catalog.pg_class c '
				|| 'JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace '
				|| 'WHERE c.relkind = ' || quote_literal('r')
				|| ' AND n.nspname NOT IN (' || quote_literal('pg_catalog')
				|| ', ' || quote_literal('pg_toast')
				|| ') AND pg_catalog.pg_table_is_visible(c.oid)'
				|| ' AND c.relname = ' || quote_literal($2);
			EXECUTE sql INTO schema;

			IF schema IS NULL THEN
				RAISE EXCEPTION 'The table % does not occur in the search_path', quote_literal($2);
				RETURN FALSE;
			END IF;
		END IF;

		-- clamp SRID
		IF new_srid < 0 THEN
			srid := ST_SRID('POINT EMPTY'::geometry);
			RAISE NOTICE 'SRID % converted to the officially unknown SRID %', new_srid, srid;
		ELSE
			srid := new_srid;
		END IF;

		-- drop coverage tile constraint
		-- done separately just in case constraint doesn't exist
		ct := _raster_constraint_info_coverage_tile(schema, $2, $3);
		IF ct IS TRUE THEN
			PERFORM _drop_raster_constraint_coverage_tile(schema, $2, $3);
		END IF;

		-- drop SRID, extent, alignment constraints
		PERFORM DropRasterConstraints(schema, $2, $3, 'extent', 'alignment', 'srid');

		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		-- update SRID
		sql := 'UPDATE ' || fqtn ||
			' SET ' || quote_ident($3) ||
			' = ST_SetSRID(' || quote_ident($3) ||
			'::raster, ' || srid || ')';
		RAISE NOTICE 'sql = %', sql;
		EXECUTE sql;

		-- add SRID constraint
		PERFORM AddRasterConstraints(schema, $2, $3, 'srid', 'extent', 'alignment');

		-- add coverage tile constraint if needed
		IF ct IS TRUE THEN
			PERFORM _add_raster_constraint_coverage_tile(schema, $2, $3);
		END IF;

		RETURN TRUE;
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_updaterastersrid"(IN "schema_name" name, IN "table_name" name, IN "column_name" name, IN new_srid int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.updaterastersrid(name, name, name, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."updaterastersrid"(name, name, name, int4);
CREATE FUNCTION "public"."updaterastersrid"(IN "schema_name" name, IN "table_name" name, IN "column_name" name, IN new_srid int4) RETURNS "bool" 
	AS $BODY$ SELECT _UpdateRasterSRID($1, $2, $3, $4) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."updaterastersrid"(IN "schema_name" name, IN "table_name" name, IN "column_name" name, IN new_srid int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."updaterastersrid"(IN "schema_name" name, IN "table_name" name, IN "column_name" name, IN new_srid int4) IS 'args: schema_name, table_name, column_name, new_srid - Change the SRID of all rasters in the user-specified column and table.';

-- ----------------------------
--  Function structure for public.updaterastersrid(name, name, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."updaterastersrid"(name, name, int4);
CREATE FUNCTION "public"."updaterastersrid"(IN "table_name" name, IN "column_name" name, IN new_srid int4) RETURNS "bool" 
	AS $BODY$ SELECT _UpdateRasterSRID('', $1, $2, $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."updaterastersrid"(IN "table_name" name, IN "column_name" name, IN new_srid int4) OWNER TO "rdsadmin";
COMMENT ON FUNCTION "public"."updaterastersrid"(IN "table_name" name, IN "column_name" name, IN new_srid int4) IS 'args: table_name, column_name, new_srid - Change the SRID of all rasters in the user-specified column and table.';

-- ----------------------------
--  Function structure for public.levenshtein(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."levenshtein"(text, text);
CREATE FUNCTION "public"."levenshtein"(IN text, IN text) RETURNS "int4" 
	AS '$libdir/fuzzystrmatch','levenshtein'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."levenshtein"(IN text, IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.levenshtein(text, text, int4, int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."levenshtein"(text, text, int4, int4, int4);
CREATE FUNCTION "public"."levenshtein"(IN text, IN text, IN int4, IN int4, IN int4) RETURNS "int4" 
	AS '$libdir/fuzzystrmatch','levenshtein_with_costs'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."levenshtein"(IN text, IN text, IN int4, IN int4, IN int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.levenshtein_less_equal(text, text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."levenshtein_less_equal"(text, text, int4);
CREATE FUNCTION "public"."levenshtein_less_equal"(IN text, IN text, IN int4) RETURNS "int4" 
	AS '$libdir/fuzzystrmatch','levenshtein_less_equal'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."levenshtein_less_equal"(IN text, IN text, IN int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.levenshtein_less_equal(text, text, int4, int4, int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."levenshtein_less_equal"(text, text, int4, int4, int4, int4);
CREATE FUNCTION "public"."levenshtein_less_equal"(IN text, IN text, IN int4, IN int4, IN int4, IN int4) RETURNS "int4" 
	AS '$libdir/fuzzystrmatch','levenshtein_less_equal_with_costs'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."levenshtein_less_equal"(IN text, IN text, IN int4, IN int4, IN int4, IN int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.metaphone(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."metaphone"(text, int4);
CREATE FUNCTION "public"."metaphone"(IN text, IN int4) RETURNS "text" 
	AS '$libdir/fuzzystrmatch','metaphone'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."metaphone"(IN text, IN int4) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.soundex(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."soundex"(text);
CREATE FUNCTION "public"."soundex"(IN text) RETURNS "text" 
	AS '$libdir/fuzzystrmatch','soundex'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."soundex"(IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.text_soundex(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."text_soundex"(text);
CREATE FUNCTION "public"."text_soundex"(IN text) RETURNS "text" 
	AS '$libdir/fuzzystrmatch','soundex'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."text_soundex"(IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.difference(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."difference"(text, text);
CREATE FUNCTION "public"."difference"(IN text, IN text) RETURNS "int4" 
	AS '$libdir/fuzzystrmatch','difference'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."difference"(IN text, IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.dmetaphone(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."dmetaphone"(text);
CREATE FUNCTION "public"."dmetaphone"(IN text) RETURNS "text" 
	AS '$libdir/fuzzystrmatch','dmetaphone'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."dmetaphone"(IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.dmetaphone_alt(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."dmetaphone_alt"(text);
CREATE FUNCTION "public"."dmetaphone_alt"(IN text) RETURNS "text" 
	AS '$libdir/fuzzystrmatch','dmetaphone_alt'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."dmetaphone_alt"(IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.isdefined("public"."hstore", text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."isdefined"("public"."hstore", text);
CREATE FUNCTION "public"."isdefined"(IN "public"."hstore", IN text) RETURNS "bool" 
	AS '$libdir/hstore','hstore_defined'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."isdefined"(IN "public"."hstore", IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.defined("public"."hstore", text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."defined"("public"."hstore", text);
CREATE FUNCTION "public"."defined"(IN "public"."hstore", IN text) RETURNS "bool" 
	AS '$libdir/hstore','hstore_defined'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."defined"(IN "public"."hstore", IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.delete("public"."hstore", text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."delete"("public"."hstore", text);
CREATE FUNCTION "public"."delete"(IN "public"."hstore", IN text) RETURNS "public"."hstore" 
	AS '$libdir/hstore','hstore_delete'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."delete"(IN "public"."hstore", IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.delete("public"."hstore", _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."delete"("public"."hstore", _text);
CREATE FUNCTION "public"."delete"(IN "public"."hstore", IN _text) RETURNS "public"."hstore" 
	AS '$libdir/hstore','hstore_delete_array'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."delete"(IN "public"."hstore", IN _text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.delete("public"."hstore", "public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."delete"("public"."hstore", "public"."hstore");
CREATE FUNCTION "public"."delete"(IN "public"."hstore", IN "public"."hstore") RETURNS "public"."hstore" 
	AS '$libdir/hstore','hstore_delete_hstore'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."delete"(IN "public"."hstore", IN "public"."hstore") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.hs_concat("public"."hstore", "public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hs_concat"("public"."hstore", "public"."hstore");
CREATE FUNCTION "public"."hs_concat"(IN "public"."hstore", IN "public"."hstore") RETURNS "public"."hstore" 
	AS '$libdir/hstore','hstore_concat'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hs_concat"(IN "public"."hstore", IN "public"."hstore") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.hs_contains("public"."hstore", "public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hs_contains"("public"."hstore", "public"."hstore");
CREATE FUNCTION "public"."hs_contains"(IN "public"."hstore", IN "public"."hstore") RETURNS "bool" 
	AS '$libdir/hstore','hstore_contains'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hs_contains"(IN "public"."hstore", IN "public"."hstore") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.hs_contained("public"."hstore", "public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hs_contained"("public"."hstore", "public"."hstore");
CREATE FUNCTION "public"."hs_contained"(IN "public"."hstore", IN "public"."hstore") RETURNS "bool" 
	AS '$libdir/hstore','hstore_contained'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hs_contained"(IN "public"."hstore", IN "public"."hstore") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.tconvert(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."tconvert"(text, text);
CREATE FUNCTION "public"."tconvert"(IN text, IN text) RETURNS "public"."hstore" 
	AS '$libdir/hstore','hstore_from_text'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."tconvert"(IN text, IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.hstore(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hstore"(text, text);
CREATE FUNCTION "public"."hstore"(IN text, IN text) RETURNS "public"."hstore" 
	AS '$libdir/hstore','hstore_from_text'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hstore"(IN text, IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.hstore(_text, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hstore"(_text, _text);
CREATE FUNCTION "public"."hstore"(IN _text, IN _text) RETURNS "public"."hstore" 
	AS '$libdir/hstore','hstore_from_arrays'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hstore"(IN _text, IN _text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.hstore(_text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hstore"(_text);
CREATE FUNCTION "public"."hstore"(IN _text) RETURNS "public"."hstore" 
	AS '$libdir/hstore','hstore_from_array'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hstore"(IN _text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.hstore_to_json("public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hstore_to_json"("public"."hstore");
CREATE FUNCTION "public"."hstore_to_json"(IN "public"."hstore") RETURNS "json" 
	AS '$libdir/hstore','hstore_to_json'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hstore_to_json"(IN "public"."hstore") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.hstore_to_json_loose("public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hstore_to_json_loose"("public"."hstore");
CREATE FUNCTION "public"."hstore_to_json_loose"(IN "public"."hstore") RETURNS "json" 
	AS '$libdir/hstore','hstore_to_json_loose'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hstore_to_json_loose"(IN "public"."hstore") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.hstore_in(cstring)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hstore_in"(cstring);
CREATE FUNCTION "public"."hstore_in"(IN cstring) RETURNS "public"."hstore" 
	AS '$libdir/hstore','hstore_in'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hstore_in"(IN cstring) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.hstore_out("public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hstore_out"("public"."hstore");
CREATE FUNCTION "public"."hstore_out"(IN "public"."hstore") RETURNS "cstring" 
	AS '$libdir/hstore','hstore_out'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hstore_out"(IN "public"."hstore") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.hstore_recv(internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hstore_recv"(internal);
CREATE FUNCTION "public"."hstore_recv"(IN internal) RETURNS "public"."hstore" 
	AS '$libdir/hstore','hstore_recv'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hstore_recv"(IN internal) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.hstore_send("public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hstore_send"("public"."hstore");
CREATE FUNCTION "public"."hstore_send"(IN "public"."hstore") RETURNS "bytea" 
	AS '$libdir/hstore','hstore_send'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hstore_send"(IN "public"."hstore") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.hstore_version_diag("public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hstore_version_diag"("public"."hstore");
CREATE FUNCTION "public"."hstore_version_diag"(IN "public"."hstore") RETURNS "int4" 
	AS '$libdir/hstore','hstore_version_diag'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hstore_version_diag"(IN "public"."hstore") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.fetchval("public"."hstore", text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."fetchval"("public"."hstore", text);
CREATE FUNCTION "public"."fetchval"(IN "public"."hstore", IN text) RETURNS "text" 
	AS '$libdir/hstore','hstore_fetchval'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."fetchval"(IN "public"."hstore", IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.slice_array("public"."hstore", _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."slice_array"("public"."hstore", _text);
CREATE FUNCTION "public"."slice_array"(IN "public"."hstore", IN _text) RETURNS "_text" 
	AS '$libdir/hstore','hstore_slice_to_array'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."slice_array"(IN "public"."hstore", IN _text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.slice("public"."hstore", _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."slice"("public"."hstore", _text);
CREATE FUNCTION "public"."slice"(IN "public"."hstore", IN _text) RETURNS "public"."hstore" 
	AS '$libdir/hstore','hstore_slice_to_hstore'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."slice"(IN "public"."hstore", IN _text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.isexists("public"."hstore", text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."isexists"("public"."hstore", text);
CREATE FUNCTION "public"."isexists"(IN "public"."hstore", IN text) RETURNS "bool" 
	AS '$libdir/hstore','hstore_exists'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."isexists"(IN "public"."hstore", IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.exist("public"."hstore", text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."exist"("public"."hstore", text);
CREATE FUNCTION "public"."exist"(IN "public"."hstore", IN text) RETURNS "bool" 
	AS '$libdir/hstore','hstore_exists'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."exist"(IN "public"."hstore", IN text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.exists_any("public"."hstore", _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."exists_any"("public"."hstore", _text);
CREATE FUNCTION "public"."exists_any"(IN "public"."hstore", IN _text) RETURNS "bool" 
	AS '$libdir/hstore','hstore_exists_any'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."exists_any"(IN "public"."hstore", IN _text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.exists_all("public"."hstore", _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."exists_all"("public"."hstore", _text);
CREATE FUNCTION "public"."exists_all"(IN "public"."hstore", IN _text) RETURNS "bool" 
	AS '$libdir/hstore','hstore_exists_all'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."exists_all"(IN "public"."hstore", IN _text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.hstore_to_matrix("public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hstore_to_matrix"("public"."hstore");
CREATE FUNCTION "public"."hstore_to_matrix"(IN "public"."hstore") RETURNS "_text" 
	AS '$libdir/hstore','hstore_to_matrix'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hstore_to_matrix"(IN "public"."hstore") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.akeys("public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."akeys"("public"."hstore");
CREATE FUNCTION "public"."akeys"(IN "public"."hstore") RETURNS "_text" 
	AS '$libdir/hstore','hstore_akeys'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."akeys"(IN "public"."hstore") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.avals("public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."avals"("public"."hstore");
CREATE FUNCTION "public"."avals"(IN "public"."hstore") RETURNS "_text" 
	AS '$libdir/hstore','hstore_avals'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."avals"(IN "public"."hstore") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.skeys("public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."skeys"("public"."hstore");
CREATE FUNCTION "public"."skeys"(IN "public"."hstore") RETURNS SETOF "text" 
	AS '$libdir/hstore','hstore_skeys'
	LANGUAGE c
	COST 1
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."skeys"(IN "public"."hstore") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.svals("public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."svals"("public"."hstore");
CREATE FUNCTION "public"."svals"(IN "public"."hstore") RETURNS SETOF "text" 
	AS '$libdir/hstore','hstore_svals'
	LANGUAGE c
	COST 1
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."svals"(IN "public"."hstore") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.each("public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."each"("public"."hstore");
CREATE FUNCTION "public"."each"(IN hs "public"."hstore", OUT "key" text, OUT "value" text) RETURNS SETOF "record" 
	AS '$libdir/hstore','hstore_each'
	LANGUAGE c
	COST 1
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."each"(IN hs "public"."hstore", OUT "key" text, OUT "value" text) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.populate_record(anyelement, "public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."populate_record"(anyelement, "public"."hstore");
CREATE FUNCTION "public"."populate_record"(IN anyelement, IN "public"."hstore") RETURNS "anyelement" 
	AS '$libdir/hstore','hstore_populate_record'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."populate_record"(IN anyelement, IN "public"."hstore") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.hstore_eq("public"."hstore", "public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hstore_eq"("public"."hstore", "public"."hstore");
CREATE FUNCTION "public"."hstore_eq"(IN "public"."hstore", IN "public"."hstore") RETURNS "bool" 
	AS '$libdir/hstore','hstore_eq'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hstore_eq"(IN "public"."hstore", IN "public"."hstore") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.hstore_ne("public"."hstore", "public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hstore_ne"("public"."hstore", "public"."hstore");
CREATE FUNCTION "public"."hstore_ne"(IN "public"."hstore", IN "public"."hstore") RETURNS "bool" 
	AS '$libdir/hstore','hstore_ne'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hstore_ne"(IN "public"."hstore", IN "public"."hstore") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.hstore_gt("public"."hstore", "public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hstore_gt"("public"."hstore", "public"."hstore");
CREATE FUNCTION "public"."hstore_gt"(IN "public"."hstore", IN "public"."hstore") RETURNS "bool" 
	AS '$libdir/hstore','hstore_gt'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hstore_gt"(IN "public"."hstore", IN "public"."hstore") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.hstore_ge("public"."hstore", "public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hstore_ge"("public"."hstore", "public"."hstore");
CREATE FUNCTION "public"."hstore_ge"(IN "public"."hstore", IN "public"."hstore") RETURNS "bool" 
	AS '$libdir/hstore','hstore_ge'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hstore_ge"(IN "public"."hstore", IN "public"."hstore") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.hstore_lt("public"."hstore", "public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hstore_lt"("public"."hstore", "public"."hstore");
CREATE FUNCTION "public"."hstore_lt"(IN "public"."hstore", IN "public"."hstore") RETURNS "bool" 
	AS '$libdir/hstore','hstore_lt'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hstore_lt"(IN "public"."hstore", IN "public"."hstore") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.hstore_le("public"."hstore", "public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hstore_le"("public"."hstore", "public"."hstore");
CREATE FUNCTION "public"."hstore_le"(IN "public"."hstore", IN "public"."hstore") RETURNS "bool" 
	AS '$libdir/hstore','hstore_le'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hstore_le"(IN "public"."hstore", IN "public"."hstore") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.hstore_cmp("public"."hstore", "public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hstore_cmp"("public"."hstore", "public"."hstore");
CREATE FUNCTION "public"."hstore_cmp"(IN "public"."hstore", IN "public"."hstore") RETURNS "int4" 
	AS '$libdir/hstore','hstore_cmp'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hstore_cmp"(IN "public"."hstore", IN "public"."hstore") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.hstore_hash("public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hstore_hash"("public"."hstore");
CREATE FUNCTION "public"."hstore_hash"(IN "public"."hstore") RETURNS "int4" 
	AS '$libdir/hstore','hstore_hash'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hstore_hash"(IN "public"."hstore") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.ghstore_in(cstring)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."ghstore_in"(cstring);
CREATE FUNCTION "public"."ghstore_in"(IN cstring) RETURNS "public"."ghstore" 
	AS '$libdir/hstore','ghstore_in'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."ghstore_in"(IN cstring) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.ghstore_out("public"."ghstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."ghstore_out"("public"."ghstore");
CREATE FUNCTION "public"."ghstore_out"(IN "public"."ghstore") RETURNS "cstring" 
	AS '$libdir/hstore','ghstore_out'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."ghstore_out"(IN "public"."ghstore") OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.ghstore_compress(internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."ghstore_compress"(internal);
CREATE FUNCTION "public"."ghstore_compress"(IN internal) RETURNS "internal" 
	AS '$libdir/hstore','ghstore_compress'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."ghstore_compress"(IN internal) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.ghstore_decompress(internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."ghstore_decompress"(internal);
CREATE FUNCTION "public"."ghstore_decompress"(IN internal) RETURNS "internal" 
	AS '$libdir/hstore','ghstore_decompress'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."ghstore_decompress"(IN internal) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.ghstore_penalty(internal, internal, internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."ghstore_penalty"(internal, internal, internal);
CREATE FUNCTION "public"."ghstore_penalty"(IN internal, IN internal, IN internal) RETURNS "internal" 
	AS '$libdir/hstore','ghstore_penalty'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."ghstore_penalty"(IN internal, IN internal, IN internal) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.ghstore_picksplit(internal, internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."ghstore_picksplit"(internal, internal);
CREATE FUNCTION "public"."ghstore_picksplit"(IN internal, IN internal) RETURNS "internal" 
	AS '$libdir/hstore','ghstore_picksplit'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."ghstore_picksplit"(IN internal, IN internal) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.ghstore_union(internal, internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."ghstore_union"(internal, internal);
CREATE FUNCTION "public"."ghstore_union"(IN internal, IN internal) RETURNS "internal" 
	AS '$libdir/hstore','ghstore_union'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."ghstore_union"(IN internal, IN internal) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.ghstore_same(internal, internal, internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."ghstore_same"(internal, internal, internal);
CREATE FUNCTION "public"."ghstore_same"(IN internal, IN internal, IN internal) RETURNS "internal" 
	AS '$libdir/hstore','ghstore_same'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."ghstore_same"(IN internal, IN internal, IN internal) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.ghstore_consistent(internal, internal, int4, oid, internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."ghstore_consistent"(internal, internal, int4, oid, internal);
CREATE FUNCTION "public"."ghstore_consistent"(IN internal, IN internal, IN int4, IN oid, IN internal) RETURNS "bool" 
	AS '$libdir/hstore','ghstore_consistent'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."ghstore_consistent"(IN internal, IN internal, IN int4, IN oid, IN internal) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.gin_extract_hstore(internal, internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."gin_extract_hstore"(internal, internal);
CREATE FUNCTION "public"."gin_extract_hstore"(IN internal, IN internal) RETURNS "internal" 
	AS '$libdir/hstore','gin_extract_hstore'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."gin_extract_hstore"(IN internal, IN internal) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.gin_extract_hstore_query(internal, internal, int2, internal, internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."gin_extract_hstore_query"(internal, internal, int2, internal, internal);
CREATE FUNCTION "public"."gin_extract_hstore_query"(IN internal, IN internal, IN int2, IN internal, IN internal) RETURNS "internal" 
	AS '$libdir/hstore','gin_extract_hstore_query'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."gin_extract_hstore_query"(IN internal, IN internal, IN int2, IN internal, IN internal) OWNER TO "rdsadmin";

-- ----------------------------
--  Function structure for public.gin_consistent_hstore(internal, int2, internal, int4, internal, internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."gin_consistent_hstore"(internal, int2, internal, int4, internal, internal);
CREATE FUNCTION "public"."gin_consistent_hstore"(IN internal, IN int2, IN internal, IN int4, IN internal, IN internal) RETURNS "bool" 
	AS '$libdir/hstore','gin_consistent_hstore'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."gin_consistent_hstore"(IN internal, IN int2, IN internal, IN int4, IN internal, IN internal) OWNER TO "rdsadmin";


-- ----------------------------
--  Alter sequences owned by
-- ----------------------------
ALTER SEQUENCE "public"."app_seq" RESTART 5;
ALTER SEQUENCE "public"."radarsat2_seq" RESTART 4;
ALTER SEQUENCE "public"."user_seq" RESTART 5;
-- ----------------------------
--  Primary key structure for table spatial_ref_sys
-- ----------------------------
ALTER TABLE "public"."spatial_ref_sys" ADD PRIMARY KEY ("srid") NOT DEFERRABLE INITIALLY IMMEDIATE;

-- ----------------------------
--  Checks structure for table spatial_ref_sys
-- ----------------------------
ALTER TABLE "public"."spatial_ref_sys" ADD CONSTRAINT "spatial_ref_sys_srid_check" CHECK (((srid > 0) AND (srid <= 998999))) NOT DEFERRABLE INITIALLY IMMEDIATE;

-- ----------------------------
--  Indexes structure for table planet_osm_roads
-- ----------------------------
CREATE INDEX  "planet_osm_roads_index" ON "public"."planet_osm_roads" USING gist(way) WITH (FILLFACTOR=100, BUFFERING=NO);

-- ----------------------------
--  Indexes structure for table planet_osm_line
-- ----------------------------
CREATE INDEX  "planet_osm_line_index" ON "public"."planet_osm_line" USING gist(way) WITH (FILLFACTOR=100, BUFFERING=NO);

-- ----------------------------
--  Indexes structure for table planet_osm_polygon
-- ----------------------------
CREATE INDEX  "planet_osm_polygon_index" ON "public"."planet_osm_polygon" USING gist(way) WITH (FILLFACTOR=100, BUFFERING=NO);

-- ----------------------------
--  Primary key structure for table applications
-- ----------------------------
ALTER TABLE "public"."applications" ADD PRIMARY KEY ("id") NOT DEFERRABLE INITIALLY IMMEDIATE;

-- ----------------------------
--  Primary key structure for table users
-- ----------------------------
ALTER TABLE "public"."users" ADD PRIMARY KEY ("id") NOT DEFERRABLE INITIALLY IMMEDIATE;

-- ----------------------------
--  Indexes structure for table eo1_ali
-- ----------------------------
CREATE INDEX  "eo1_ali_spatial_index" ON "public"."eo1_ali" USING gist(geom);
CREATE INDEX  "eo1_scene_index" ON "public"."eo1_ali" USING btree(scene COLLATE "default" ASC NULLS LAST);

-- ----------------------------
--  Indexes structure for table l8
-- ----------------------------
CREATE INDEX  "l8_scene_index" ON "public"."l8" USING btree(scene COLLATE "default" ASC NULLS LAST);
CREATE INDEX  "l8_spatial_index" ON "public"."l8" USING gist(geom);

-- ----------------------------
--  Primary key structure for table radarsat2
-- ----------------------------
ALTER TABLE "public"."radarsat2" ADD PRIMARY KEY ("scene") NOT DEFERRABLE INITIALLY IMMEDIATE;

-- ----------------------------
--  Indexes structure for table radarsat2
-- ----------------------------
CREATE INDEX  "radarsat2_scene_index" ON "public"."radarsat2" USING btree(scene COLLATE "default" ASC NULLS LAST);
CREATE INDEX  "radarsat2_spatial_index" ON "public"."radarsat2" USING gist(geom);

